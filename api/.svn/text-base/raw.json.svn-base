{"majorversion": 3, "classmap": {"FX": {"name": "FX", "namespace": "", "module": "fx", "methods": {"reflect": {"params": [{"type": "HTMLElement", "name": "img", "description": "  The <img> element."}], "description": "Apply a reflection directly underneath a given image.", "guessedname": "reflect", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "FX", "description": "FX class"}, "ViewController": {"name": "ViewController", "constructors": [{"params": [{"type": "Object", "name": "definition", "description": "  View controller definition"}], "description": "ViewController class\nThis class provides the behavior layer for one screen of the app.\nAll built-in view controller classes and any custom\nview controller classes inherit from this class."}], "namespace": "", "module": "framework", "methods": {"map": {"params": [{"type": "Object", "name": "data", "description": "  The object to map"}, {"type": "String|HTMLElement", "name": "el", "description": "  The CSS selector or DOM node to map to"}, {"type": "String", "name": "nodeName", "description": "  The tag name of the newly created DOM node"}, {"type": "Object", "name": "nodeConfig", "description": "  Object literal of node configuration passed to mui.createElement"}], "description": "Map an Object to a DOM node. The DOM node is assumed to have an HTML comment\nto avoid fetching of malfrormed resources via <img> or background-image: url()", "guessedname": "map", "guessedtype": "function"}, "_viewDidLoad": {"private": "", "description": "Trigger the callback sequence for when the view contents have\nbeen loaded", "guessedname": "_viewDidLoad", "guessedtype": "function"}, "appear": {"description": "Make the view's contents visible", "guessedname": "appear", "guessedtype": "function"}, "viewWillAppear": {"description": "View Appear callback is fired before every time the view is pushed\non-screen", "guessedname": "viewWillAppear", "guessedtype": "function"}, "isViewLoaded": {"return": {"type": "", "description": "Boolean indicating if the view has been loaded."}, "description": "Check to see whether the view has been loaded or not.", "guessedname": "isViewLoaded", "guessedtype": "function"}, "viewDidDisappear": {"description": "View Disappear callback is fired every time the view is taken \noff-screen", "guessedname": "viewDidDisappear", "guessedtype": "function"}, "setViewContent": {"params": [{"type": "String|HTMLElement", "name": "content", "description": "  the HTML String or HTMLElement"}], "description": "Set the content for the view, either in the form of an HTML string, or an\nHTMLElement which will be appended to the view. This method triggers the\nviewDidLoad callback.", "guessedname": "setViewContent", "guessedtype": "function"}, "loadView": {"params": [{"type": "Object", "name": "params", "description": "  Any request params"}], "description": "Load the view contents.  Override this method\nin implementation", "guessedname": "loadView", "guessedtype": "function"}, "getTransition": {"return": {"type": "Object", "description": "Object literal containing type, direction values"}, "description": "This method defines the transition which will occur when this \nviewController is set to appear on-screen. By default, if the\nviewController belongs to a navigationController, the transition\nwill be a \"push\". To define a different transition, override this\nmethod in the viewController.", "guessedname": "getTransition", "guessedtype": "function"}, "unloadView": {"description": "Unload the view contents. This just sets the _viewLoaded property to false", "guessedname": "unloadView", "guessedtype": "function"}, "setNavigationItem": {"params": [{"type": "String", "name": "section", "description": "  Which section to set the navigation item in\nPossible values are leftBarItem, titleItem, rightBarItem"}, {"type": "*", "name": "item", "description": "  Either an HTMLElement, or a mui control, such as a SearchBox"}], "description": "Set a navigation item to be displayed in the navigation bar", "guessedname": "setNavigationItem", "guessedtype": "function"}, "reoladView": {"params": [{"type": "Object", "name": "params", "description": "  Request parameters"}], "description": "Reload the contents of the view. This method will be called by the framework\nwhen this ViewController has been pushed onto a navigation stack, and later\nvisited with a different set of request parameters.", "guessedname": "reloadView", "guessedtype": "function"}, "navigationItems": {"type": "Object", "description": "The navigationItems property is used to allow view controllers to specify\nthe contents for the navigation-bar. There are 3 possible locations for \nnavigation items.  Left (back button), Center (title), Right (custom view).\nYou can use the viewWillAppear callback to set navigation items for a \nview controller.\nSee: http:\/\/developer.apple.com\/iphone\/library\/featuredarticles\/ViewControllerPGforiPhoneOS\/UsingNavigationControllers\/UsingNavigationControllers.html#\/\/apple_ref\/doc\/uid\/TP40007457-CH7-SW1\nfor a detailed explanation of navigation item's in context of native \niPhone development, as the rules are similar.", "guessedname": "navigationItems", "guessedtype": "property"}, "fetchJSON": {"params": [{"type": "String", "name": "url", "description": "  The url of the resource"}, {"type": "Function", "name": "callback", "description": "  The callback function to execute when the resource has loaded"}, {"type": "Object", "name": "scope", "description": "  The scope to be applied to the callback function."}], "description": "Utility method for fetching a JSON resource.", "guessedname": "fetchJSON", "guessedtype": "function"}, "viewDidAppear": {"description": "View Appear callback is fired every time the view is pushed\non-screen", "guessedname": "viewDidAppear", "guessedtype": "function"}, "fetchViewContent": {"params": [{"type": "String", "name": "url", "description": "  The URL of the view content"}, {"type": "Function", "name": "callback", "description": "  Optional callback function invoked upon\nXHR completion"}], "description": "Fetch view content using mui.io. This method will trigger\nthe viewDidLoad callback upon success", "guessedname": "fetchViewContent", "guessedtype": "function"}, "viewWillDisappear": {"description": "View Disappear callback is fired before every time the view is taken \noff-screen", "guessedname": "viewWillDisappear", "guessedtype": "function"}, "setView": {"params": [{"type": "String|HTMLElement", "name": "el", "description": "  Selector string or HTML element for the view"}, {"type": "Boolean", "name": "isLoaded", "description": "  Whether or not the HTML element is loaded. Default is false."}], "description": "Set the root node for the view. If the second argument passed to the\nmethod is true, then it is assumed the node is already loaded. Otherwise,\none must use setViewContent to trigger the viewDidLoad callback.", "guessedname": "setView", "guessedtype": "function"}, "disappear": {"description": "Hide the view's contents", "guessedname": "disappear", "guessedtype": "function"}, "viewDidLoad": {"description": "View Load callback is fired every time the view is first loaded", "guessedname": "viewDidLoad", "guessedtype": "function"}}, "file": "ViewController.js", "shortname": "ViewController", "properties": {"persistView": {"default": "true", "type": "Boolean", "description": "Flag to determine if ViewController should be persisted. If set to\nfalse, then this ViewController will not be restored when the\nnavigationController's stack is restored", "guessedname": "persistView", "guessedtype": "property"}, "_viewLoaded": {"guessedname": "_viewLoaded", "type": "Boolean", "description": "Flag to determine if view data has been loaded", "private": "", "guessedtype": "property"}, "view": {"type": "HTMLElement", "description": "Root node for the view", "guessedname": "view", "guessedtype": "property"}}, "description": "ViewController class\nThis class provides the behavior layer for one screen of the app.\nAll built-in view controller classes and any custom\nview controller classes inherit from this class."}, "NavigationController": {"name": "NavigationController", "namespace": "", "module": "framework", "methods": {"getPreviousViewController": {"return": {"type": "mui.ViewController", "description": "The previous viewController"}, "description": "Get the viewcontroller preceding the top view controller", "guessedname": "getPreviousViewController", "guessedtype": "function"}, "pushViewController": {"return": {"type": "mui.ViewController", "description": "The viewController which was pushed"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController"}, {"type": "Object", "name": "params", "description": "  Any request params to be passed to the viewController"}, {"type": "Boolean", "name": "quiet", "description": "  Set to false to disable the invocation of mui.ApplicationController.openUrl (Default false)"}], "description": "Push a viewController onto the stack", "guessedname": "pushViewController", "guessedtype": "function"}, "getTopViewController": {"return": {"type": "mui.ViewController", "description": "The top viewController"}, "description": "Get the top view controller", "guessedname": "getTopViewController", "guessedtype": "function"}, "initialize": {"description": "NavigationController initialization", "guessedname": "initialize", "guessedtype": "function"}, "goBack": {"description": "Method invoked upon click of the back button in the navigation bar", "guessedname": "goBack", "guessedtype": "function"}, "getViewController": {"return": {"type": "mui.ViewController", "description": "The viewController, or -1 if not found"}, "params": [{"type": "String", "name": "name", "description": "  The NAME of the viewController"}], "description": "Get a viewController by it's NAME property", "guessedname": "getViewController", "guessedtype": "function"}, "getViewControllerFromStack": {"return": {"type": "mui.ViewController", "description": "The ViewController, if found"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The viewController to search for"}, {"type": "Object", "name": "params", "description": "  Request parameters belonging to the viewController"}], "description": "Get a viewController from the stack", "guessedname": "getViewControllerFromStack", "guessedtype": "function"}, "viewControllerWillAppear": {"params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The viewController"}], "description": "Callback triggered when viewController is appearing. This is used to\nupdate the contents of the navigation-bar", "guessedname": "viewControllerWillAppear", "guessedtype": "function"}, "getLastUrl": {"return": {"type": "String", "description": "The URL"}, "description": "Return the last application URL for the top viewController in the stack", "guessedname": "getLastUrl", "guessedtype": "function"}, "popToRootViewController": {"description": "Pop to the root viewController in the stack", "guessedname": "popToRootViewController", "guessedtype": "function"}, "popViewController": {"return": {"type": "mui.ViewController", "description": "The viewController which was popped"}, "params": [{"type": "Boolean", "name": "quiet", "description": "  Set to false to disable the invocation of mui.ApplicationController.openUrl (Default false)"}], "description": "Pop the top viewController off the stack", "guessedname": "popViewController", "guessedtype": "function"}, "loadViewControllers": {"params": [{"type": "Array} Array of viewController info, in the form { NAME: 'myName', params: {} ", "name": "viewControllers", "description": ""}], "description": "Load a set of viewController's in the background. Used when a viewController requires\nother viewControllers to be loaded before they are loaded themself.", "guessedname": "loadViewControllers", "guessedtype": "function"}, "saveStack": {"description": "Save the current stack to local storage", "guessedname": "saveStack", "guessedtype": "function"}, "initializeNavigationBar": {"description": "Initialize the navigationBar component", "guessedname": "initializeNavigationBar", "guessedtype": "function"}, "hideNavigationBar": {"description": "Hide the navigation-bar", "guessedname": "hideNavigationBar", "guessedtype": "function"}, "pushToViewController": {"return": {"type": "mui.ViewController", "description": "The viewController, if found and pushed"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to push to"}, {"type": "Boolean", "name": "quiet", "description": "  Set to false to disable the invocation of mui.ApplicationController.openUrl (Default false)"}], "description": "Push forward to a particulator viewController in the forward stack", "guessedname": "pushToViewController", "guessedtype": "function"}, "restoreStack": {"params": [{"type": "Array", "name": "stack", "description": "  Array of stacks as stored in database"}], "description": "Restore the stack of viewControllers to the last visited state", "guessedname": "restoreStack", "guessedtype": "function"}, "popToViewController": {"return": {"type": "mui.ViewController", "description": "The viewController, if found and popped"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to pop to"}, {"type": "Boolean", "name": "quiet", "description": "  Set to false to disable the invocation of mui.ApplicationController.openUrl (Default false)"}], "description": "Pop to a particulator viewController in the stack", "guessedname": "popToViewController", "guessedtype": "function"}, "initializeStack": {"description": "Initialize the stack", "guessedname": "initializeStack", "guessedtype": "function"}}, "param": "def {Object} NavigationController defintion", "file": "NavigationController.js", "shortname": "NavigationController", "properties": {"viewControllers": {"type": "Array", "description": "Array of viewControllers in the navigation hierarchy", "guessedname": "viewControllers", "guessedtype": "property"}, "templateRegExp": {"guessedname": "templateRegExp", "static": "", "description": "Regular expression for template building", "private": "", "guessedtype": "property"}, "navigationBar": {"type": "mui.NavigationBar", "description": "NavigationBar shared by the viewControllers", "guessedname": "navigationBar", "guessedtype": "property"}, "stack": {"type": "Array", "description": "Stack of viewcontroller used to persist navigation history", "guessedname": "stack", "guessedtype": "property"}, "poppedStack": {"type": "Array", "description": "Stack of viewcontroller's which have been popped used to persist\nforward navigation history", "guessedname": "poppedStack", "guessedtype": "property"}}, "description": "NavigationController class\nThis class manages a hierarchy of ViewControllers, and \nprovides\/manages an instance of NavigationBar."}, "ResultSet": {"name": "ResultSet", "constructors": [{"params": [{"type": "Database", "name": "db", "description": "  A Gears database instance"}, {"type": "*", "name": "rs", "description": "  The Gears ResultSet from a call to database.execute"}], "description": "The ResultSet class is a wrapper for Gears which emulates\nthe HTML5 SQLResultSet class."}], "namespace": "", "module": "storage", "guessedname": "ResultSet", "file": "Storage.js", "guessedtype": "function", "shortname": "ResultSet", "properties": {"insertId": {"type": "Number", "description": "The id of the last SQL insert operation", "guessedname": "insertId", "guessedtype": "property"}, "rows": {"type": "ResultSetRowList", "description": "The result set rows for the SQL transaction", "guessedname": "rows", "guessedtype": "property"}, "rowsAffected": {"type": "Number", "description": "The number of rows affected by the last SQL transaction", "guessedname": "rowsAffected", "guessedtype": "property"}}, "description": "The ResultSet class is a wrapper for Gears which emulates\nthe HTML5 SQLResultSet class."}, "Animation": {"name": "Animation", "namespace": "", "module": "anim", "methods": {"animate": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}, {"type": "Object} The animation configuration\nExample:\nAnimating a position 100px up and 100px to the left:\nmui.animate('#the-element', {\ntop: '-100px',\nleft: '-100px',\nduration: '0.5s'\n", "name": "options", "description": " );"}], "description": "Animate an object's position, using webkit transitions.", "guessedname": "animate", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Animation", "description": "Animation class"}, "Env": {"name": "Env", "namespace": "", "module": "env", "static": "", "file": "mui.js", "shortname": "Env", "description": "Env class"}, "SwipeView": {"name": "SwipeView", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "el", "description": "  CSS selector or HTMLElement for the container"}], "description": "The SwipeView class provides the ability to create a list of elements\nwhich the user can swipe left and right to navigate through. The widget\nassumes a particular markup structure of a <ul> where each <li> will\nbe sized to 1 full-screen width of content."}], "namespace": "", "module": "swipe-view", "methods": {"_transitionend": {"guessedname": "_transitionend", "params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "transitionend event handler", "private": "", "guessedtype": "function"}, "_touchmove": {"guessedname": "_touchmove", "params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchmove event handler", "private": "", "guessedtype": "function"}, "scrollTo": {"return": {"type": "SwipeView", "description": "The SwipeView instance"}, "params": [{"type": "Number", "name": "x", "description": "  The x translation value"}, {"type": "String", "name": "duration", "description": "  The duration, if animated"}, {"type": "String", "name": "timing", "description": "  The timing function, if animated"}], "description": "Scroll the view to particular value, with an optional animation duration\nand timing function", "guessedname": "scrollTo", "guessedtype": "function"}, "setup": {"return": {"type": "SwipeView", "description": "The SwipeView instance"}, "description": "Setup the elements for the swipe view. This method is called upon\ninstantation of a SwipeView, and on any orientation change to resize\nelements as needed.", "guessedname": "setup", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "_touchend": {"guessedname": "_touchend", "params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchend event handler", "private": "", "guessedtype": "function"}, "_orientationchange": {"guessedname": "_orientationchange", "params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "orientationchange event handler", "private": "", "guessedtype": "function"}, "_pushTranslation": {"guessedname": "_pushTranslation", "params": [{"type": "Number", "name": "t", "description": "  The translation value"}], "description": "Push a translation value onto the stack", "private": "", "guessedtype": "function"}, "activatePage": {"description": "Activate the page at the currently set index", "guessedname": "activatePage", "guessedtype": "function"}, "nextPage": {"description": "Goto the next page", "guessedname": "nextPage", "guessedtype": "function"}, "_touchstart": {"guessedname": "_touchstart", "params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchstart event handler", "private": "", "guessedtype": "function"}}, "file": "SwipeView.js", "shortname": "SwipeView", "description": "The SwipeView class provides the ability to create a list of elements\nwhich the user can swipe left and right to navigate through. The widget\nassumes a particular markup structure of a <ul> where each <li> will\nbe sized to 1 full-screen width of content."}, "TabView": {"name": "TabView", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "el", "description": "  CSS Selector or HTMLElement for the tabs container"}, {"type": "Object", "name": "options", "description": "  TabView configuration options"}], "description": "The TabView class provides a tabbed navigation model for related\ncontents. TabViews can be embedded inside the header of a page for\nglobal navigation, or inside the content of the page"}], "namespace": "", "module": "tab-view", "methods": {"setTabContent": {"params": [{"type": "Number", "name": "index", "description": "  The index of the tab"}, {"type": "String|HTMLElement", "name": "tabContent", "description": "  The tabContent element"}], "description": "Set the tabContent for a particular tab at a given index", "guessedname": "setTabContent", "guessedtype": "function"}, "activateTabAtIndex": {"return": {"type": "mui.TabView", "description": "The TabView instance"}, "params": [{"type": "Number", "name": "index", "description": "  The index of the tab to activate"}], "description": "Activate a tab at a given index by activating the selected state of the tab, as well\nas showing any tab content for the tab", "guessedname": "activateTabAtIndex", "guessedtype": "function"}, "handleEvent": {"guessedname": "handleEvent", "params": [{"type": "Event", "name": "e", "description": "  The DOM event"}], "description": "DOM Event handler", "private": "", "guessedtype": "function"}, "tabRefreshed": {"params": [{"type": "Number", "name": "index", "description": "  The index of the selected tab"}], "description": "This method is invoked whenever the currently active tab is reactivated.\nOverride this method in implementation. The first argument to the method\nis the index of the selected tab.", "guessedname": "tabRefreshed", "guessedtype": "function"}, "tabChanged": {"params": [{"type": "Number", "name": "index", "description": "  The index of the selected tab"}], "description": "Tab change event handler which is invoked every time a tab is activated.\nOverride this method in implementation. The first argument to the method\nis the index of the selected tab.", "guessedname": "tabChanged", "guessedtype": "function"}}, "file": "TabView.js", "shortname": "TabView", "properties": {"tabContents": {"type": "Array", "description": "Array of elements which are the contents for each tab", "guessedname": "tabContents", "guessedtype": "property"}, "activeIndex": {"type": "Number", "description": "The index of the currently selected tab", "guessedname": "activeIndex", "guessedtype": "property"}, "element": {"type": "HTMLElement", "description": "The HTMLElement containing the tabs", "guessedname": "element", "guessedtype": "property"}}, "description": "The TabView class provides a tabbed navigation model for related\ncontents. TabViews can be embedded inside the header of a page for\nglobal navigation, or inside the content of the page"}, "Ajax": {"name": "Ajax", "namespace": "", "module": "ajax", "methods": {"getScript": {"params": [{"type": "String", "name": "url", "description": "  The url of the scrip"}, {"type": "Function", "name": "callback", "description": "  Callback invoked after script is downloaded"}, {"type": "Object", "name": "scope", "description": "  The context of the callback function"}], "description": "Fetch an external script resource", "guessedname": "getScript", "guessedtype": "function"}, "io": {"return": {"type": "Boolean", "description": "True if el is contained inside the document, false otherwise."}, "params": [{"type": "String", "name": "url", "description": "  URL endpoint"}, {"type": "Object} Configuration options:\nmethod {String}: get, post\ncallback {Object}: Object literal containing the success and failure callback functions,\nas well as the scope to be applied to the callback functions.\nupdate {String|HTMLElement}: If present, the given element will be updated with the result \nof the transaction.\nExample: \nUsing callback function:\nmui.io('\/ajax.php', {\nmethod: 'get',\nheaders: [ { 'Content-Type': 'application\/x-www-form-urlencoded' }],\ncallback: {\nsuccess: function(o) {\n\/\/ do something with o.responseText\n},\nscope: this\n});\nUsing update property:\nmui.io('\/ajax.php', {\nmethod: 'get',\nupdate: '#el-to-be-updated'\n", "name": "options", "description": " );"}], "description": "XHR wrapper for making asynchronous connections", "guessedname": "io", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Ajax", "description": "AJAX class"}, "Oop": {"name": "Oop", "namespace": "", "module": "oop", "methods": {"provide": {"params": [{"type": "String", "name": "ns", "description": "  The namespace. This can be a chained namespace, i.e., \"levelOne.levelTwo.levelThree\""}], "description": "Provide a namespace.", "guessedname": "provide", "guessedtype": "function"}, "bind": {"return": {"type": "Function", "description": "the wrapped function"}, "params": [{"type": "Function", "name": "fn", "description": "  The function to bind"}, {"type": "Object", "name": "ctx", "description": "  The context in which the function will be executed"}, {"type": "", "name": "args*", "description": " 0..n arguments to include before the arguments the \nfunction is executed with"}], "description": "Bind a function to a given context and arguments", "guessedname": "bind", "guessedtype": "function"}, "augment": {"return": {"type": "", "description": "The original object with all the original properties , plus the passed in extensions."}, "params": [{"type": "Object", "name": "obj", "description": "  The object to be augmented"}, {"type": "Object", "name": "ext", "description": "  Object literal containing members to be added the object."}], "description": "Object augmentation", "guessedname": "augment", "guessedtype": "function"}, "extend": {"return": {"type": "", "description": "The subclass, with properties\/methods inherited from superclass"}, "params": [{"type": "Object", "name": "sub", "description": "  The subclass"}, {"type": "Object", "name": "sup", "description": "  The superclass from which to extend"}, {"type": "Object", "name": "proto", "description": "  prototype properties to add\/override"}, {"type": "Object", "name": "stat", "description": "  static properties to add\/override"}], "description": "Simple object extension. Static members will not be inherited to the child class.\nThe superclass and constructor properties are added to parent and child classes.", "guessedname": "extend", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Oop", "description": "OOP class"}, "Pager": {"name": "Pager", "constructors": [{"params": [{"type": "Object} The pager configuration options\nExample:\nvar myPager = new mui.Pager({ orientation: 'vertical' ", "name": "config", "description": " );"}], "description": "The Pager class provides a next\/previous control which can be \nused in the navigation bar.  The orientation may either be\nvertical (up\/down) or horizontal (left\/right). The default \norientation is vertical."}], "namespace": "", "module": "pager", "methods": {"render": {"return": {"type": "Pager", "description": "The Pager instance"}, "params": [{"type": "HTMLElement|String", "name": "el", "description": "  The Selector or HTMLElement to render into"}], "description": "Render the pager element into a container", "guessedname": "render", "guessedtype": "function"}, "goPrev": {"return": {"type": "Pager", "description": "The Pager instance"}, "description": "Activate the prev item", "guessedname": "goPrev", "guessedtype": "function"}, "setNextUrl": {"return": {"type": "Pager", "description": "The Pager instance"}, "params": [{"type": "String", "name": "url", "description": "  The url"}], "description": "Set the URL for the next control", "guessedname": "setNextUrl", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "goNext": {"return": {"type": "Pager", "description": "The Pager instance"}, "description": "Activate the next item", "guessedname": "goNext", "guessedtype": "function"}, "setPrevUrl": {"return": {"type": "Pager", "description": "The Pager instance"}, "params": [{"type": "String", "name": "url", "description": "  The url"}], "description": "Set the URL for the previous control", "guessedname": "setPrevUrl", "guessedtype": "function"}}, "file": "Pager.js", "shortname": "Pager", "properties": {"nextUrl": {"type": "String", "description": "URL for next control", "guessedname": "nextUrl", "guessedtype": "property"}, "prevUrl": {"type": "String", "description": "URL for prev control", "guessedname": "prevUrl", "guessedtype": "property"}}, "description": "The Pager class provides a next\/previous control which can be \nused in the navigation bar.  The orientation may either be\nvertical (up\/down) or horizontal (left\/right). The default \norientation is vertical."}, "Transaction": {"name": "Transaction", "constructors": [{"params": [{"type": "Database", "name": "database", "description": "  The Gears database instance"}, {"type": "Function", "name": "error", "description": "  Error handler"}, {"type": "Function", "name": "success", "description": "  Success handler"}], "description": "The Transaction class is a wrapper for Gears which emulates\nthe HTML5 Transaction class."}], "namespace": "", "module": "storage", "guessedname": "Transaction", "methods": {"executeSql": {"params": [{"type": "String", "name": "sql", "description": "  The SQL statement"}, {"type": "Array", "name": "params", "description": "  Array of param values for SQL"}, {"type": "Function", "name": "success", "description": "  Success callback function"}, {"type": "Function", "name": "error", "description": "  Error callback function"}], "description": "Execute a SQL statement", "guessedname": "executeSql", "guessedtype": "function"}}, "file": "Storage.js", "guessedtype": "function", "shortname": "Transaction", "properties": {"_db": {"guessedname": "_db", "type": "Database", "description": "Reference to the Gears database", "private": "", "guessedtype": "property"}}, "description": "The Transaction class is a wrapper for Gears which emulates\nthe HTML5 Transaction class."}, "Dom": {"name": "Dom", "namespace": "", "module": "dom", "methods": {"getXY": {"return": {"type": "Array", "description": "Array containing the (x,y) coordinates of the element."}, "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}], "description": "Get the (x,y) coordinates for a given element.", "guessedname": "getXY", "guessedtype": "function"}, "getAncestorBy": {"return": {"type": "", "description": "The ancestor node if found, false otherwise."}, "params": [{"type": "String|Object", "name": "node", "description": "  The CSS selector string or DOM node."}, {"type": "Function", "name": "fn", "description": "  The comparison function - return true or false."}, {"type": "Object", "name": "scope", "description": "  The scope of the passed function (optional)"}], "description": "Get an ancestor node by a comparison function", "guessedname": "getAncestorBy", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "className", "description": "  The class name."}], "description": "Remove a class name from a DOM node", "guessedname": "removeClass", "guessedtype": "function"}, "insertBefore": {"params": [{"type": "Object", "name": "node", "description": ""}, {"type": "String|Object", "name": "refNode", "description": "  The CSS selector string or DOM node to insert before"}], "description": "Insert an element before another element in the DOM.", "guessedname": "insertBefore", "guessedtype": "function"}, "get": {"return": {"type": "HTMLElement", "description": "The single element matching the given selector."}, "params": [{"type": "String", "name": "selector", "description": "  Valid CSS query selector"}, {"type": "HTMLElement", "name": "parentNode", "description": "  If present, CSS selector is relative to this DOM ndoe."}], "description": "Find an element by CSS query selector.  If parentNode is passed as second argument,\nthe CSS selector is relative that node.", "guessedname": "get", "guessedtype": "function"}, "getAncestorByTagName": {"return": {"type": "", "description": "The ancestor node if found, false otherwise."}, "params": [{"type": "String|Object", "name": "node", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "tagName", "description": "  The tag name of the element to search for."}], "description": "Get an ancestor node by tag name", "guessedname": "getAncestorByTagName", "guessedtype": "function"}, "contains": {"return": {"type": "", "description": "True if el is contained inside of parentNode, false otherwise."}, "params": [{"type": "Object", "name": "parent", "description": "  The CSS selector string or DOM node for the parent node."}, {"type": "Object", "name": "el", "description": "  The CSS selector string or DOM node for the child node."}, {"type": "HTMLElement", "name": "orig", "description": "  The original parent node, used in recursion"}], "description": "Check if a node is contained inside another node.", "guessedname": "contains", "guessedtype": "function"}, "getAll": {"return": {"type": "Array", "description": "An array of elements matching the given selector."}, "params": [{"type": "String", "name": "selector", "description": "  Valid CSS query selector"}, {"type": "HTMLElement", "name": "parentNode", "description": "  If present, CSS selector is relative to this DOM ndoe."}], "description": "Find a collection of elements by CSS query selector.  If parentNode is passed as second argument,\nthe CSS selector is relative that node.", "guessedname": "getAll", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "name", "description": "  The style property name."}, {"type": "String", "name": "value", "description": "  The style property value."}], "description": "Set a style for a given element.", "guessedname": "setStyle", "guessedtype": "function"}, "hasClass": {"return": {"type": "", "description": "True if the node has the class name applied to it, false otherwise."}, "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "className", "description": "  The class name."}], "description": "Check if a DOM node has a given class name.", "guessedname": "hasClass", "guessedtype": "function"}, "getAncestorByClassName": {"return": {"type": "", "description": "The ancestor node if found, false otherwise."}, "params": [{"type": "String|Object", "name": "node", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "className", "description": "  The name of the class to search for"}], "description": "Get an ancestor node by a class name", "guessedname": "getAncestorByClassName", "guessedtype": "function"}, "getStyle": {"return": {"type": "String", "description": "Computed style for the given node and property"}, "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "style", "description": "  The style property."}], "description": "Get the computed style for a given element.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "Array", "name": "xy", "description": "  Array containing the (x,y) coordinates to be set."}], "description": "Set the (x,y) coordinates of a given element", "guessedname": "setXY", "guessedtype": "function"}, "insertAfter": {"params": [{"type": "Object", "name": "node", "description": ""}, {"type": "String|Object", "name": "refNode", "description": "  The CSS selector string or DOM node to insert after"}], "description": "Insert an element after another element in the DOM.", "guessedname": "insertAfter", "guessedtype": "function"}, "createElement": {"return": {"type": "HTMLElement", "description": "DOM node with passed in attriutes."}, "params": [{"type": "String", "name": "nodeName", "description": "  The node name of the element to be created"}, {"type": "Object", "name": "options", "description": "  Attributes to be attached to the created element."}], "description": "Create a DOM node.", "guessedname": "createElement", "guessedtype": "function"}, "setStyles": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "Object", "name": "styles", "description": "  Object literal containing style definitions."}], "description": "Set a collection of styles for a given element.", "guessedname": "setStyles", "guessedtype": "function"}, "inDocument": {"return": {"type": "", "description": "True if el is contained inside the document, false otherwise."}, "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}], "description": "Check if a node exists in the document.", "guessedname": "inDocument", "guessedtype": "function"}, "removeElement": {"return": {"type": "HTMLElement", "description": "The deleted node"}, "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}], "description": "Remove a node from the DOM.", "guessedname": "removeElement", "guessedtype": "function"}, "addClass": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "className", "description": "  The class name."}], "description": "Add a class name to a DOM node", "guessedname": "addClass", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Dom", "description": "Dom class"}, "ActionSheet": {"name": "ActionSheet", "constructors": [{"params": [{"type": "Object} ActionSheet commands configuration<br\/>\nPossible configuration attributes:<br\/>\n<strong>title<\/strong> (String) - the message displayed at the top of the action sheet when shown<br\/>\n<strong>cancelButton<\/strong> (Object { title, action }) - the text for the cancel button, and URL or function for button activation<br\/>\n<strong>destructiveButton<\/strong> (Object {title, action }) - the text for the destructive button, and URL or function for button activation<br\/>\n<storng>otherButtons<\/strong> (Array) - Array of titles\/actions for other buttons, which are shown between the destructive and cancel buttons <br\/>\n<br\/>\nExample: <br\/>\nvar myActionSheet = new mui.ActionSheet({<br\/>\ntitle: 'Blah blah blah',<br\/>\ncancelButton: { title: 'Cancel' },<br\/>\ndestructiveButton: { title: 'Alert!', action: myAlertMethod },<br\/>\notherButtons: [<br\/>\n{ title: 'Option 1', action: '\/options\/1' },<br\/>\n{ title: 'Option 2', action: myOption2 }<br\/>\n]<br\/>\n", "name": "config", "description": " );<br\/>\nmyActionSheet.show();"}], "description": "<p>\nThe ActionSheet class provides a modal view which slides up from\nthe bottom of the screen with 1 or more buttons, and a message. An example of this\nis in the iPhone Safari Application, when you click the + button, an\naction sheet view is displayed with options to bookmark the page. If the title is present,\nthat is displayed on the top of the aciton sheet. The order of the buttons are as follows:\n<\/p>\n<ol>\n<li>destructive button (in red)<\/li>\n<li>other buttons (in gray)<\/li>\n<li>cancel button (in black)<\/li>\n<\/ol>\n<p>\nThe valid configuration attributes are:\n<strong>title, cancelButton, destructiveButton, otherButtons<\/strong>\n<\/p>"}], "namespace": "", "module": "actionsheet", "methods": {"hide": {"return": {"type": "ActionSheet", "description": "The ActionSheet instance"}, "description": "Hide the ActionSheet dialog", "guessedname": "hide", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "show": {"return": {"type": "ActionSheet", "description": "The ActionSheet instance"}, "description": "Show the ActionSheet dialog, transitioning from the bottom", "guessedname": "show", "guessedtype": "function"}}, "file": "ActionSheet.js", "shortname": "ActionSheet", "description": "<p>\nThe ActionSheet class provides a modal view which slides up from\nthe bottom of the screen with 1 or more buttons, and a message. An example of this\nis in the iPhone Safari Application, when you click the + button, an\naction sheet view is displayed with options to bookmark the page. If the title is present,\nthat is displayed on the top of the aciton sheet. The order of the buttons are as follows:\n<\/p>\n<ol>\n<li>destructive button (in red)<\/li>\n<li>other buttons (in gray)<\/li>\n<li>cancel button (in black)<\/li>\n<\/ol>\n<p>\nThe valid configuration attributes are:\n<strong>title, cancelButton, destructiveButton, otherButtons<\/strong>\n<\/p>"}, "Transition": {"name": "Transition", "constructors": [{"params": [{"type": "HTMLElement", "name": "inView", "description": "  The element to transition in"}, {"type": "HTMLElement", "name": "outView", "description": "  The element to transition out"}, {"type": "Object", "name": "options", "description": "  Transition options\ntype, duration, reverse, onComplete, onCancel"}], "description": "Transition constructor.<br\/>\nThe new view is positioned relative to the current position of the old (currently visible) view."}], "namespace": "", "module": "transition", "methods": {"execute": {"description": "Execute the transition", "guessedname": "execute", "guessedtype": "function"}, "_transitionEnd": {"private": "", "description": "WebkitTransitionEnd callback", "guessedname": "_transitionEnd", "guessedtype": "function"}, "_translate": {"return": {"type": "HTMLElement", "description": "The translated element"}, "description": "Set the translation values for a given element", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to translate"}, {"type": "String", "name": "x", "description": "  The string value for x translation (i.e, '320px' or '100%')"}, {"type": "String", "name": "y", "description": "  The string value for y translation (i.e, '320px' or '100%')"}, {"type": "String", "name": "z", "description": "  The string value for z translation (i.e, '320px' or '100%')"}, {"type": "Number", "name": "duration", "description": "  (Optional) If duration is specified, a transition will occur"}, {"type": "Function", "name": "cb", "description": "  (Optional) Optional callback once transition ends, if duration is passed"}], "guessedname": "_translate", "guessedtype": "function"}, "setup": {"private": "", "description": "Setup the elements for the transition", "guessedname": "_setup", "guessedtype": "function"}, "_setTransitionProperties": {"guessedname": "_setTransitionProperties", "params": [{"type": "Array", "name": "properties", "description": "  Array of CSS property names"}], "description": "Set the transition properties of the elements", "private": "", "guessedtype": "function"}, "_removeTransitionProperties": {"private": "", "description": "Remove the transition properties from the elements", "guessedname": "_removeTransitionProperties", "guessedtype": "function"}}, "file": "Transition.js", "shortname": "Transition", "properties": {"DIR_BOTTOM_TO_TOP": {"type": "String", "static": "", "description": "Direction: bottom-to-top", "guessedname": "DIR_BOTTOM_TO_TOP", "guessedtype": "property"}, "DIR_RIGHT_TO_LEFT": {"type": "String", "static": "", "description": "Direction: right-to-left", "guessedname": "DIR_RIGHT_TO_LEFT", "guessedtype": "property"}, "TYPE_PUSH": {"type": "String", "static": "", "description": "Transition type: push", "guessedname": "TYPE_PUSH", "guessedtype": "property"}, "TYPE_SLIDE": {"type": "String", "static": "", "description": "Transition type: slide", "guessedname": "TYPE_SLIDE", "guessedtype": "property"}, "DURATIONS": {"type": "Object", "static": "", "description": "Default settings for transition durations", "guessedname": "DURATIONS", "guessedtype": "property"}, "TYPE_FLIP": {"type": "String", "static": "", "description": "Transition type: flip", "guessedname": "TYPE_FLIP", "guessedtype": "property"}, "DIR_TOP_TO_BOTTOM": {"type": "String", "static": "", "description": "Direction: top-to-bottom", "guessedname": "DIR_TOP_TO_BOTTOM", "guessedtype": "property"}, "DIR_LEFT_TO_RIGHT": {"type": "String", "static": "", "description": "Direction: left-to-right", "guessedname": "DIR_LEFT_TO_RIGHT", "guessedtype": "property"}, "TYPE_FADE": {"type": "String", "static": "", "description": "Transition type: fade", "guessedname": "TYPE_FADE", "guessedtype": "property"}}, "description": "Transition constructor.<br\/>\nThe new view is positioned relative to the current position of the old (currently visible) view."}, "ScrollView": {"name": "ScrollView", "constructors": [{"params": [{"type": "HTMLElement|String", "name": "el", "description": "  Selector string or HTMLelement for the node"}, {"type": "Number", "name": "heightOrWidth", "description": "  The height (if y-axis) or width (if x-axis) of the scrollview in px"}, {"type": "String", "name": "axis", "description": "  Either 'x' or 'y' determines the axis of scrolling"}], "description": "ScrollView class\nProvides ability to create a scrollable container."}], "namespace": "", "module": "scroll-view", "methods": {"onTouchEnd": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchend event handler", "guessedname": "onTouchEnd", "guessedtype": "function"}, "renderTexture": {"description": "This method renders the element into a texture by setting \nan initial translation. It then positions it off-screen \n(minus 1px) and scrolls the element via translations until\nthe entire element's content has been rendered in the texture.\nFinally, it is placed back on screen.", "guessedname": "renderTexture", "guessedtype": "function"}, "getElement": {"return": {"type": "HTMLElement", "description": "The root node"}, "description": "Return a reference to the root HTML node", "guessedname": "getElement", "guessedtype": "function"}, "onTransitionEnd": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "transitionEnd event handler", "guessedname": "onTransitionEnd", "guessedtype": "function"}, "onTouchMove": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchmove event handler", "guessedname": "onTouchMove", "guessedtype": "function"}, "onOrientationChange": {"description": "orientationchange event handler", "guessedname": "onOrientationChange", "guessedtype": "function"}, "initialize": {"description": "Initialize the scroll view.", "guessedname": "initialize", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The events"}], "description": "Event Dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "scrollTo": {"timing": "{String} The timing transition function", "params": [{"type": "Number", "name": "pos", "description": "  The x or y position to scroll to"}, {"type": "String", "name": "duration", "description": "  How long, i.e. '350ms'"}], "description": "Scroll the element to a given y coordinate at a specified time.\nThe default transition is a cubic-bezier function.", "guessedname": "scrollTo", "guessedtype": "function"}, "lockScroll": {"description": "Lock the ScrollView, preventing it from scrolling", "guessedname": "lockScroll", "guessedtype": "function"}, "onTouchStart": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchStart event handler", "guessedname": "onTouchStart", "guessedtype": "function"}}, "file": "ScrollView.js", "shortname": "ScrollView", "description": "ScrollView class\nProvides ability to create a scrollable container."}, "ApplicationController": {"name": "ApplicationController", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Application configuration must include\nid, title, version"}], "description": "Application controller constructor"}], "namespace": "", "module": "framework", "methods": {"restore": {"return": {"type": "mui.ApplicationController", "description": "The AppController instance"}, "params": [{"type": "String", "name": "fallbackUrl", "description": "  URL to be opened if there is nothing to restore"}], "description": "Restore the state of the application. If no state is available,\nthe fallback URL will be opened", "guessedname": "restore", "guessedtype": "function"}, "_transitionEnd": {"guessedname": "_transitionEnd", "params": [{"type": "mui.ViewController", "name": "newVc", "description": "  The new visible view controller"}, {"type": "mui.ViewController", "name": "oldVc", "description": "  The old visible view controller"}], "description": "Callback invoked after a view controller transition", "private": "", "guessedtype": "function"}, "openUrl": {"return": {"type": "Boolean", "description": "Returns false if url is not mapped to any \ncontroller"}, "params": [{"type": "String", "name": "url", "description": "  The URL to open"}, {"type": "Boolean", "name": "quiet", "description": "  (Optional) Prevent the viewController load sequence. Pass\ntrue if you just want to set the window hash, and not trigger the load\/appear sequence"}], "description": "Open a URL - retrieve the navigationController to which\nthe URL belongs to and trigger it's load\/appear sequence. \nThis method will also perform the view transition, if defined.\nURL's are defined as the navigationController's name, followed by\na slash, followed by the viewController's name, with any URL parameters\nfollowing that. Leading slashes are ignored.\nExample: '\/stories\/list' is equivalent to 'stories\/list'", "guessedname": "openUrl", "guessedtype": "function"}, "getInstance": {"static": "", "return": {"type": "", "description": "the mui.ApplicationController instance"}, "description": "Return the instance of mui.ApplicationController", "guessedname": "getInstance", "guessedtype": "function"}, "_tabRefreshed": {"guessedname": "_tabRefreshed", "params": [{"type": "Number", "name": "index", "description": "  The index of the tab which the user selected"}], "description": "TabRefresh event handler for the mui.TabView activates the navigation controller's root view controller\ncorresponding to the tab", "private": "", "guessedtype": "function"}, "_toggleEvents": {"guessedname": "_toggleEvents", "params": [{"type": "mui.ViewController", "name": "oldVc", "description": "  The disappearing view controller"}, {"type": "mui.ViewController", "name": "newVc", "description": "  The appearing view controller"}], "description": "Remove any stale event listeners from the disappearing view controller, and attach event\nlisteners to the appearing view controller", "private": "", "guessedtype": "function"}, "_tabChanged": {"guessedname": "_tabChanged", "params": [{"type": "Number", "name": "index", "description": "  The index of the tab which the user selected"}], "description": "TabChange event handler for the mui.TabView activates the navigation controller\ncorresponding to the tab", "private": "", "guessedtype": "function"}, "handleEvent": {"description": "Event dispatcher", "param": "e {Event} The event", "params": [{"type": "Event", "name": "e", "description": "  The DOM event"}], "private": "", "guessedname": "handleEvent", "guessedtype": "function"}, "showViewController": {"param": "viewController {mui.ViewController} The ViewController to show.", "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to show."}, {"type": "Boolean", "name": "reloading", "description": "  Whether or not the view is reloading, used to maintain scroll offset"}], "description": "Show a viewController on-screen, making it the visibleViewController", "guessedname": "showViewController", "guessedtype": "function"}, "registerController": {"params": [{"type": "mui.NavigationController", "name": "controller", "description": "  The controller to register"}], "description": "Register a controller with the application. If tabEl is passed in, the\nnavigationController will be mapped to that tab.", "guessedname": "registerController", "guessedtype": "function"}, "objectsEqual": {"return": {"type": "Boolean", "description": "True if objects are equal, or false otherwise"}, "description": "Convenience utility for detecting object equality", "static": "", "guessedname": "objectsEqual", "guessedtype": "function", "params": [{"type": "Object", "name": "o1", "description": "  The first object"}, {"type": "Object", "name": "o2", "description": "  The second object"}]}, "positionViewController": {"return": {"type": "mui.ApplicationController", "description": "The AppController instance"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The view controller"}], "description": "Position the viewcontroller in the viewport, taking up as much vertical space as available", "guessedname": "positionViewController", "guessedtype": "function"}, "initialize": {"description": "Initialization method", "guessedname": "initialize", "guessedtype": "function"}, "getController": {"return": {"type": "", "description": "The controller, or null, if not found"}, "params": [{"type": "String", "name": "name", "description": "  The name of the controller"}], "description": "Get a navigation controller by name", "guessedname": "getController", "guessedtype": "function"}, "setTabsElement": {"params": [{"type": "String|HTMLElement", "name": "el", "description": "  Selector or HTMLElement for the tabs container"}], "description": "Set the element for the application. Use this method in conjuction with\nregisterController to map a navigationController to a particular tab", "guessedname": "setTabsElement", "guessedtype": "function"}, "openViewController": {"params": [{"type": "mui.ViewController", "name": "viewController", "description": "  the ViewController"}, {"type": "Object", "name": "params", "description": "  Any request params"}], "description": "This is a convenience method for showing a viewController without constructing a URL.\nThe URL is built based on the viewController's name + the params that are passed in.", "guessedname": "openViewController", "guessedtype": "function"}, "_urlChanged": {"guessedname": "_urlChanged", "params": [{"type": "String", "name": "url", "description": "  The current URL"}, {"type": "Object", "name": "params", "description": "  Any request parameters"}, {"type": "mui.NavigationController", "name": "navController", "description": "  The navigation controller to appear"}, {"type": "String", "name": "viewControllerName", "description": "  The NAME of the view controller to appear"}], "description": "Callback triggered whenever the URL is changed", "private": "", "guessedtype": "function"}}, "file": "ApplicationController.js", "shortname": "ApplicationController", "properties": {"viewportInfo": {"type": "Object", "description": "Information about the viewport, such as whether or not full-screen\nis activated", "guessedname": "viewportInfo", "guessedtype": "property"}, "_instance": {"description": "Cache instance variable", "guessedname": "_instance", "guessedtype": "property"}, "window": {"description": "Normalize window object", "guessedname": "window", "guessedtype": "property"}, "_controllers": {"guessedname": "_controllers", "type": "Array", "description": "Array of registered controllers", "private": "", "guessedtype": "property"}, "_tabView": {"guessedname": "_tabView", "type": "mui.TabView", "description": "Reference to the mui.TabView object, if tabs are used", "private": "", "guessedtype": "property"}, "visibleViewController": {"type": "mui.ViewController", "description": "Reference to the currently visible view controller", "guessedname": "visibileViewController", "guessedtype": "property"}, "popping": {"type": "Boolean", "description": "State variable used to determine if view is being popped", "guessedname": "popping", "guessedtype": "property"}}, "description": "Application controller constructor"}, "Storage": {"name": "Storage", "namespace": "", "module": "storage", "methods": {"transaction": {"param": "transCb {Function} The transaction callback", "params": [{"type": "Function", "name": "transCb", "description": "  The transaction callback"}, {"type": "Function", "name": "errorCb", "description": "  The error callback"}, {"type": "Function", "name": "successCb", "description": "  The success callback"}], "description": "Execute a database transaction. The first argument is the transaction\ncallback which will execute SQL statements against the database. The\nsecond argument is the error callback, and the third argument is the\nsuccess callback.", "guessedname": "transaction", "guessedtype": "function"}, "open": {"return": {"type": "mui.Storage", "description": "The storage object"}, "description": "Open a database", "param": "id {String} The id of the database to open", "static": "", "guessedname": "open", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": "  The id of the database to open"}, {"type": "String", "name": "version", "description": "  The version of the database to open"}, {"type": "String", "name": "title", "description": "  The title of the database to open"}]}}, "static": "", "file": "Storage.js", "shortname": "Storage", "description": "The Storage class provides a facility for storing data. A full HTMl5 or\nGears database will be created using the open method. This class implements\nthe HTML5 Storage interface, in addition to exposing the database functionality\nthrough executeSql"}, "ResultSetRowList": {"name": "ResultSetRowList", "constructors": [{"params": [{"type": "*", "name": "rs", "description": "  The Gears ResultSet from a call to database.execute"}], "description": "The ResultSetRowList class is a wrapper for Gears which emulates\nthe HTML5 SQLResultSetRowList class."}], "namespace": "", "module": "storage", "guessedname": "ResultSetRowList", "methods": {"item": {"return": {"type": "Object", "description": "The result item at the index"}, "params": [{"type": "Number", "name": "index", "description": "  The index"}], "description": "Retrieve the result item at a given index", "guessedname": "item", "guessedtype": "function"}}, "file": "Storage.js", "guessedtype": "function", "shortname": "ResultSetRowList", "properties": {"length": {"type": "Number", "description": "The length of the current result set of items", "guessedname": "length", "guessedtype": "property"}, "_items": {"guessedname": "_items", "type": "Array", "description": "Private property to store array of items in the result set list", "private": "", "guessedtype": "property"}}, "description": "The ResultSetRowList class is a wrapper for Gears which emulates\nthe HTML5 SQLResultSetRowList class."}, "NavigationBar": {"name": "NavigationBar", "constructors": [{"params": [{"type": "mui.NavigationController", "name": "navigationController", "description": "  (Optional) A \nnavgation controller to attach to"}], "description": "NavigationBar class\nThis class provides a navigation-bar component for a \nNavigationController. \nThe NavigationBar class has built-in components for title,\nback button, right bar button item, and a search box. It is \nalso possible to add custom controls to the navigation bar"}], "namespace": "", "module": "navigator", "methods": {"setItems": {"params": [{"type": "Object", "name": "items", "description": "  The navigation items"}, {"type": "Boolean", "name": "animated", "description": "  To enable animation (default is false)"}, {"type": "Boolean", "name": "reverse", "description": "  To animate in reverse (popping)"}], "description": "Set the navigation items for the navigation bar, with an \noption to animate the items into place", "guessedname": "setItems", "guessedtype": "function"}, "show": {"description": "Show the navigationBar element", "guessedname": "show", "guessedtype": "function"}, "setTitle": {"params": [{"type": "String|HTMLElement|*", "name": "title", "description": "  A DOM node to use as the content of the item, or\na string to use as title text, or an allowed control, such as mui.SearchBox"}], "description": "Set the contents of the title element", "guessedname": "setTitle", "guessedtype": "function"}, "handleEvent": {"private": "", "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "setBack": {"params": [{"type": "Function|String", "name": "action", "description": "  Either a function to be executed on click, or a URL"}, {"type": "String|Boolean", "name": "back", "description": "  The back string, or true to present arrow icon"}], "description": "Set the contents of the back element. Accepts either\na string or a truthy value as argument. If string, the word \nis displayed in the back button. If true, the arrow icon is \npresented instead", "guessedname": "setBack", "guessedtype": "function"}, "setLeftBarItem": {"params": [{"type": "HTMLElement", "name": "leftBarItem", "description": "  A DOM node to use as the content of the item"}], "description": "Set the contents of the leftBarItem element", "guessedname": "setLeftBarItem", "guessedtype": "function"}, "setRightBarItem": {"params": [{"type": "HTMLElement", "name": "rightBarItem", "description": "  A DOM node to use as the content of the item"}], "description": "Set the contents of the rightBarItem element", "guessedname": "setRightBarItem", "guessedtype": "function"}, "initialize": {"description": "NavigationBar initialization creates the elements\nand inserts itself into the <header> of the page", "guessedname": "initialize", "guessedtype": "function"}, "hide": {"description": "Hide the navigationBar element", "guessedname": "hide", "guessedtype": "function"}, "setItemsWithAnimation": {"params": [{"type": "Object", "name": "items", "description": "  The new navigation items"}, {"type": "Boolean", "name": "reverse", "description": "  If animation should be in reverse"}], "description": "Set the navigation items in the bar with an animation. Contents of the\ntitle section are pushed out, while the back, leftBarItems and rightBarItems \nare faded in\/out", "guessedname": "setItemsWithAnimation", "guessedtype": "function"}}, "file": "NavigationBar.js", "shortname": "NavigationBar", "properties": {"items": {"type": "Object", "description": "Currently visible navigation items", "guessedname": "items", "guessedtype": "property"}, "itemsContainer": {"type": "HTMLElement", "description": "HTMLElement container for items", "guessedname": "itemsContainer", "guessedtype": "property"}, "element": {"type": "HTMLElement", "description": "NavigationBar HTMLElement container", "guessedname": "element", "guessedtype": "property"}}, "description": "NavigationBar class\nThis class provides a navigation-bar component for a \nNavigationController. \nThe NavigationBar class has built-in components for title,\nback button, right bar button item, and a search box. It is \nalso possible to add custom controls to the navigation bar"}, "Geo": {"name": "Geo", "namespace": "", "module": "geo", "methods": {"isCapable": {"return": {"type": "Boolean", "description": "Whether or not the device supports location data"}, "description": "Check to see if the device supports location, either via \nHTML5 Location API or Gears.", "guessedname": "isCapable", "guessedtype": "function"}, "getLocation": {"params": [{"type": "Function", "name": "handler", "description": "  A function which will be called upon\na success or failed location lookup. The function will receive\nan array of lat\/lon coordinates such as [12.3, 45.6], or false\nif there was an error."}], "description": "Get the user's current location", "guessedname": "getLocation", "guessedtype": "function"}}, "static": "", "file": "Geo.js", "shortname": "Geo", "description": "The Geo Utility allows access to location data for devices which \nhave an on-board GPS. Currently supported methods of extracting \ngeolocation information is via HTML5 Location API or Gears."}, "Loader": {"guessedname": "_scripts", "name": "Loader", "namespace": "", "module": "loader", "methods": {"load": {"params": [{"type": "Array", "name": "modules", "description": "  List of mui modules to load"}, {"type": "Object} Additional loading options, including extras and callback. See example.\nExample:\nmui.load(['transition', 'web-app'], {\nbase: '..\/..\/..\/build',\nextras: {\njs: [\n{ name: 'Base', path: 'Base.js' },\n{ name: 'MainModule', path: 'main-module.js', requires: [ 'Base' ] },\n{ name: 'SubModule', path: 'submodule.js', requires: [ 'MainModule' ] }\n],\ncss: [\n'myCss.css'\n]\n},\ncallback: {\ncomplete: myApp.success,\nscope: myApp\n}\n", "name": "options", "description": " );"}], "description": "Load a module or set of modules from mui. Additionally,\nuser-created modules can also be required by proving a path\nto the script.", "param": "modules {Array} Array of module names"}, "isRequired": {"params": [{"type": "Object", "name": "module", "description": "  The module to check"}, {"type": "Array", "name": "extras", "description": "  Array of extra modules"}], "description": "Check if a user-defined module is required by another module", "private": ""}, "insertScript": {"params": [{"type": "String", "name": "src", "description": "  The script src"}, {"type": "Function", "name": "cb", "description": "  (Optional) Callback invoked on script load"}], "description": "Insert a <script> into the document", "private": ""}, "requireModule": {"params": [{"type": "String", "name": "module", "description": "  The name of the module"}], "description": "Require a module"}, "require": {"description": "Require a module", "private": ""}}, "file": "Loader.old.js", "guessedtype": "property", "shortname": "Loader", "description": "The Loader utility allows for on-demand loading of library components"}, "DataSource": {"name": "DataSource", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  DataSource configuration"}], "description": "(Taken from: http:\/\/developer.yahoo.com\/yui\/3\/datasource\/)\nThe DataSource Utility provides a consistent API for the retrieval of\ndata from arbitrary sources over a variety of supported protocols. The\nonly supported protocol at this time is a remote source over XHR. Thus, \nthe same-domain policy applies."}], "namespace": "", "module": "datasource", "methods": {"onSendFailure": {"params": [{"type": "o", "name": "response", "description": "  The response object"}], "description": "Callback method invoked upon a failed sendRequest", "guessedname": "onSendFailure", "guessedtype": "function"}, "flushCache": {"description": "Flush the contents of the cache", "guessedname": "flushCache", "guessedtype": "function"}, "restoreCache": {"description": "Restore the cache from the database", "guessedname": "restoreCache", "guessedtype": "function"}, "getCachedEntry": {"return": {"type": "*", "description": "The cached entry, if found"}, "params": [{"type": "String", "name": "request", "description": "  The request string"}], "description": "Retrieve a record stored in the cache", "guessedname": "getCachedEntry", "guessedtype": "function"}, "_getRequestUrl": {"return": {"type": "String", "description": "The request URL"}, "params": [{"type": "String", "name": "base", "description": "  The base URL"}, {"type": "String", "name": "params", "description": "  The request string"}], "description": "Resolve a request URL by identifying and appending URL parameters\nto a base URL", "private": ""}, "onRestore": {"description": "Placeholder method. Implement this method if you want to capture the \nevent when the database has been restored", "guessedname": "onRestore", "guessedtype": "function"}, "sendRequest": {"params": [{"type": "String", "name": "request", "description": "  Request parameter string"}], "description": "Make a request to the dataSource. If caching is enabled, the \nresult of the request will be cached according to the keepalive\nand max entries set for the cache", "guessedname": "sendRequest", "guessedtype": "function"}, "_hasExpired": {"params": [{"type": "Number", "name": "ts", "description": "  The timestamp of the cached entry"}, {"type": "Object} Object literal defining the keepalive time such as\n{ hours: 1, minutes: 30 ", "name": "keepalive", "description": ""}], "description": "Check to see if a cached record has expired, according to the keepalive\nproperty", "private": ""}, "getCache": {"return": {"type": "Array", "description": "Array of cached items"}, "description": "Get all contents which have been locally cached", "guessedname": "getCache", "guessedtype": "function"}, "addToCache": {"params": [{"type": "String", "name": "request", "description": "  The request string"}, {"type": "String", "name": "response", "description": "  The response text"}], "description": "Add an item to the cache", "guessedname": "addToCache", "guessedtype": "function"}, "onSendSuccess": {"params": [{"type": "String", "name": "request", "description": "  The request string"}, {"type": "String", "name": "response", "description": "  The response text"}], "description": "Callback method invoked upon a successful sendRequest", "guessedname": "onSendSuccess", "guessedtype": "function"}}, "file": "DataSource.js", "shortname": "DataSource", "description": "(Taken from: http:\/\/developer.yahoo.com\/yui\/3\/datasource\/)\nThe DataSource Utility provides a consistent API for the retrieval of\ndata from arbitrary sources over a variety of supported protocols. The\nonly supported protocol at this time is a remote source over XHR. Thus, \nthe same-domain policy applies."}, "Navigator": {"name": "Navigator", "constructors": [{"description": "The Navigator class provides the ability to map the hash part of the URL\nto a particular view. The view must be a DOM element. If the DOM element \nhas a x-mui-href attribute, that content will be loaded over XHR."}], "namespace": "", "module": "navigator", "methods": {"_checkWindow": {"private": "", "description": "Check the window location against the current location", "guessedname": "_checkWindow", "guessedtype": "function"}, "mapUrl": {"return": {"type": "Navigator", "description": "The Navigator instance"}, "params": [{"type": "String", "name": "url", "description": "  The url to map from"}, {"type": "Function", "name": "callback", "description": "  The function to map the URL to"}], "description": "Map a URL path to a callback function", "guessedname": "mapUrl", "guessedtype": "function"}, "openUrl": {"return": {"type": "Navigator", "description": "The navigator instance"}, "params": [{"type": "String", "name": "url", "description": "  The url to open"}, {"type": "Boolean", "name": "quiet", "description": "  (Optional) If true, then this method only changes the URL hash and does nothing else."}], "description": "Open a URL", "guessedname": "openUrl", "guessedtype": "function"}, "_ioFailure": {"params": [{"type": "XMLHttpRequest", "name": "o", "description": "  The XHR object"}, {"type": "HTMLElement", "name": "newPage", "description": "  The DOM element for the showing view"}], "description": "XHR Transaction failure handler.", "guessedname": "_ioFailure", "guessedtype": "function"}, "_ioSuccess": {"params": [{"type": "XMLHttpRequest", "name": "o", "description": "  The XHR object"}, {"type": "HTMLElement", "name": "newPage", "description": "  The DOM element for the showing view"}], "description": "XHR Transaction success handler.", "guessedname": "_ioSuccess", "guessedtype": "function"}}, "file": "Navigator.js", "shortname": "Navigator", "properties": {"_hash": {"description": "Store the current location (hash)", "param": "_hash", "private": "", "guessedname": "_hash", "guessedtype": "property", "type": "String"}}, "description": "The Navigator class provides the ability to map the hash part of the URL\nto a particular view. The view must be a DOM element. If the DOM element \nhas a x-mui-href attribute, that content will be loaded over XHR."}, "Event": {"name": "Event", "namespace": "", "module": "event", "methods": {"on": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "type", "description": "  The event type (click, touchstart, etc)"}, {"type": "Function", "name": "fn", "description": "  The callback function fired on the event"}, {"type": "Object", "name": "ctx", "description": "  The scope to be applied to the callback"}, {"type": "Boolean", "name": "useCapture", "description": "  Whether or not to initiate capture"}], "description": "Attach an event to a given element"}, "removeEventListener": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "type", "description": "  The event type (click, touchstart, etc)"}, {"type": "Function", "name": "fn", "description": "  The callback function fired on the event"}, {"type": "Object", "name": "ctx", "description": "  The scope to be applied to the callback"}, {"type": "Boolean", "name": "useCapture", "description": "  Whether or not to initiate capture"}], "description": "Remove an event handler from a given element"}, "fireEvent": {"param": "type {String} The event type (click, touchstart, etc)", "params": [{"type": "Event", "name": "e", "description": "  The generated event"}], "description": "Event handler - used to allow for speedy clicks on iPhone", "private": ""}, "one": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "type", "description": "  The event type (click, touchstart, etc)"}, {"type": "Function", "name": "fn", "description": "  The callback function fired on the event"}, {"type": "Object", "name": "ctx", "description": "  The scope to be applied to the callback"}, {"type": "Boolean", "name": "useCapture", "description": "  Whether or not to initiate capture"}], "description": "Attach an event to a given element one time"}}, "static": "", "file": "mui.js", "shortname": "Event", "description": "Event class"}, "SearchBox": {"name": "SearchBox", "constructors": [{"params": [{"type": "Object} SearchBox configuration options\nExample:\nnew mui.SearchBox({\nplaceholder: 'Search',\nautocorrect: 'off',\nautocapitalize: 'off',\ncallback: {\nsubmit: mySubmitHandler,\nkeyup: myKeyupHandler,\n}\n", "name": "config", "description": " );"}], "description": "The SearchBox class provides a standard search box container\nwith the ability to trigger callbacks during interesting moments,\nsuch as onSubmit, onKeypress, etc"}], "namespace": "", "module": "search-box", "methods": {"clear": {"return": {"type": "SearchBox", "description": "The searchBox instance"}, "description": "Clear the value of the search field, and hide the close button", "guessedname": "clear", "guessedtype": "function"}, "setValue": {"return": {"type": "mui.SearchBox", "description": "The searchBox instance"}, "params": [{"type": "String", "name": "v", "description": "  The value"}], "description": "Set the value of the input field", "guessedname": "setValue", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "render": {"return": {"type": "SearchBox", "description": "The searchBox instance"}, "params": [{"type": "String|HTMLElement", "name": "container", "description": "  Selector or HTMLElement for the container"}], "description": "Render the SearchBox into a container", "guessedname": "render", "guessedtype": "function"}}, "file": "SearchBox.js", "shortname": "SearchBox", "properties": {"input": {"type": "HTMLElement", "description": "SearchBox input element", "guessedname": "input", "guessedtype": "property"}, "closeButton": {"type": "HTMLElement", "description": "Close Button container used to clear search field when pressed", "guessedname": "closeButton", "guessedtype": "property"}, "placeholder": {"type": "String", "description": "Default value for input field", "guessedname": "placeholder", "guessedtype": "property"}, "callback": {"type": "Object", "description": "Associate listing of callback handlers regsitered\nin the constructor", "guessedname": "callback", "guessedtype": "property"}, "element": {"type": "HTMLElement", "description": "SearchBox container element", "guessedname": "element", "guessedtype": "property"}}, "description": "The SearchBox class provides a standard search box container\nwith the ability to trigger callbacks during interesting moments,\nsuch as onSubmit, onKeypress, etc"}, "Utility": {"name": "Utility", "namespace": "", "module": "util", "methods": {"log": {"params": [{"type": "String|Object", "name": "o", "description": "  The string or object to log to the debug console."}], "description": "Log a message or object to the console.", "guessedname": "log", "guessedtype": "function"}, "trace": {"params": [{"type": "String|Object", "name": "o", "description": "  The string or object to log to the debug console."}], "description": "Log a trace message or object to the console.", "guessedname": "trace", "guessedtype": "function"}, "setLogLevel": {"params": [{"type": "String", "name": "level", "description": "  The desired log level"}], "description": "The log level allows you to set the appropriate logging level\nfor your application", "guessedname": "setLogLevel", "guessedtype": "function"}, "warn": {"params": [{"type": "String|Object", "name": "o", "description": "  The string or object to log to the debug console."}], "description": "Log a warning message or object to the console.", "guessedname": "warn", "guessedtype": "function"}, "error": {"params": [{"type": "String", "name": "o", "description": "  The error string"}, {"type": "Boolean", "name": "throwError", "description": "  If true, throw an exception."}], "description": "Log an error.  If second argument passed is true,\nthis throws an exception.", "guessedname": "error", "guessedtype": "function"}, "debug": {"params": [{"type": "String|Object", "name": "o", "description": "  The string or object to log to the debug console."}], "description": "Log a debug message or object to the console.", "guessedname": "debug", "guessedtype": "function"}, "iterate": {"params": [{"type": "Object", "name": "obj", "description": "  The object to iterate over"}, {"type": "Function", "name": "cb", "description": "  The callback function applied to each member of the object"}, {"type": "Object", "name": "ctx", "description": "  The scope applied to the callback function."}], "description": "Iterate over an object", "guessedname": "iterate", "guessedtype": "function"}, "each": {"params": [{"type": "Array", "name": "collection", "description": "  The array to iterate over"}, {"type": "Function", "name": "cb", "description": "  The callback function applied to each member of the array"}, {"type": "Object", "name": "ctx", "description": "  The scope applied to the callback function."}], "description": "Iterate over an array", "guessedname": "each", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Utility", "description": "Utility class"}}, "version": "1.0.0", "modules": {"tab-view": {"description": "TabView module", "submodules": [], "classlist": ["TabView"], "filelist": ["TabView.js"], "subdata": {}, "name": "tab-view"}, "anim": {"description": "Animation methods", "submodules": [], "classlist": ["Animation"], "filelist": [], "subdata": {}, "guessedname": "anim", "guessedtype": "property", "name": "anim"}, "scroll-view": {"description": "ScrollView module", "submodules": [], "classlist": ["ScrollView"], "filelist": ["ScrollView.js"], "subdata": {}, "name": "scroll-view"}, "search-box": {"description": "SearchBox module", "submodules": [], "classlist": ["SearchBox"], "filelist": ["SearchBox.js"], "subdata": {}, "name": "search-box"}, "dom": {"description": "DOM methods", "submodules": [], "classlist": ["Dom"], "filelist": [], "subdata": {}, "guessedname": "dom", "guessedtype": "property", "name": "dom"}, "fx": {"description": "Effects methods", "submodules": [], "classlist": ["FX"], "filelist": [], "subdata": {}, "guessedname": "fx", "guessedtype": "property", "name": "fx"}, "pager": {"description": "Pager module", "submodules": [], "classlist": ["Pager"], "filelist": ["Pager.js"], "subdata": {}, "name": "pager"}, "storage": {"description": "Storage module", "submodules": [], "classlist": ["ResultSet", "ResultSetRowList", "Transaction", "Storage"], "filelist": ["Storage.js"], "subdata": {}, "name": "storage"}, "actionsheet": {"description": "actionsheet module", "submodules": [], "classlist": ["ActionSheet"], "filelist": ["ActionSheet.js"], "subdata": {}, "name": "actionsheet"}, "swipe-view": {"description": "SwipeView module", "submodules": [], "classlist": ["SwipeView"], "filelist": ["SwipeView.js"], "subdata": {}, "name": "swipe-view"}, "transition": {"description": "Transition module", "submodules": [], "classlist": ["Transition"], "filelist": ["Transition.js"], "subdata": {}, "name": "transition"}, "loader": {"description": "Loader module", "submodules": [], "classlist": ["Loader", "Loader"], "filelist": ["Loader.js", "Loader.old.js", "base.js", "main-module.js", "submodule.js"], "subdata": {}, "name": "loader"}, "util": {"description": "Utility methods", "submodules": [], "classlist": ["Utility"], "filelist": ["mui.js"], "subdata": {}, "guessedname": "util", "guessedtype": "property", "name": "util"}, "framework": {"description": "Application Framework module", "submodules": [], "classlist": ["ApplicationController", "NavigationController", "ViewController"], "filelist": ["ApplicationController.js", "NavigationController.js", "ViewController.js"], "subdata": {}, "name": "framework"}, "ajax": {"description": "AJAX methods", "submodules": [], "classlist": ["Ajax"], "filelist": [], "subdata": {}, "guessedname": "ajax", "guessedtype": "property", "name": "ajax"}, "datasource": {"description": "The datasource module", "submodules": [], "classlist": ["DataSource"], "filelist": ["DataSource.js"], "subdata": {}, "name": "datasource"}, "env": {"description": "Client environment methods", "submodules": [], "classlist": ["Env"], "filelist": [], "subdata": {}, "guessedname": "env", "guessedtype": "property", "name": "env"}, "navigator": {"description": "Navigator module", "submodules": [], "classlist": ["NavigationBar", "Navigator"], "filelist": ["NavigationBar.js", "Navigator.js"], "subdata": {}, "name": "navigator"}, "geo": {"description": "GeoLocation module", "submodules": [], "classlist": ["Geo"], "filelist": ["Geo.js"], "subdata": {}, "name": "geo"}, "event": {"description": "Event methods", "submodules": [], "classlist": ["Event"], "filelist": [], "subdata": {}, "guessedname": "event", "guessedtype": "function", "name": "event"}, "oop": {"description": "Object-Oriented programming helpers", "submodules": [], "classlist": ["Oop"], "filelist": [], "subdata": {}, "guessedname": "oop", "guessedtype": "property", "name": "oop"}}, "filemap": {"ApplicationController.js": {"classlist": ["ApplicationController"], "name": "ApplicationController.js", "module": "framework"}, "Storage.js": {"classlist": ["ResultSet", "ResultSetRowList", "Transaction", "Storage"], "name": "Storage.js", "module": "storage"}, "Loader.js": {"classlist": ["Loader"], "name": "Loader.js", "module": "loader"}, "NavigationController.js": {"classlist": ["NavigationController"], "name": "NavigationController.js", "module": "framework"}, "DataSource.js": {"classlist": ["DataSource"], "name": "DataSource.js", "module": "datasource"}, "ActionSheet.js": {"classlist": ["ActionSheet"], "name": "ActionSheet.js", "module": "actionsheet"}, "TabView.js": {"classlist": ["TabView"], "name": "TabView.js", "module": "tab-view"}, "Geo.js": {"classlist": ["Geo"], "name": "Geo.js", "module": "geo"}, "Loader.old.js": {"classlist": ["Loader"], "name": "Loader.old.js", "module": "loader"}, "submodule.js": {"name": "submodule.js", "classlist": [], "module": "loader", "guessedname": "SubModule", "guessedtype": "property", "property": "SubModule"}, "Navigator.js": {"classlist": ["Navigator"], "name": "Navigator.js", "module": "navigator"}, "ViewController.js": {"classlist": ["ViewController"], "name": "ViewController.js", "module": "framework"}, "NavigationBar.js": {"classlist": ["NavigationBar"], "name": "NavigationBar.js", "module": "navigator"}, "base.js": {"name": "base.js", "classlist": [], "module": "loader", "guessedname": "Base", "guessedtype": "property", "property": "Base"}, "Transition.js": {"classlist": ["Transition"], "name": "Transition.js", "module": "transition"}, "SwipeView.js": {"classlist": ["SwipeView"], "name": "SwipeView.js", "module": "swipe-view"}, "Pager.js": {"classlist": ["Pager"], "name": "Pager.js", "module": "pager"}, "ScrollView.js": {"classlist": ["ScrollView"], "name": "ScrollView.js", "module": "scroll-view"}, "mui.js": {"classlist": ["Utility", "Dom", "Event", "Animation", "FX", "Ajax", "Oop", "Env"], "name": "mui.js", "module": "util"}, "SearchBox.js": {"classlist": ["SearchBox"], "name": "SearchBox.js", "module": "search-box"}, "main-module.js": {"name": "main-module.js", "classlist": [], "module": "loader", "guessedname": "MainModule", "guessedtype": "property", "property": "MainModule"}}}