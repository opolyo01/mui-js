<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html xmlns:yui="http://yuilibrary.com/rdf/1.0/yui.rdf#">
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
	<title>API: env   mui.js  (mui Library)</title>

	<link rel="stylesheet" type="text/css" href="assets/reset-fonts-grids-min.css?stamp=1275584796.14" />
	<link rel="stylesheet" type="text/css" href="assets/api.css?stamp=1275584796.14" />

    <script type="text/javascript" src="assets/api-js?stamp=1275584796.14"></script>
    <script type="text/javascript" src="assets/ac-js?stamp=1275584796.14"></script>
	<script type="text/javascript" charset="utf-8">
		window.addEventListener('load', function() {
			document.getElementById('doc3').style.minHeight = window.innerHeight+'px'
		}, false);
	</script>
</head>

<body id="yahoo-com">

<div id="doc3" class="yui-t2">
	
	<div id="hd">
		<div class="primary">
			<h1><a href="" title="mui">mui</a></h1>

			<span class="description">Mobile User Interface <strong>v1.0.0</strong></span>
	
	       		<form onsubmit="return false">
	       			<div id="propertysearch">
					<span class="focus"></span>
					<input autocomplete="off" id="searchinput" placeholder="Search" />
	                		<div id="searchresults">
	                    			&nbsp;
	                		</div>
	            		</div>
	        	</form>
		</div>
		<div class="secondary">
			
			<div class="nav">
				<a href="./index.html" title="mui">mui</a>
	            		<span class="gt"></span> <a href="./module_env.html" title="env">env</a>
	               		
	               		 <span class="gt"></span> mui.js (source view) 
			</div>

			<div class="meta">
		            	<form action="#" name="yui-classopts-form" method="get" id="yui-classopts-form">
		                	<fieldset>
		                    	<legend>Filters</legend>
		                	<span class="classopts"><input type="checkbox" name="show_private" id="show_private" /> <label for="show_private">Show Private</label></span>
		                	<span class="classopts"><input type="checkbox" name="show_protected" id="show_protected" /> <label for="show_protected">Show Protected</label></span>
		                	<span class="classopts"><input type="checkbox" name="show_deprecated" id="show_deprecated" /> <label for="show_deprecated">Show Deprecated</label></span>
		                	</fieldset>
		            	</form>
				<span class="subtitle">1.0.0</span>			
			</div>
	
			<div class="navdec"><b></b><b></b></div>
		</div>
	</div>

	<div id="bd">
		<div id="yui-main">
			<div id="doc-content" class="yui-b">

                    <div id="srcout">
                        <style>
                            #doc3 .classopts { display:none; }
                        </style>
<div class="highlight"><pre><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

<span class="cm">/*</span>
<span class="cm"> * mui Library</span>
<span class="cm"> * A miniature javascript suitable for use on mobile devices.</span>
<span class="cm"> */</span>
<span class="nx">mui</span> <span class="o">=</span> <span class="p">{};</span>

<span class="cm">/**</span>
<span class="cm"> * Utility methods</span>
<span class="cm"> * @module util</span>
<span class="cm"> **/</span>
<span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="p">{</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Utility class</span>
<span class="cm">	 * @class Utility</span>
<span class="cm">	 * @static</span>
<span class="cm">	 */</span>

	<span class="cm">/*</span>
<span class="cm">	 * Private attribute to store the current log level</span>
<span class="cm">	 * @final _logLevel</span>
<span class="cm">	 * @type Number</span>
<span class="cm">	 * @private</span>
<span class="cm">	 */</span>
	<span class="nx">_logLevel</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>

	<span class="cm">/**</span>
<span class="cm">	 * Log a message or object to the console.</span>
<span class="cm">	 * @method log</span>
<span class="cm">	 * @param o {String|Object} The string or object to log to the debug console.</span>
<span class="cm">	 **/</span>		
	<span class="nx">log</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nb">document</span><span class="p">.</span><span class="nx">defaultView</span><span class="p">.</span><span class="nx">console</span> <span class="o">?</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
	<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Log a trace message or object to the console.</span>
<span class="cm">	 * @method trace	</span>
<span class="cm">	 * @param o {String|Object} The string or object to log to the debug console.</span>
<span class="cm">	 **/</span>
	<span class="nx">trace</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_logLevel</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
	<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Log a debug message or object to the console.</span>
<span class="cm">	 * @method debug	</span>
<span class="cm">	 * @param o {String|Object} The string or object to log to the debug console.</span>
<span class="cm">	 **/</span>
	<span class="nx">debug</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_logLevel</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
	<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Log a warning message or object to the console.</span>
<span class="cm">	 * @method warn	</span>
<span class="cm">	 * @param o {String|Object} The string or object to log to the debug console.</span>
<span class="cm">	 **/</span>
	<span class="nx">warn</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_logLevel</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
	<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Log an error.  If second argument passed is true,</span>
<span class="cm">	 * this throws an exception.</span>
<span class="cm">	 * @method error</span>
<span class="cm">	 * @param o {String} The error string</span>
<span class="cm">	 * @param throwError {Boolean} If true, throw an exception.</span>
<span class="cm">	 */</span>
	<span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">throwError</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_logLevel</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>		
		<span class="k">if</span><span class="p">(</span><span class="nx">throwError</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span>
	<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * The log level allows you to set the appropriate logging level</span>
<span class="cm">	 * for your application</span>
<span class="cm">	 * @method setLogLevel </span>
<span class="cm">	 * @param level {String} The desired log level</span>
<span class="cm">	 */</span>
	<span class="nx">setLogLevel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">level</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">intLevel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">switch</span><span class="p">(</span><span class="nx">level</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">case</span> <span class="s1">&#39;trace&#39;</span><span class="o">:</span>
				<span class="nx">intLevel</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="s1">&#39;debug&#39;</span><span class="o">:</span>
				<span class="nx">intLevel</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="s1">&#39;warn&#39;</span><span class="o">:</span>
				<span class="nx">intLevel</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="s1">&#39;error&#39;</span><span class="o">:</span>
				<span class="nx">intLevel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">default</span><span class="o">:</span>
				<span class="nx">intLevel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
			
		<span class="p">}</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_logLevel</span> <span class="o">=</span> <span class="nx">intLevel</span><span class="p">;</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Iterate over an array</span>
<span class="cm">	 * @method each</span>
<span class="cm">	 * @param collection {Array} The array to iterate over</span>
<span class="cm">	 * @param cb {Function} The callback function applied to each member of the array</span>
<span class="cm">	 * @param ctx {Object} The scope applied to the callback function.</span>
<span class="cm">	 **/</span>
	<span class="nx">each</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">cb</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">collection</span> <span class="o">||</span> <span class="o">!</span><span class="nx">collection</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">len</span><span class="o">=</span><span class="nx">collection</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="nx">cb</span><span class="p">.</span><span class="nx">call</span><span class="p">((</span><span class="nx">ctx</span> <span class="o">||</span> <span class="nx">collection</span><span class="p">[</span><span class="nx">i</span><span class="p">]),</span> <span class="nx">collection</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Iterate over an object</span>
<span class="cm">	 * @method iterate</span>
<span class="cm">	 * @param obj {Object} The object to iterate over</span>
<span class="cm">	 * @param cb {Function} The callback function applied to each member of the object</span>
<span class="cm">	 * @param ctx {Object} The scope applied to the callback function.</span>
<span class="cm">	 **/</span>		
	<span class="nx">iterate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">cb</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">ctx</span> <span class="o">=</span> <span class="nx">ctx</span> <span class="o">||</span> <span class="nx">obj</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">prop</span><span class="p">))</span> 
			<span class="p">{</span>
				<span class="nx">cb</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">prop</span><span class="p">],</span> <span class="nx">prop</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>			
	<span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * DOM methods</span>
<span class="cm"> * @module dom</span>
<span class="cm"> **/</span>
<span class="kd">var</span> <span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Dom class</span>
<span class="cm">	 * @class Dom</span>
<span class="cm">	 * @static</span>
<span class="cm">	 */</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Find an element by CSS query selector.  If parentNode is passed as second argument,</span>
<span class="cm">	 * the CSS selector is relative that node.</span>
<span class="cm">	 * @method get</span>
<span class="cm">	 * @param selector {String} Valid CSS query selector</span>
<span class="cm">	 * @param parentNode {HTMLElement} If present, CSS selector is relative to this DOM ndoe.</span>
<span class="cm">	 * @return {HTMLElement} The single element matching the given selector.</span>
<span class="cm">	 **/</span>	
	<span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">parentNode</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">selector</span> <span class="k">instanceof</span> <span class="nx">HTMLElement</span><span class="p">)</span> <span class="k">return</span> <span class="nx">selector</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">matches</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">parentNode</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">!</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="p">(</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="nx">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Find a collection of elements by CSS query selector.  If parentNode is passed as second argument,</span>
<span class="cm">	 * the CSS selector is relative that node.</span>
<span class="cm">	 * @method getAll</span>
<span class="cm">	 * @param selector {String} Valid CSS query selector</span>
<span class="cm">	 * @param parentNode {HTMLElement} If present, CSS selector is relative to this DOM ndoe.	</span>
<span class="cm">	 * @return {Array} An array of elements matching the given selector.</span>
<span class="cm">	 **/</span>	
	<span class="nx">getAll</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">parentNode</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">parentNode</span> <span class="o">=</span> <span class="nx">parentNode</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
		<span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">));</span>
	<span class="p">},</span>	

	<span class="cm">/**</span>
<span class="cm">	 * Create a DOM node.</span>
<span class="cm">	 * @method createElement	</span>
<span class="cm">	 * @param nodeName {String} The node name of the element to be created</span>
<span class="cm">	 * @param options {Object} Attributes to be attached to the created element.</span>
<span class="cm">	 * @return {HTMLElement} DOM node with passed in attriutes.</span>
<span class="cm">	 **/</span>	
	<span class="nx">createElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">nodeName</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">nodeName</span><span class="p">);</span>
		<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">opt</span> <span class="k">in</span> <span class="nx">options</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">opt</span><span class="p">))</span> 
			<span class="p">{</span>
				<span class="k">switch</span><span class="p">(</span><span class="nx">opt</span><span class="p">)</span> 
				<span class="p">{</span>
					<span class="k">case</span> <span class="s1">&#39;className&#39;</span><span class="o">:</span>
					<span class="k">case</span> <span class="s1">&#39;innerHTML&#39;</span><span class="o">:</span>
						<span class="nx">el</span><span class="p">[</span><span class="nx">opt</span><span class="p">]</span> <span class="o">=</span> <span class="nx">options</span><span class="p">[</span><span class="nx">opt</span><span class="p">];</span>
						<span class="k">break</span><span class="p">;</span>
					<span class="k">default</span><span class="o">:</span>
						<span class="nx">el</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">opt</span><span class="p">,</span> <span class="nx">options</span><span class="p">[</span><span class="nx">opt</span><span class="p">]);</span>
						<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">el</span><span class="p">;</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Remove a node from the DOM.</span>
<span class="cm">	 * @method removeElement	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @return {HTMLElement} The deleted node</span>
<span class="cm">	 **/</span>	
	<span class="nx">removeElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">el</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">el</span><span class="p">;</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Insert an element before another element in the DOM.</span>
<span class="cm">	 * @method insertBefore	</span>
<span class="cm">	 * @param node {Object} </span>
<span class="cm">	 * @param refNode {String|Object} The CSS selector string or DOM node to insert before</span>
<span class="cm">	 **/</span>
	<span class="nx">insertBefore</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">refNode</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">refNode</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">refNode</span><span class="p">)</span> <span class="o">:</span> <span class="nx">refNode</span><span class="p">;</span>
		<span class="nx">refNode</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">refNode</span><span class="p">);</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Insert an element after another element in the DOM.</span>
<span class="cm">	 * @method insertAfter	</span>
<span class="cm">	 * @param node {Object} </span>
<span class="cm">	 * @param refNode {String|Object} The CSS selector string or DOM node to insert after</span>
<span class="cm">	 **/</span>
	<span class="nx">insertAfter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">refNode</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">refNode</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">refNode</span><span class="p">)</span> <span class="o">:</span> <span class="nx">refNode</span><span class="p">;</span>
		<span class="nx">refNode</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">refNode</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">);</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Get the computed style for a given element.</span>
<span class="cm">	 * @method getStyle	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @param style {String} The style property.</span>
<span class="cm">	 * @return {String} Computed style for the given node and property</span>
<span class="cm">	 **/</span>
	<span class="nx">getStyle</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">style</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">el</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nx">getComputedStyle</span> <span class="o">?</span> 
			<span class="nb">document</span><span class="p">.</span><span class="nx">defaultView</span><span class="p">.</span><span class="nx">getComputedStyle</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="kc">null</span><span class="p">).</span><span class="nx">getPropertyValue</span><span class="p">(</span><span class="nx">style</span><span class="p">)</span> <span class="o">:</span>
			<span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">currentStyle</span> <span class="o">?</span> <span class="nx">el</span><span class="p">.</span><span class="nx">currentStyle</span><span class="p">[</span><span class="nx">style</span><span class="p">]</span> <span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">style</span><span class="p">]);</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Set a style for a given element.</span>
<span class="cm">	 * @method setStyle	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @param name {String} The style property name.</span>
<span class="cm">	 * @param value {String} The style property value.</span>
<span class="cm">	 **/</span>	
	<span class="nx">setStyle</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>				
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Set a collection of styles for a given element.</span>
<span class="cm">	 * @method setStyles	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @param styles {Object} Object literal containing style definitions.</span>
<span class="cm">	 **/</span>	
	<span class="nx">setStyles</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">styles</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="nx">styles</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> 
			<span class="p">{</span>
				<span class="k">this</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
			<span class="p">},</span> <span class="k">this</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Get the (x,y) coordinates for a given element.</span>
<span class="cm">	 * @method getXY	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @return {Array} Array containing the (x,y) coordinates of the element.</span>
<span class="cm">	 **/</span>	
	<span class="nx">getXY</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">pos</span> <span class="o">=</span> <span class="p">[</span><span class="nx">el</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="p">,</span> <span class="nx">el</span><span class="p">.</span><span class="nx">offsetTop</span><span class="p">];</span>
		<span class="kd">var</span> <span class="nx">parentNode</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">offsetParent</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">accountForBody</span> <span class="o">=</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="s1">&#39;position&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;absolute&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">offsetParent</span> <span class="o">==</span> <span class="nx">el</span><span class="p">.</span><span class="nx">ownerDocument</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">parentNode</span> <span class="o">!=</span> <span class="nx">el</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">while</span><span class="p">(</span><span class="nx">parentNode</span><span class="p">)</span> 
			<span class="p">{</span>
				<span class="nx">pos</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">parentNode</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="p">;</span>
				<span class="nx">pos</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">parentNode</span><span class="p">.</span><span class="nx">offsetTop</span><span class="p">;</span>
				<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">accountForBody</span> <span class="o">&amp;&amp;</span> <span class="nx">parentNode</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span> <span class="o">==</span> <span class="s1">&#39;absolute&#39;</span><span class="p">)</span> 
				<span class="p">{</span>
					<span class="nx">accountForBody</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="nx">parentNode</span> <span class="o">=</span> <span class="nx">parentNode</span><span class="p">.</span><span class="nx">offsetParent</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">accountForBody</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="nx">pos</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">ownerDocument</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="p">;</span>
			<span class="nx">pos</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">ownerDocument</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">offsetTop</span><span class="p">;</span>			
		<span class="p">}</span>

		<span class="k">return</span> <span class="nx">pos</span><span class="p">;</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Set the (x,y) coordinates of a given element</span>
<span class="cm">	 * @method setXY	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @param xy {Array} Array containing the (x,y) coordinates to be set.</span>
<span class="cm">	 **/</span>
	<span class="nx">setXY</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">xy</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="c1">// @TODO: account for position: relative vs. position: absolute vs position: null</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="nx">xy</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;px&#39;</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="nx">xy</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;px&#39;</span><span class="p">);</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Add a class name to a DOM node</span>
<span class="cm">	 * @method addClass	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @param className {String} The class name.</span>
<span class="cm">	 **/</span>	
	<span class="nx">addClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">el</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">className</span><span class="p">))</span> 
			<span class="p">{</span>
				<span class="nx">el</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">className</span><span class="p">;</span>
			<span class="p">}</span>				
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Remove a class name from a DOM node</span>
<span class="cm">	 * @method removeClass	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @param className {String} The class name.</span>
<span class="cm">	 **/</span>	
	<span class="nx">removeClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="nx">el</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">className</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s+|\s+$/g</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>	
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Check if a DOM node has a given class name.</span>
<span class="cm">	 * @method hasClass	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @param className {String} The class name.</span>
<span class="cm">	 * @return True if the node has the class name applied to it, false otherwise.</span>
<span class="cm">	 **/</span>	
	<span class="nx">hasClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">hasClass</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">className</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="nx">hasClass</span> <span class="o">=</span> <span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;(?:^|\\s+)&#39;</span> <span class="o">+</span> <span class="nx">className</span> <span class="o">+</span> <span class="s1">&#39;(?:\\s+|$)&#39;</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">hasClass</span><span class="p">;</span>
	<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Toggle a classname for a particular DOM element</span>
<span class="cm">	 * @method toggleClass</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node</span>
<span class="cm">	 * @param className {String} The class name.</span>
<span class="cm">	 **/</span>
	<span class="nx">toggleClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">dom</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">className</span><span class="p">))</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">className</span><span class="p">);</span>
		<span class="k">else</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">className</span><span class="p">);</span>
	<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Add a string of CSS to the document</span>
<span class="cm">	 * @method css</span>
<span class="cm">	 * @param css {String} The CSS string</span>
<span class="cm">	 */</span>
	<span class="nx">css</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">css</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">styleNode</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;style&#39;</span><span class="p">);</span>
		<span class="nx">styleNode</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css&#39;</span><span class="p">);</span>
		<span class="nx">styleNode</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">css</span><span class="p">));</span>
		<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">styleNode</span><span class="p">);</span>
	<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Check if a node is contained inside another node.</span>
<span class="cm">	 * @method contains	</span>
<span class="cm">	 * @param parent {Object} The CSS selector string or DOM node for the parent node.</span>
<span class="cm">	 * @param el {Object} The CSS selector string or DOM node for the child node.	</span>
<span class="cm">	 * @param orig {HTMLElement} The original parent node, used in recursion</span>
<span class="cm">	 * @return True if el is contained inside of parentNode, false otherwise.</span>
<span class="cm">	 **/</span>	
	<span class="nx">contains</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">el</span><span class="p">,</span> <span class="nx">orig</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">orig</span> <span class="o">===</span> <span class="nb">document</span> <span class="o">||</span> <span class="nx">orig</span> <span class="o">===</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
		<span class="p">}</span> 
		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">===</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">===</span> <span class="nx">parent</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
		<span class="p">}</span> 
		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">,</span> <span class="nx">orig</span> <span class="o">||</span> <span class="nx">parent</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Check if a node exists in the document.</span>
<span class="cm">	 * @method inDocument	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node.</span>
<span class="cm">	 * @return True if el is contained inside the document, false otherwise.</span>
<span class="cm">	 **/</span>
	<span class="nx">inDocument</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">try</span> 
		<span class="p">{</span>
			<span class="k">return</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">el</span><span class="p">);</span>				
		<span class="p">}</span> 
		<span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Get an ancestor node by a comparison function</span>
<span class="cm">	 * @method getAncestorBy	</span>
<span class="cm">	 * @param node {String|Object} The CSS selector string or DOM node.</span>
<span class="cm">	 * @param fn {Function} The comparison function - return true or false.</span>
<span class="cm">	 * @param scope {Object} The scope of the passed function (optional)</span>
<span class="cm">	 * @return The ancestor node if found, false otherwise.</span>
<span class="cm">	 **/</span>
	<span class="nx">getAncestorBy</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">node</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">node</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="o">:</span> <span class="nx">node</span><span class="p">;</span>
		<span class="nx">scope</span> <span class="o">=</span> <span class="nx">scope</span> <span class="o">||</span> <span class="nx">fn</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">node</span><span class="p">))</span> 
		<span class="p">{</span>
			<span class="k">return</span> <span class="nx">node</span><span class="p">;</span>
		<span class="p">}</span> 
		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">node</span> <span class="o">===</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
		<span class="p">}</span> 
		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAncestorBy</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">scope</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Get an ancestor node by a class name</span>
<span class="cm">	 * @method getAncestorByClassName</span>
<span class="cm">	 * @param node {String|Object} The CSS selector string or DOM node.</span>
<span class="cm">	 * @param className {String} The name of the class to search for</span>
<span class="cm">	 * @return The ancestor node if found, false otherwise.</span>
<span class="cm">	 **/</span>
	<span class="nx">getAncestorByClassName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAncestorBy</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">className</span><span class="p">);</span> <span class="p">});</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Get an ancestor node by tag name</span>
<span class="cm">	 * @method getAncestorByTagName	</span>
<span class="cm">	 * @param node {String|Object} The CSS selector string or DOM node.</span>
<span class="cm">	 * @param tagName {String} The tag name of the element to search for.</span>
<span class="cm">	 * @return The ancestor node if found, false otherwise.</span>
<span class="cm">	 **/</span>
	<span class="nx">getAncestorByTagName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">tagName</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAncestorBy</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">el</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="nx">tagName</span><span class="p">;</span> <span class="p">});</span>
	<span class="p">}</span>
		
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Event methods</span>
<span class="cm"> * @module event</span>
<span class="cm"> **/</span>
<span class="kd">var</span> <span class="nx">event</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Event class</span>
<span class="cm">	 * @class Event</span>
<span class="cm">	 * @static</span>
<span class="cm">	 */</span>	

	<span class="cm">/*</span>
<span class="cm">	 * Store event bindings so that they can later be unbound by</span>
<span class="cm">	 * calling mui.removeEventListener</span>
<span class="cm">	 * @property _bindings</span>
<span class="cm">	 * @type Array</span>
<span class="cm">	 * @private</span>
<span class="cm">	 */</span>
	<span class="kd">var</span> <span class="nx">_bindings</span> <span class="o">=</span> <span class="p">[];</span>
	
	<span class="cm">/*</span>
<span class="cm">	 * Store click event bindings for speedy clicks</span>
<span class="cm">	 * @property _clicks</span>
<span class="cm">	 * @type Array</span>
<span class="cm">	 * @private</span>
<span class="cm">	 */</span>
	<span class="kd">var</span> <span class="nx">_clicks</span> <span class="o">=</span> <span class="p">[];</span>
	
	<span class="cm">/*</span>
<span class="cm">	 * Store touchend event bindings for event normalization</span>
<span class="cm">	 * @property _touchends</span>
<span class="cm">	 * @type Array</span>
<span class="cm">	 * @private</span>
<span class="cm">	 */</span>
	<span class="kd">var</span> <span class="nx">_touchends</span> <span class="o">=</span> <span class="p">[];</span>
	
	<span class="cm">/*</span>
<span class="cm">	 * Store the touchstart event for event normalization</span>
<span class="cm">	 * @property _touchstartEvt</span>
<span class="cm">	 * @type Event</span>
<span class="cm">	 * @private</span>
<span class="cm">	 */</span>
	<span class="kd">var</span> <span class="nx">_touchstartEvt</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="cm">/*</span>
<span class="cm">     * Store the client X for the first toch</span>
<span class="cm">     * @property _firstY</span>
<span class="cm">     * @type Number</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_firstY</span>    <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    
    <span class="cm">/*</span>
<span class="cm">     * Store the client X for the last toch</span>
<span class="cm">     * @property _lastY</span>
<span class="cm">     * @type Number</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_lastY</span>     <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        
    <span class="cm">/*</span>
<span class="cm">     * Store the touchstart time for speedy clicks</span>
<span class="cm">     * @property _touchstartTime</span>
<span class="cm">     * @type Number</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_touchstartTime</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    
    <span class="cm">/*</span>
<span class="cm">     * Store state of touches - whether or not user is moving</span>
<span class="cm">     * @property _touchmoved</span>
<span class="cm">     * @type BOolean</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_touchmoved</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="cm">/*</span>
<span class="cm">     * Store boolean flag to determine if iPhone for speedy clicks</span>
<span class="cm">     * @property _isIphone</span>
<span class="cm">     * @type Boolean</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_isIphone</span> <span class="o">=</span> <span class="sr">/i(Phone|Pod)/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ontouchstart</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">;</span>

    <span class="cm">/*</span>
<span class="cm">     * Store boolean flag to determine if Android for speedy clicks</span>
<span class="cm">     * @property _isAndroid</span>
<span class="cm">     * @type Boolean</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_isAndroid</span> <span class="o">=</span> <span class="sr">/Android/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">);</span>
    
    <span class="cm">/*</span>
<span class="cm">     * Resolve events by adding a touches array for browsers which do </span>
<span class="cm">     * not support touch events</span>
<span class="cm">     * @method resolveEvent</span>
<span class="cm">     * @param e {Event} The DOM event</span>
<span class="cm">     * @return {Event} The normalized DOM event</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="kd">function</span> <span class="nx">resolveEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">ev</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span>
        <span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="s1">&#39;mousedown&#39;</span><span class="o">:</span>
            <span class="k">case</span> <span class="s1">&#39;mousemove&#39;</span><span class="o">:</span>   
            <span class="k">case</span> <span class="s1">&#39;mouseup&#39;</span><span class="o">:</span>         
                <span class="nx">ev</span><span class="p">.</span><span class="nx">touches</span> <span class="o">=</span> <span class="p">[</span><span class="nx">e</span><span class="p">];</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">ev</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="cm">/**</span>
<span class="cm">     * Event handler - used to allow for speedy clicks on iPhone</span>
<span class="cm">     * @method fireEvent    </span>
<span class="cm">     * @param e {Event} The generated event</span>
<span class="cm">     * @private</span>
<span class="cm">     **/</span>
    <span class="kd">function</span> <span class="nx">handleEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="s1">&#39;touchstart&#39;</span><span class="o">:</span>
                <span class="nx">_touchstartEvt</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span>
                <span class="nx">_touchmoved</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="nx">_touchstartTime</span> <span class="o">=</span> <span class="o">+</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">);</span>
                <span class="nx">_firstY</span> <span class="o">=</span> <span class="nx">_lastY</span> <span class="o">=</span> <span class="nx">_touchstartEvt</span><span class="p">.</span><span class="nx">touches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clientY</span><span class="p">;</span>

                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;touchmove&#39;</span><span class="o">:</span>
                <span class="nx">_touchmoved</span><span class="o">++</span><span class="p">;</span>  
                <span class="nx">_lastY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">touches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clientY</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;touchend&#39;</span><span class="o">:</span>
                <span class="c1">// Fire touchend</span>
                <span class="nx">fireEvent</span><span class="p">(</span><span class="s1">&#39;touchend&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
                
                <span class="c1">// Fire click, if there is a _touchstartEvt</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">_touchstartEvt</span><span class="p">){</span>   
                    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="nx">_isIphone</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">_touchmoved</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span> <span class="nx">_isAndroid</span> <span class="o">&amp;&amp;</span> <span class="nx">_touchmoved</span> <span class="o">&lt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">timeStamp</span> <span class="o">-</span> <span class="nx">_touchstartTime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">500</span> <span class="o">&amp;&amp;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">_firstY</span> <span class="o">-</span> <span class="nx">_lastY</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">)</span> <span class="p">){</span>
                        <span class="nx">fireEvent</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="nx">_firstY</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
                <span class="nx">_lastY</span>  <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
                <span class="nx">_touchstartEvt</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>              
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Fire an event - used to allow for speedy clicks on iPhone</span>
<span class="cm">	 * @method fireEvent	</span>
<span class="cm">	 * @param type {String} The event type (click, touchstart, etc)</span>
<span class="cm">	 * @param e {Event} The generated event</span>
<span class="cm">	 * @private</span>
<span class="cm">	 **/</span>
	<span class="kd">function</span> <span class="nx">fireEvent</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;click&#39;</span> <span class="o">?</span> <span class="nx">_clicks</span> <span class="o">:</span> <span class="nx">_touchends</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">_touchstartEvt</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">mui</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="o">&amp;&amp;</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">element</span><span class="p">,</span> <span class="nx">_touchstartEvt</span><span class="p">.</span><span class="nx">target</span><span class="p">))</span>
				<span class="p">{</span>
					<span class="kd">var</span> <span class="nx">evt</span> <span class="o">=</span> <span class="p">{};</span>
					<span class="nx">evt</span><span class="p">.</span><span class="nx">preventDefault</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
						<span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> 
						<span class="nx">b</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
							<span class="nx">c</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
						<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
					<span class="p">};</span>
					<span class="nx">evt</span><span class="p">.</span><span class="nx">stopPropagation</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
						<span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span> 
						<span class="nx">b</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
							<span class="nx">c</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
						<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
					<span class="p">};</span>
					<span class="nx">mui</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="nx">_touchstartEvt</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">evt</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span><span class="p">;</span>
					<span class="p">});</span>
					<span class="nx">mui</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="nx">_touchstartEvt</span><span class="p">.</span><span class="nx">touches</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">evt</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span><span class="p">;</span>
					<span class="p">});</span>
					<span class="nx">evt</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
					<span class="nx">b</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span><span class="nx">evt</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">});</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="cm">/**</span>
<span class="cm">	 * Attach an event to a given element</span>
<span class="cm">	 * @method on</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node.</span>
<span class="cm">	 * @param type {String} The event type (click, touchstart, etc)</span>
<span class="cm">	 * @param fn {Function} The callback function fired on the event</span>
<span class="cm">	 * @param ctx {Object} The scope to be applied to the callback</span>
<span class="cm">	 * @param useCapture {Boolean} Whether or not to initiate capture</span>
<span class="cm">	 **/</span>
	<span class="kd">function</span> <span class="nx">on</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">useCapture</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">fauxEvt</span><span class="p">;</span>
		<span class="nx">ctx</span> <span class="o">=</span> <span class="nx">ctx</span> <span class="o">||</span> <span class="nx">el</span><span class="p">;</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="nx">useCapture</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">useCapture</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ontouchstart</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> 
			<span class="p">{</span>
				<span class="k">switch</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> 
				<span class="p">{</span>
					<span class="k">case</span> <span class="s1">&#39;touchstart&#39;</span><span class="o">:</span>
						<span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;mousedown&#39;</span><span class="p">;</span>
						<span class="k">break</span><span class="p">;</span>
					<span class="k">case</span> <span class="s1">&#39;touchmove&#39;</span><span class="o">:</span>
						<span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;mousemove&#39;</span><span class="p">;</span>
						<span class="k">break</span><span class="p">;</span>
					<span class="k">case</span> <span class="s1">&#39;touchend&#39;</span><span class="o">:</span>
						<span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;mouseup&#39;</span><span class="p">;</span>
						<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>				
				<span class="nx">method</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="o">?</span> 
				 	<span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">resolveEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span> <span class="p">}</span><span class="o">:</span> 
					<span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">resolveEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span> <span class="p">};</span>
			<span class="p">}</span>
			<span class="k">else</span>
			<span class="p">{</span>
				<span class="nx">method</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="o">?</span> 
					<span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span> <span class="p">}</span> <span class="o">:</span> 
					<span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span> <span class="p">};</span>
			<span class="p">}</span>
			
			<span class="nx">fauxEvt</span> <span class="o">=</span> <span class="p">{</span>
				<span class="nx">element</span><span class="o">:</span> <span class="nx">el</span><span class="p">,</span>
				<span class="nx">type</span><span class="o">:</span> <span class="nx">type</span><span class="p">,</span>
				<span class="nx">originalMethod</span><span class="o">:</span> <span class="nx">fn</span><span class="p">,</span>
				<span class="nx">method</span><span class="o">:</span> <span class="nx">method</span><span class="p">,</span>
				<span class="nx">useCapture</span><span class="o">:</span> <span class="nx">useCapture</span>
			<span class="p">};</span>

			<span class="nx">_bindings</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fauxEvt</span><span class="p">);</span>

			<span class="k">if</span><span class="p">((</span><span class="nx">_isIphone</span> <span class="o">||</span> <span class="nx">_isAndroid</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;click&#39;</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="nx">_clicks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fauxEvt</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="nx">_isIphone</span> <span class="o">||</span> <span class="nx">_isAndroid</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;touchend&#39;</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="nx">_touchends</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fauxEvt</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">else</span>
			<span class="p">{</span>
				<span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">useCapture</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Attach an event to a given element one time</span>
<span class="cm">	 * @method one</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node.</span>
<span class="cm">	 * @param type {String} The event type (click, touchstart, etc)</span>
<span class="cm">	 * @param fn {Function} The callback function fired on the event</span>
<span class="cm">	 * @param ctx {Object} The scope to be applied to the callback</span>
<span class="cm">	 * @param useCapture {Boolean} Whether or not to initiate capture</span>
<span class="cm">	 **/</span>
	<span class="kd">function</span> <span class="nx">one</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">useCapture</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="nx">fn</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">else</span>
			<span class="p">{</span>
				<span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">ctx</span><span class="o">||</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">useCapture</span><span class="p">);</span>
		<span class="p">};</span>
		<span class="nx">on</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">useCapture</span><span class="p">);</span>
	<span class="p">}</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Remove an event handler from a given element</span>
<span class="cm">	 * @method removeEventListener	</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node.</span>
<span class="cm">	 * @param type {String} The event type (click, touchstart, etc)</span>
<span class="cm">	 * @param fn {Function} The callback function fired on the event</span>
<span class="cm">	 * @param ctx {Object} The scope to be applied to the callback</span>
<span class="cm">	 * @param useCapture {Boolean} Whether or not to initiate capture	</span>
<span class="cm">	 **/</span>
	<span class="kd">function</span> <span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">useCapture</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">len</span><span class="o">=</span><span class="nx">_bindings</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">method</span><span class="p">;</span>
		<span class="nx">ctx</span> <span class="o">=</span> <span class="nx">ctx</span> <span class="o">||</span> <span class="nx">el</span><span class="p">;</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="nx">useCapture</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">useCapture</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ontouchstart</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> 
			<span class="p">{</span>
				<span class="k">switch</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> 
				<span class="p">{</span>
					<span class="k">case</span> <span class="s1">&#39;touchstart&#39;</span><span class="o">:</span>
						<span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;mousedown&#39;</span><span class="p">;</span>
						<span class="k">break</span><span class="p">;</span>
					<span class="k">case</span> <span class="s1">&#39;touchmove&#39;</span><span class="o">:</span>
						<span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;mousemove&#39;</span><span class="p">;</span>
						<span class="k">break</span><span class="p">;</span>
					<span class="k">case</span> <span class="s1">&#39;touchend&#39;</span><span class="o">:</span>
						<span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;mouseup&#39;</span><span class="p">;</span>
						<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>				
			<span class="p">}</span>
			
			<span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="nx">b</span> <span class="o">=</span> <span class="nx">_bindings</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
				<span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">type</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">useCapture</span> <span class="o">===</span> <span class="nx">useCapture</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">element</span> <span class="o">===</span> <span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">originalMethod</span> <span class="o">===</span> <span class="nx">fn</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="nx">el</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">method</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">useCapture</span><span class="p">);</span>
					<span class="nx">_bindings</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
					<span class="nx">i</span><span class="o">--</span><span class="p">;</span>
					<span class="nx">len</span><span class="o">--</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">type</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">useCapture</span> <span class="o">===</span> <span class="nx">useCapture</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">element</span> <span class="o">===</span> <span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">fn</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="nx">el</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">method</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">useCapture</span><span class="p">);</span>
					<span class="nx">_bindings</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
					<span class="nx">i</span><span class="o">--</span><span class="p">;</span>
					<span class="nx">len</span><span class="o">--</span><span class="p">;</span>
				<span class="p">}</span>

				<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ontouchstart</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;click&#39;</span> <span class="o">||</span> <span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;touchend&#39;</span><span class="p">))</span>
				<span class="p">{</span>
					<span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;click&#39;</span> <span class="o">?</span> <span class="nx">_clicks</span> <span class="o">:</span> <span class="nx">_touchends</span><span class="p">;</span>
					<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">len2</span><span class="o">=</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">len2</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span>
					<span class="p">{</span>
						<span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
						<span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">useCapture</span> <span class="o">===</span> <span class="nx">useCapture</span> <span class="o">&amp;&amp;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">element</span> <span class="o">===</span> <span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">originalMethod</span> <span class="o">===</span> <span class="nx">fn</span><span class="p">)</span>
						<span class="p">{</span>
							<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
							<span class="nx">j</span><span class="o">--</span><span class="p">;</span>
							<span class="nx">len2</span><span class="o">--</span><span class="p">;</span>
						<span class="p">}</span>
						<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">useCapture</span> <span class="o">===</span> <span class="nx">useCapture</span> <span class="o">&amp;&amp;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">element</span> <span class="o">===</span> <span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">fn</span><span class="p">)</span>
						<span class="p">{</span>
							<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
							<span class="nx">j</span><span class="o">--</span><span class="p">;</span>
							<span class="nx">len2</span><span class="o">--</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;click&#39;</span><span class="p">)</span> <span class="nx">_clicks</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">;</span>
					<span class="k">else</span> <span class="nx">_touchends</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="c1">// Attach listeners to document for speedy clicks on iPhone</span>
	<span class="k">if</span><span class="p">(</span><span class="nx">_isIphone</span> <span class="o">||</span> <span class="nx">_isAndroid</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="nx">handleEvent</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
		<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchmove&#39;</span><span class="p">,</span> <span class="nx">handleEvent</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
		<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchend&#39;</span><span class="p">,</span> <span class="nx">handleEvent</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
	<span class="p">}</span>
	
	<span class="c1">// Public methods</span>
	<span class="k">return</span> <span class="p">{</span>
		<span class="nx">on</span><span class="o">:</span> <span class="nx">on</span><span class="p">,</span>
		<span class="nx">one</span><span class="o">:</span> <span class="nx">one</span><span class="p">,</span>
		<span class="nx">removeEventListener</span><span class="o">:</span> <span class="nx">removeEventListener</span>
	<span class="p">};</span>
	
<span class="p">})();</span>

<span class="cm">/**</span>
<span class="cm"> * Animation methods</span>
<span class="cm"> * @module anim</span>
<span class="cm"> **/</span>
<span class="kd">var</span> <span class="nx">anim</span> <span class="o">=</span> <span class="p">{</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Animation class</span>
<span class="cm">	 * @class Animation</span>
<span class="cm">	 * @static</span>
<span class="cm">	 */</span>

	<span class="cm">/**</span>
<span class="cm">	 * Animate an object&#39;s position, using webkit transitions.</span>
<span class="cm">	 * @method animate</span>
<span class="cm">	 * @param el {String|Object} The CSS selector string or DOM node.</span>
<span class="cm">	 * @param options {Object} The animation configuration</span>
<span class="cm">	 * Example:</span>
<span class="cm">	 *	Animating a position 100px up and 100px to the left:</span>
<span class="cm">	 *	</span>
<span class="cm">	 *	mui.animate(&#39;#the-element&#39;, {</span>
<span class="cm">	 * 		properties: {</span>
<span class="cm">	 *			top: &#39;-100px&#39;,</span>
<span class="cm">	 *			left: &#39;-100px&#39;,</span>
<span class="cm">	 * 		},</span>
<span class="cm">	 *		duration: &#39;0.5s&#39;</span>
<span class="cm">	 *	});</span>
<span class="cm">	 **/</span>
	<span class="nx">animate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">:</span> <span class="nx">el</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">posStyle</span> <span class="o">=</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="s1">&#39;position&#39;</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">posStyle</span> <span class="o">!=</span> <span class="s1">&#39;absolute&#39;</span> <span class="o">||</span> <span class="nx">posStyle</span> <span class="o">!=</span> <span class="s1">&#39;relative&#39;</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="nx">mui</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="s1">&#39;position&#39;</span><span class="p">,</span> <span class="s1">&#39;relative&#39;</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="p">{};</span>
		<span class="kd">var</span> <span class="nx">duration</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">duration</span> <span class="o">||</span> <span class="s1">&#39;350ms&#39;</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">properties</span> <span class="o">=</span> <span class="p">[];</span>
		<span class="nx">mui</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">properties</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">property</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">switch</span><span class="p">(</span><span class="nx">property</span><span class="p">)</span> 
			<span class="p">{</span>
				<span class="k">case</span> <span class="s1">&#39;left&#39;</span><span class="o">:</span>
				<span class="k">case</span> <span class="s1">&#39;right&#39;</span><span class="o">:</span>
					<span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">webkitTimingFunction</span> <span class="o">=</span> <span class="s1">&#39;ease-in-out&#39;</span><span class="p">;</span>
					<span class="nx">property</span> <span class="o">=</span> <span class="s1">&#39;-webkit-transform&#39;</span><span class="p">;</span>
					<span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;translateX(&#39;</span><span class="o">+</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;)&#39;</span><span class="p">;</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="k">case</span> <span class="s1">&#39;top&#39;</span><span class="o">:</span>
				<span class="k">case</span> <span class="s1">&#39;bottom&#39;</span><span class="o">:</span>
					<span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">webkitTimingFunction</span> <span class="o">=</span> <span class="s1">&#39;ease-in-out&#39;</span><span class="p">;</span>				
					<span class="nx">property</span> <span class="o">=</span> <span class="s1">&#39;-webkit-transform&#39;</span><span class="p">;</span>
					<span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;translateY(&#39;</span><span class="o">+</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;)&#39;</span><span class="p">;</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="k">default</span><span class="o">:</span>
					<span class="k">break</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="nx">properties</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">property</span><span class="p">);</span>
			<span class="nx">styles</span><span class="p">[</span><span class="nx">property</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
		<span class="p">});</span>
		<span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">webkitTransitionDuration</span> <span class="o">=</span> <span class="nx">duration</span><span class="p">;</span>
		<span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">webkitTransitionProperty</span> <span class="o">=</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
		<span class="nx">mui</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="nx">styles</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
		<span class="p">});</span>			
		
		<span class="k">if</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">callback</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="nx">options</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onComplete</span><span class="p">;</span>
			<span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
			<span class="p">{</span>
				<span class="nx">options</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onComplete</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
				<span class="nx">el</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;webkitTransitionEnd&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
			<span class="p">};</span>
			<span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;webkitTransitionEnd&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>		
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Effects methods</span>
<span class="cm"> * @module fx</span>
<span class="cm"> **/</span>
<span class="kd">var</span> <span class="nx">fx</span> <span class="o">=</span> <span class="p">{</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * FX class</span>
<span class="cm">	 * @class FX</span>
<span class="cm">	 * @static</span>
<span class="cm">	 */</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Apply a reflection directly underneath a given image.</span>
<span class="cm">	 * @method reflect</span>
<span class="cm">	 * @param img {HTMLElement} The &lt;img&gt; element.</span>
<span class="cm">	 **/</span>
	<span class="nx">reflect</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span> 
	<span class="p">{</span>			
		<span class="kd">var</span> <span class="nx">doReflection</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
			<span class="nx">container</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;mui-reflect-container&#39;</span><span class="p">;</span>
			<span class="nx">img</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">img</span><span class="p">);</span>
			<span class="nx">container</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">img</span><span class="p">);</span>
			<span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">);</span>
			<span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span>
			<span class="kd">var</span> <span class="nx">height</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
			<span class="kd">var</span> <span class="nx">opacity</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>

			<span class="nx">container</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">canvas</span><span class="p">);</span>

			<span class="nx">canvas</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="o">+</span><span class="s1">&#39;px&#39;</span><span class="p">;</span>
			<span class="nx">canvas</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="o">+</span><span class="s1">&#39;px&#39;</span><span class="p">;</span>
			<span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
			<span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">;</span>

			<span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>

			<span class="nx">ctx</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">img</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
			<span class="nx">ctx</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
			<span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">);</span>

			<span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>

			<span class="nx">ctx</span><span class="p">.</span><span class="nx">globalCompositeOperation</span> <span class="o">=</span> <span class="s2">&quot;destination-out&quot;</span><span class="p">;</span>
			<span class="kd">var</span> <span class="nx">grad</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">createLinearGradient</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>
			<span class="nx">grad</span><span class="p">.</span><span class="nx">addColorStop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;rgba(255, 255, 255, 1.0)&quot;</span><span class="p">);</span>
			<span class="nx">grad</span><span class="p">.</span><span class="nx">addColorStop</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;rgba(255, 255, 255, &quot;</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">opacity</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);</span>

			<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">grad</span><span class="p">;</span>
			<span class="nx">ctx</span><span class="p">.</span><span class="nx">rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">,</span> <span class="nx">height</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>
			<span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>			
		<span class="p">};</span>		

		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">mui</span><span class="p">.</span><span class="nx">inDocument</span><span class="p">(</span><span class="nx">img</span><span class="p">))</span> 
		<span class="p">{</span>
			<span class="nx">img</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
				<span class="nx">doReflection</span><span class="p">(</span><span class="nx">img</span><span class="p">);</span>
			<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
		<span class="p">}</span> 
		<span class="k">else</span> 
		<span class="p">{</span>
			<span class="nx">doReflection</span><span class="p">(</span><span class="nx">img</span><span class="p">);</span>
		<span class="p">}</span>				
	<span class="p">}</span>		
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * AJAX methods</span>
<span class="cm"> * @module ajax</span>
<span class="cm"> **/</span>
<span class="kd">var</span> <span class="nx">ajax</span> <span class="o">=</span> <span class="p">{</span>
	
	<span class="nx">CONNECTION_TIMEOUT</span><span class="o">:</span> <span class="mi">7000</span><span class="p">,</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * AJAX class</span>
<span class="cm">	 * @class Ajax</span>
<span class="cm">	 * @static</span>
<span class="cm">	 */</span>

	<span class="cm">/**</span>
<span class="cm">	 * XHR wrapper for making asynchronous connections</span>
<span class="cm">	 * @method io</span>
<span class="cm">	 * @param url {String} URL endpoint</span>
<span class="cm">	 * @param options {Object} Configuration options:</span>
<span class="cm">	 * 	method {String}: get, post</span>
<span class="cm">	 *	callback {Object}: Object literal containing the success and failure callback functions,</span>
<span class="cm">	 *		  as well as the scope to be applied to the callback functions.</span>
<span class="cm">	 *	update {String|HTMLElement}: If present, the given element will be updated with the result </span>
<span class="cm">	 *		of the transaction.</span>
<span class="cm">	 * Example: </span>
<span class="cm">	 * 	Using callback function:</span>
<span class="cm">	 *</span>
<span class="cm">	 * 	mui.io(&#39;/ajax.php&#39;, {</span>
<span class="cm">	 *	  method: &#39;get&#39;,</span>
<span class="cm">	 *        headers: [ { &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39; }],</span>
<span class="cm">	 *	  callback: {</span>
<span class="cm">	 *		success: function(o) {</span>
<span class="cm">	 *			// do something with o.responseText</span>
<span class="cm">	 *		},</span>
<span class="cm">	 *		scope: this</span>
<span class="cm">	 *	});</span>
<span class="cm">	 *</span>
<span class="cm">	 *	Using update property:</span>
<span class="cm">	 *</span>
<span class="cm">	 * 	mui.io(&#39;/ajax.php&#39;, {</span>
<span class="cm">	 *	  method: &#39;get&#39;,</span>
<span class="cm">	 *	  update: &#39;#el-to-be-updated&#39;</span>
<span class="cm">	 *	});	</span>
<span class="cm">	 * @return {Boolean} True if el is contained inside the document, false otherwise.</span>
<span class="cm">	 **/</span>		
		<span class="nx">io</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">(),</span>
			    <span class="nx">method</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">method</span> <span class="o">||</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
			    <span class="nx">success</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">callback</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">success</span> <span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
			    <span class="nx">failure</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">callback</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">failure</span> <span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
			    <span class="nx">scope</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">callback</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">scope</span> <span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
			    <span class="nx">params</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">params</span> <span class="o">||</span> <span class="kc">null</span><span class="p">,</span>
			    <span class="nx">flakyConnTimer</span><span class="p">;</span>
			
			<span class="k">if</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">update</span><span class="p">)</span> 
			<span class="p">{</span>
				<span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">options</span><span class="p">.</span><span class="nx">update</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">update</span><span class="p">)</span> <span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">update</span><span class="p">;</span>
				<span class="nx">success</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">el</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
				<span class="p">};</span>
			<span class="p">}</span>
			
			<span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
			<span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">success</span><span class="p">)</span> <span class="o">?</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
			    <span class="k">if</span> <span class="p">(</span><span class="nx">flakyConnTimer</span><span class="p">){</span>
			        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">flakyConnTimer</span><span class="p">);</span>
			        <span class="nx">flakyConnTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
			    <span class="p">}</span>
			    
				<span class="k">if</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">!==</span> <span class="mi">4</span><span class="p">)</span>
				<span class="p">{</span>
				    <span class="nx">mui</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="s2">&quot;XHR state change: &quot;</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span><span class="p">);</span>
					<span class="k">return</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="nx">mui</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="s2">&quot;XHR status: &quot;</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">);</span>
				
				<span class="k">if</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="nx">success</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">o</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
				<span class="p">}</span>
				<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">failure</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="nx">failure</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">o</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span> <span class="o">:</span> <span class="kc">null</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="nx">mui</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">mui</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">v</span><span class="p">);</span> <span class="p">});</span>
				<span class="p">});</span>
			<span class="p">}</span>
			<span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
			
			<span class="c1">//flakyConnTimer = setTimeout( function() { mui.trace(&quot;XHR aborting&quot;); if(failure) { failure.call(scope, { status: 0, statusText: &quot;abort&quot; } ); } }, ajax.CONNECTION_TIMEOUT );</span>
		<span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Fetch an external script resource</span>
<span class="cm">	 * @method getScript</span>
<span class="cm">	 * @param url {String} The url of the scrip</span>
<span class="cm">	 * @param callback {Function} Callback invoked after script is downloaded</span>
<span class="cm">	 * @param scope {Object} The context of the callback function</span>
<span class="cm">	 **/</span>
	<span class="nx">getScript</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">scriptTag</span> <span class="o">=</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">,</span> <span class="nx">src</span><span class="o">:</span> <span class="nx">url</span> <span class="p">});</span>
		<span class="nx">mui</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">scriptTag</span><span class="p">,</span> <span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">scope</span><span class="p">));</span>
		<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">scriptTag</span><span class="p">);</span>
	<span class="p">}</span>	
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Object-Oriented programming helpers</span>
<span class="cm"> * @module oop</span>
<span class="cm"> **/</span>
<span class="kd">var</span> <span class="nx">oop</span> <span class="o">=</span> <span class="p">{</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * OOP class</span>
<span class="cm">	 * @class Oop</span>
<span class="cm">	 * @static</span>
<span class="cm">	 */</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Provide a namespace.  </span>
<span class="cm">	 * @method provide</span>
<span class="cm">	 * @param ns {String} The namespace. This can be a chained namespace, i.e., &quot;levelOne.levelTwo.levelThree&quot;</span>
<span class="cm">	 */</span>
	<span class="nx">provide</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ns</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">ns</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">),</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">window</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">len</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">p</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">p</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="p">{}</span> <span class="o">:</span> <span class="nx">p</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]];</span>
			<span class="nx">p</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]];</span>
		<span class="p">}</span>
 	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Simple object extension. Static members will not be inherited to the child class.</span>
<span class="cm">	 * The superclass and constructor properties are added to parent and child classes.</span>
<span class="cm">	 * @method extend</span>
<span class="cm">	 * @param sub {Object} The subclass</span>
<span class="cm">	 * @param sup {Object} The superclass from which to extend</span>
<span class="cm">	 * @param proto {Object} prototype properties to add/override</span>
<span class="cm">	 * @param stat {Object} static properties to add/override	</span>
<span class="cm">	 * @return The subclass, with properties/methods inherited from superclass</span>
<span class="cm">	 **/</span>
	<span class="nx">extend</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sub</span><span class="p">,</span> <span class="nx">sup</span><span class="p">,</span> <span class="nx">proto</span><span class="p">,</span> <span class="nx">stat</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="c1">// Ensure sub and sup exist</span>
		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">sub</span> <span class="o">||</span> <span class="o">!</span><span class="nx">sup</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;mui.extend: Invalid extension.&#39;</span><span class="p">);</span>
		<span class="p">}</span>
		
		<span class="c1">// Prototypal inheritance of the parent to child</span>
		<span class="nx">sub</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">sup</span><span class="p">();</span>

		<span class="c1">// Set constructor properties for parent, child</span>
		<span class="nx">sup</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">sup</span><span class="p">;</span>
		<span class="nx">sub</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">sub</span><span class="p">;</span>
		
		<span class="c1">// Set superclass property for child</span>
		<span class="nx">sub</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">superclass</span> <span class="o">=</span> <span class="nx">sup</span><span class="p">;</span>
		
		<span class="c1">// If any prototype properties are passed in, add those to the child&#39;s prototype</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">proto</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">mui</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="nx">proto</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">sub</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span><span class="p">;</span>
			<span class="p">});</span>
		<span class="p">}</span>
		
		<span class="c1">// If any static properties are passed in, add those to the child as static members</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">stat</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">mui</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="nx">stat</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">sub</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span><span class="p">;</span>
			<span class="p">});</span>
		<span class="p">}</span>

		<span class="k">return</span> <span class="nx">sub</span><span class="p">;</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Object augmentation</span>
<span class="cm">	 * @method augment</span>
<span class="cm">	 * @param obj {Object} The receiver to be augmented</span>
<span class="cm">	 * @param ext {Object} Object literal containing members to be added the receiver.</span>
<span class="cm">	 * @param ov {Boolean} If true, properties supplied will be overriden on the receiver if already present.</span>
<span class="cm">	 * @return The original object with all the original properties , plus the passed in extensions.</span>
<span class="cm">	 **/</span>	
	<span class="nx">augment</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">ext</span><span class="p">,</span> <span class="nx">ov</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">ext</span><span class="p">)</span> 
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">ext</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span> 
			<span class="p">{</span>
				<span class="k">if</span><span class="p">((</span><span class="nx">ov</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ext</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
	<span class="p">},</span>

	<span class="cm">/**</span>
<span class="cm">	 * Bind a function to a given context and arguments</span>
<span class="cm">	 * @method bind</span>
<span class="cm">	 * @param fn {Function} The function to bind</span>
<span class="cm">	 * @param ctx {Object} The context in which the function will be executed</span>
<span class="cm">	 * @param args* 0..n arguments to include before the arguments the </span>
<span class="cm">	 * function is executed with</span>
<span class="cm">	 * @return {Function} the wrapped function</span>
<span class="cm">	 */</span>
	<span class="nx">bind</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
		<span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
			<span class="c1">// Merge arguments of inner function with those passed to mui.bind			</span>
			<span class="kd">var</span> <span class="nx">xargs</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
			<span class="nx">mui</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span> <span class="nx">xargs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="p">});</span>
			<span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">((</span><span class="nx">ctx</span> <span class="o">||</span> <span class="nx">fn</span><span class="p">),</span> <span class="nx">xargs</span><span class="p">);</span> 
		<span class="p">}</span>
	<span class="p">}</span>

<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Client environment methods</span>
<span class="cm"> * @module env</span>
<span class="cm"> **/</span>
<span class="kd">var</span> <span class="nx">env</span> <span class="o">=</span> <span class="p">{</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Env class</span>
<span class="cm">	 * @class Env</span>
<span class="cm">	 * @static</span>
<span class="cm">	 */</span>

	<span class="cm">/*</span>
<span class="cm">	 * mui.UA is a read-only property which gives information regarding </span>
<span class="cm">	 * the User Agent. </span>
<span class="cm">	 * @final UA</span>
<span class="cm">	 * @type Object</span>
<span class="cm">	 */</span>
	<span class="nx">UA</span><span class="o">:</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

		<span class="kd">var</span> <span class="nx">UA</span> <span class="o">=</span> <span class="p">{</span>
			<span class="nx">Apple</span><span class="o">:</span>       <span class="kc">false</span><span class="p">,</span>
			<span class="nx">Safari</span><span class="o">:</span>      <span class="kc">false</span><span class="p">,</span>
			<span class="nx">iPhone3</span><span class="o">:</span>     <span class="kc">false</span><span class="p">,</span>
			<span class="nx">webOS</span><span class="o">:</span>       <span class="kc">false</span><span class="p">,</span> 
			<span class="nx">Android</span><span class="o">:</span>     <span class="kc">false</span><span class="p">,</span>
			<span class="nx">WebKit</span><span class="o">:</span>      <span class="kc">false</span><span class="p">,</span>
			<span class="nx">Gears</span><span class="o">:</span>       <span class="kc">false</span><span class="p">,</span>
			<span class="nx">CSSTransitions</span><span class="o">:</span> <span class="kc">false</span>
		<span class="p">};</span>

		<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">navigator</span> <span class="o">!=</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot; AppleWebKit/&quot;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">))</span>       <span class="nx">UA</span><span class="p">.</span><span class="nx">WebKit</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;Android/&quot;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">))</span>	    <span class="nx">UA</span><span class="p">.</span><span class="nx">Android</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;webOS&quot;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">))</span>	    	    <span class="nx">UA</span><span class="p">.</span><span class="nx">webOS</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>			
			<span class="k">if</span><span class="p">(</span><span class="sr">/i(Phone|Pod)/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">))</span>                <span class="nx">UA</span><span class="p">.</span><span class="nx">Apple</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">UA</span><span class="p">.</span><span class="nx">Apple</span> <span class="o">&amp;&amp;</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;OS 3&quot;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">))</span>    <span class="nx">UA</span><span class="p">.</span><span class="nx">iPhone3</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">UA</span><span class="p">.</span><span class="nx">Apple</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="nx">UA</span><span class="p">.</span><span class="nx">Android</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">UA</span><span class="p">.</span><span class="nx">webOS</span> <span class="o">&amp;&amp;</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;Safari&quot;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">)))</span> <span class="nx">UA</span><span class="p">.</span><span class="nx">Safari</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="nx">UA</span><span class="p">.</span><span class="nx">Gears</span> <span class="o">=</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">mimeTypes</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">mimeTypes</span><span class="p">[</span><span class="s1">&#39;application/x-googlegears&#39;</span><span class="p">];</span>
		
		<span class="c1">// Create Gears element</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">UA</span><span class="p">.</span><span class="nx">Gears</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kd">var</span> <span class="nx">factory</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
			<span class="nx">factory</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="p">;</span>
			<span class="nx">factory</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s1">&#39;0px&#39;</span><span class="p">;</span>
			<span class="nx">factory</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="s1">&#39;0px&#39;</span><span class="p">;</span>
			<span class="nx">factory</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;application/x-googlegears&#39;</span><span class="p">;</span>
			<span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">factory</span><span class="p">);</span>
			<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">google</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="nx">google</span> <span class="o">=</span> <span class="p">{};</span>
			<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">google</span><span class="p">.</span><span class="nx">gears</span><span class="p">)</span> <span class="nx">google</span><span class="p">.</span><span class="nx">gears</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">factory</span><span class="o">:</span> <span class="nx">factory</span> <span class="p">};</span>
		<span class="p">}</span>		
		
		<span class="c1">// Transitions</span>
		<span class="nx">UA</span><span class="p">.</span><span class="nx">CSSTransitions</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">WebKitCSSMatrix</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">);</span>

		<span class="k">return</span> <span class="nx">UA</span><span class="p">;</span>
	<span class="p">})()</span>
<span class="p">};</span>



<span class="cm">/**</span>
<span class="cm">* Template is a mechanism for binding data into a string</span>
<span class="cm">*</span>
<span class="cm">* Example:</span>
<span class="cm">*</span>
<span class="cm">* var someHTML  = &quot;&lt;div id=&#39;#{myID}&#39;&gt;#{myData}&lt;/div&gt;&quot;;</span>
<span class="cm">* var data      = { myID:&quot;myBox&quot;, myData:&quot;Hello World&quot; };</span>
<span class="cm">* var output    = mui.map( data, {someHTML|HTMLElement} );</span>
<span class="cm">*</span>
<span class="cm">* //output ==&gt; &quot;&lt;div id=&#39;myBox&#39;&gt;Hello World&lt;/div&gt;&quot;;</span>
<span class="cm">*</span>
<span class="cm">* Notes:</span>
<span class="cm">*</span>
<span class="cm">*  Speed, speed, and more speed:</span>
<span class="cm">*  ---------------------------</span>
<span class="cm">*   Obviously the goal of any piece of code is to be as efficient as possible.</span>
<span class="cm">*   Often times, you will see code that uses JavaScript&#39;s raw [string].replace</span>
<span class="cm">*   methods, to do the same thing as above.</span>
<span class="cm">*</span>
<span class="cm">*   However often times your &quot;template string&quot; is usuallay HTML or something.</span>
<span class="cm">*   This same string is re-used over and over again, and typically you&#39;ll see</span>
<span class="cm">*   engineers just make the replace calls. ..</span>
<span class="cm">*</span>
<span class="cm">*   Having to continually run regular expressions on the string is slow and</span>
<span class="cm">*   some what point-less if the original &quot;template string&quot; doesn&#39;t really change,</span>
<span class="cm">*   all that&#39;s changing is the data. . .</span>
<span class="cm">*</span>
<span class="cm">*   So the goal was to create a more efficient, single way too manage a &quot;template string&quot;,</span>
<span class="cm">*   that is faster than other implementations like it and faster than continually</span>
<span class="cm">*   calling raw replace methods. ..</span>
<span class="cm">*</span>
<span class="cm">*   What this class does under the hood, is split the string up into its pieces,</span>
<span class="cm">*   using various Regular Expresion matching. .. similar to what a replace would do.</span>
<span class="cm">*   It then stores these pieces privately in a &quot;buffer&quot;. At the same time it also</span>
<span class="cm">*   stores the property names/expressions found in the &quot;template string&quot;, and at</span>
<span class="cm">*   what location(s) they should appear in the buffer.</span>
<span class="cm">*</span>
<span class="cm">*   This only needs to be done 1 time per template string. . .(implementations in other</span>
<span class="cm">*   toolkits such as Prototype 1.6.03, would do multiple matches/replacements every time</span>
<span class="cm">*   the data is passed in).</span>
<span class="cm">*</span>
<span class="cm">*   Then, when you bind data by calling [template].parse, we simply loop through</span>
<span class="cm">*   the buffer filling in slots. . .</span>
<span class="cm">*</span>
<span class="cm">*  Similar to:</span>
<span class="cm">*  ---------------------------</span>
<span class="cm">*   There is a similar function in PHP - see toMessage()</span>
<span class="cm">*</span>
<span class="cm">*   &quot;I %how_much% like %dessert%!&quot;.toMessage( &quot;how_much=really&quot;, &quot;dessert=Ice Cream&quot; );</span>
<span class="cm">*   result  =&gt;  I really like Ice Cream!</span>
<span class="cm">*</span>
<span class="cm">*   For this code call:</span>
<span class="cm">*       var data    = {how_much:&quot;really&quot;, dessert:&quot;Ice Cream&quot;};</span>
<span class="cm">*       var output  = mui.supplant(&quot;I %how_much% like %dessert%!&quot;, data);</span>
<span class="cm">*</span>
<span class="cm">*/</span>
<span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="cm">/**</span>
<span class="cm">     * @description - private, static method used to define the buffer array and prop hash caches for a Template</span>
<span class="cm">     *</span>
<span class="cm">     * @method defineTemplateBuffer</span>
<span class="cm">     * @param {Array}   the buffer array of a Template</span>
<span class="cm">     * @param {object}  the props object of a Template</span>
<span class="cm">     * @param {object}  A regular expression match result, generated from parseTemplate, that defines what markers exist</span>
<span class="cm">     *                  for data binding in a template</span>
<span class="cm">     * @param {string}  A string, generated from parseTemplate, that prefixes the content of the match param.</span>
<span class="cm">     * @private</span>
<span class="cm">     * @static</span>
<span class="cm">     * @return void</span>
<span class="cm">    */</span>
    <span class="kd">function</span> <span class="nx">defineTemplateBuffer</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="nx">props</span><span class="p">,</span> <span class="nx">match</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">)</span>  <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/</span><span class="p">,</span>
            <span class="nx">before</span>  <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
            <span class="nx">match2</span>  <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
            <span class="nx">expr</span>    <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
            <span class="nx">newMatch</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">before</span>  <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
            <span class="nx">match2</span>  <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
            <span class="nx">expr</span>    <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">before</span> <span class="o">==</span> <span class="s1">&#39;\\&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">buffer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">match2</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">props</span><span class="p">[</span><span class="nx">match2</span><span class="p">])</span>
                <span class="nx">props</span><span class="p">[</span><span class="nx">match2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>

            <span class="nx">props</span><span class="p">[</span><span class="nx">match2</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nx">newMatch</span> <span class="o">=</span> <span class="nx">pattern</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">expr</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">newMatch</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">buffer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">before</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">props</span><span class="p">[</span><span class="nx">expr</span><span class="p">])</span>
            <span class="nx">props</span><span class="p">[</span><span class="nx">expr</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="nx">props</span><span class="p">[</span><span class="nx">expr</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
        <span class="nx">buffer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">before</span><span class="p">,</span> <span class="nx">expr</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/**</span>
<span class="cm">     * @description - private, static method used evaluate the string markers to be for data-binding in a Template</span>
<span class="cm">     *</span>
<span class="cm">     * @method parseTemplate</span>
<span class="cm">     * @param {string} the original template string with markers</span>
<span class="cm">     * @param {RegEx} the pattern to match for markers, defaults to Template.DEFAULT_PATTERN (e.g. matches, #{varName})</span>
<span class="cm">     * @param {Array} the buffer array of a Template</span>
<span class="cm">     * @param {object}  the props object of a Template</span>
<span class="cm">     * @private</span>
<span class="cm">     * @static</span>
<span class="cm">     * @return void</span>
<span class="cm">    */</span>
    <span class="kd">function</span> <span class="nx">parseTemplate</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span> <span class="nx">pattern</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">match</span><span class="p">,</span> <span class="nx">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="nx">source</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">source</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">idx</span> <span class="o">=</span> <span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="p">;</span>
                <span class="nx">defineTemplateBuffer</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="nx">props</span><span class="p">,</span> <span class="nx">match</span><span class="p">,</span> <span class="nx">source</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">idx</span><span class="p">));</span>
                <span class="nx">source</span>  <span class="o">=</span> <span class="nx">source</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">buffer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span>
                <span class="nx">source</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">cstr</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">S</span> <span class="o">=</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">str</span><span class="p">;</span>
    
        <span class="k">switch</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="s2">&quot;string&quot;</span><span class="o">:</span> <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
            <span class="k">case</span> <span class="s2">&quot;number&quot;</span><span class="o">:</span> <span class="k">return</span> <span class="nx">S</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
        <span class="nx">str</span> <span class="o">=</span> <span class="nx">S</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="cm">/**</span>
<span class="cm">     * @description - private, static method used evaluate the string markers to be for data-binding in a Template</span>
<span class="cm">     *</span>
<span class="cm">     * @method Template (constructor)</span>
<span class="cm">     * @param {string} the original template string with markers</span>
<span class="cm">     * @param {RegEx} the pattern to match for markers, defaults to Template.DEFAULT_PATTERN (e.g. matches, #{varName})</span>
<span class="cm">     * @public</span>
<span class="cm">     * @return {object} Template instance</span>
<span class="cm">    */</span>
    <span class="kd">function</span> <span class="nx">Template</span><span class="p">(</span><span class="nx">template</span><span class="p">,</span> <span class="nx">pattern</span><span class="p">)</span>  <span class="p">{</span>
        
        <span class="kd">var</span> <span class="nx">regArgs</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>

        <span class="nx">template</span>        <span class="o">=</span> <span class="nx">cstr</span><span class="p">(</span><span class="nx">template</span><span class="p">);</span>
        <span class="nx">pattern</span>         <span class="o">=</span> <span class="nx">pattern</span> <span class="o">||</span> <span class="nx">Template</span><span class="p">.</span><span class="nx">DEFAULT_PATTERN</span><span class="p">;</span>

        <span class="cm">/**</span>
<span class="cm">         * @description - private, instance property used to find markers in a string for data binding</span>
<span class="cm">         *</span>
<span class="cm">         * @property Template::privMe.pattern</span>
<span class="cm">         * @type {RegEx}</span>
<span class="cm">        */</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">pattern</span>  <span class="o">=</span> <span class="nx">pattern</span><span class="p">;</span>

        <span class="cm">/**</span>
<span class="cm">         * @description - private, instance property, the original string that contains markers for data binding</span>
<span class="cm">         *</span>
<span class="cm">         * @propery Template::privMe.template</span>
<span class="cm">         * @type {string}</span>
<span class="cm">        */</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">template</span><span class="p">;</span>

        <span class="cm">/**</span>
<span class="cm">         * @description - private, instance property, an array that contains the substrings of the original template, and empty string place holders</span>
<span class="cm">         *                for data.  This gets filled out from the constructor or via calling Template::parse</span>
<span class="cm">         *</span>
<span class="cm">         * @property Template::privMe.buffer</span>
<span class="cm">         * @type {Array}</span>
<span class="cm">        */</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">buffer</span>   <span class="o">=</span> <span class="p">[];</span>

        <span class="cm">/**</span>
<span class="cm">         * @description - private, instance property, an object that contains the arrays of indexes into the buffer for where data values should go.</span>
<span class="cm">         *                This gets filled out from the constructor or via calling Template::parse. The object is keyed by the var/expressions in the</span>
<span class="cm">         *                the template. For example a string for a template like &quot;#{foobar}&quot; means that this object will have props[&quot;foobar&quot;] == Array,</span>
<span class="cm">         *                and each index of the array will be an index to be filled out in the buffer.</span>
<span class="cm">         *</span>
<span class="cm">         * @property Template::privMe.props</span>
<span class="cm">         * @type {object}</span>
<span class="cm">        */</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">props</span>    <span class="o">=</span> <span class="p">{};</span>
    <span class="p">}</span>

    <span class="cm">/**</span>
<span class="cm">     * @description - public, static property, the RegExp used to match a marker in a template string.  By default, a Template instance</span>
<span class="cm">     *                uses this RegExp, and therefore accepts strings that look like &quot;Hello World %{myData}&quot;</span>
<span class="cm">     *</span>
<span class="cm">     *                It is public, but is intended to be used as a constant (hence the all caps notation).</span>
<span class="cm">     *</span>
<span class="cm">     * @property Template::DEFAULT_PATTERN</span>
<span class="cm">     * @type {RegExp}</span>
<span class="cm">     * @public</span>
<span class="cm">     * @static</span>
<span class="cm">    */</span>
    <span class="nx">Template</span><span class="p">.</span><span class="nx">DEFAULT_PATTERN</span>    <span class="o">=</span> <span class="sr">/(^|.|\r|\n)(%\{(.*?)\})/</span><span class="p">;</span>

    <span class="cm">/**</span>
<span class="cm">     * @description - public, static property, the RegExp used to match a marker in a template string.  This expression</span>
<span class="cm">     *                is used for the typical sprintf format from c. (e.g. &quot;Hello {user}&quot;);</span>
<span class="cm">     *</span>
<span class="cm">     * @property Template::SPRINTF_PATTERN</span>
<span class="cm">     * @type {RegExp}</span>
<span class="cm">     * @public</span>
<span class="cm">     * @static</span>
<span class="cm">    */</span>
    <span class="nx">Template</span><span class="p">.</span><span class="nx">SPRINTF_PATTERN</span>    <span class="o">=</span> <span class="sr">/(^|.|\r|\n)(\{(.*?)\})/</span><span class="p">;</span>

    <span class="cm">/**</span>
<span class="cm">     * @description - public method used to bind data in the string or echo the template itself.</span>
<span class="cm">     *</span>
<span class="cm">     * @method [Template].toString, [Template].valueOf</span>
<span class="cm">     * @param {obj} (optional) if obj present, the properties and values will be replaced in the template</span>
<span class="cm">     *              otherwise this will just return the original template string with no data replaced.</span>
<span class="cm">     * @public</span>
<span class="cm">     * @return {string} with or without, formatted data</span>
<span class="cm">    */</span>
    <span class="nx">Template</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span>     <span class="o">=</span>
    <span class="nx">Template</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">valueOf</span>      <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">,</span> <span class="nx">props</span><span class="p">,</span> <span class="nx">propName</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span>
            <span class="nx">indexes</span><span class="p">,</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="nx">val</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span> <span class="o">||</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">);</span>

            <span class="nx">buffer</span>  <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">;</span>
            <span class="nx">props</span>   <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">buffer</span> <span class="o">&amp;&amp;</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="nx">propName</span> <span class="k">in</span>  <span class="nx">props</span><span class="p">)</span>  <span class="p">{</span>
                    <span class="nx">val</span>     <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">propName</span><span class="p">];</span>
                    <span class="nx">indexes</span> <span class="o">=</span> <span class="nx">props</span><span class="p">[</span><span class="nx">propName</span><span class="p">];</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">indexes</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="nx">len</span> <span class="o">=</span> <span class="nx">indexes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
                        <span class="k">while</span> <span class="p">(</span><span class="nx">len</span><span class="o">--</span><span class="p">)</span>
                            <span class="nx">buffer</span><span class="p">[</span><span class="nx">indexes</span><span class="p">[</span><span class="nx">idx</span><span class="o">++</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>

                    <span class="p">}</span>
                    
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="nx">ret</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">ret</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">data</span>  <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>

        <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/**</span>
<span class="cm">     * @description - public method used to redefine the template string, creating the private buffer and prop instance properties</span>
<span class="cm">     *</span>
<span class="cm">     * @method [Template].parse</span>
<span class="cm">     * @param {string} template</span>
<span class="cm">     * @public</span>
<span class="cm">    */</span>
    <span class="nx">Template</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">parse</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">template</span> <span class="p">)</span> <span class="p">{</span> 
        <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">template</span>    <span class="o">=</span> <span class="nx">cstr</span><span class="p">(</span><span class="nx">template</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">template</span> <span class="o">&amp;&amp;</span> <span class="nx">template</span> <span class="o">!=</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">template</span>  <span class="o">=</span> <span class="nx">template</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">buffer</span>    <span class="o">=</span> <span class="p">[];</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">props</span>     <span class="o">=</span> <span class="p">{};</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">data</span>      <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">parseTemplate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">pattern</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="kd">var</span> <span class="nx">HTMLTEMPLATES</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="kd">var</span> <span class="nx">STRINGTEMPLATES</span> <span class="o">=</span> <span class="p">{};</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">supplant</span><span class="p">){</span>
        <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">supplant</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">cacheOff</span> <span class="p">)</span> <span class="p">{</span>            
            <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">STRINGTEMPLATES</span><span class="p">[</span> <span class="k">this</span> <span class="p">];</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">template</span><span class="p">){</span>                
                <span class="nx">template</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Template</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">Template</span><span class="p">.</span><span class="nx">SPRINTF_PATTERN</span> <span class="p">);</span>
                <span class="nx">template</span><span class="p">.</span><span class="nx">parse</span><span class="p">();</span>
                
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cacheOff</span><span class="p">)</span>
                    <span class="nx">STRINGTEMPLATES</span><span class="p">[</span><span class="k">this</span><span class="p">]</span> <span class="o">=</span> <span class="nx">template</span><span class="p">;</span>
            <span class="p">}</span>
                        
            <span class="k">return</span> <span class="nx">template</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">(</span> <span class="nx">data</span> <span class="p">);</span>
        <span class="p">};</span>  
    <span class="p">}</span>
       
    <span class="k">return</span> <span class="p">{</span>
        
        <span class="cm">/**</span>
<span class="cm">         * </span>
<span class="cm">         * @method map</span>
<span class="cm">         * </span>
<span class="cm">         * @param el {String|HTMLElement} The CSS selector or DOM node to map to. The template element must contain an Id.</span>
<span class="cm">         * @param data {Object} The object to map</span>
<span class="cm">         * @param nodeName {String} The tag name of the newly created DOM node</span>
<span class="cm">         * @param nodeConfig {Object} Object literal of node configuration passed to mui.createElement</span>
<span class="cm">         */</span>
        <span class="nx">map</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">el</span><span class="p">,</span> <span class="nx">nodeName</span><span class="p">,</span> <span class="nx">nodeConfig</span><span class="p">){</span>
            <span class="kd">var</span> <span class="nx">node</span><span class="p">,</span> <span class="nx">templateId</span><span class="p">,</span>
                <span class="nx">template</span><span class="p">,</span> <span class="nx">html</span><span class="p">,</span>
                <span class="nx">res</span><span class="p">;</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">){</span>
                <span class="nx">node</span> <span class="o">=</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">el</span> <span class="p">);</span>
                <span class="nx">templateId</span> <span class="o">=</span> <span class="nx">el</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">node</span> <span class="o">=</span> <span class="nx">el</span><span class="p">;</span>
                <span class="nx">templateId</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">node</span><span class="p">){</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>            
            
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">templateId</span><span class="p">){</span>
                <span class="nx">mui</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;map(): templateId must be a string&quot;</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            
            <span class="nx">template</span> <span class="o">=</span> <span class="nx">HTMLTEMPLATES</span><span class="p">[</span><span class="nx">templateId</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">template</span><span class="p">){</span>
                <span class="nx">html</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\-\-\&gt;)|(\&lt;\!\-\-)/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
                
                <span class="nx">template</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Template</span><span class="p">(</span> <span class="nx">html</span><span class="p">,</span> <span class="nx">Template</span><span class="p">.</span><span class="nx">DEFAULT_PATTERN</span> <span class="p">);</span>
                <span class="nx">template</span><span class="p">.</span><span class="nx">parse</span><span class="p">();</span>
                
                <span class="nx">HTMLTEMPLATES</span><span class="p">[</span><span class="nx">templateId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">template</span><span class="p">;</span>
            <span class="p">}</span>
            
            <span class="nx">nodeConfig</span> <span class="o">=</span> <span class="nx">nodeConfig</span> <span class="o">||</span> <span class="p">{};</span>
            <span class="c1">// copy classes from source node</span>
            <span class="nx">nodeConfig</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="nx">nodeConfig</span><span class="p">.</span><span class="nx">className</span> <span class="o">?</span> <span class="nx">nodeConfig</span><span class="p">.</span><span class="nx">className</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span>  <span class="nx">node</span><span class="p">.</span><span class="nx">className</span> <span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">className</span><span class="p">;</span>
            
            <span class="nx">res</span> <span class="o">=</span> <span class="nx">nodeName</span> <span class="o">?</span> <span class="nx">mui</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">nodeName</span><span class="p">,</span> <span class="nx">nodeConfig</span><span class="p">)</span> <span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">nodeName</span><span class="p">)</span> <span class="nx">res</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
            
            <span class="nx">res</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">template</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">(</span> <span class="nx">data</span> <span class="p">);</span>
            
            <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
        <span class="p">},</span>
        
         <span class="cm">/**</span>
<span class="cm">         * </span>
<span class="cm">         * @method template</span>
<span class="cm">         * </span>
<span class="cm">         * @param str {String} The CSS selector or DOM node to map to. The template element must contain an Id.</span>
<span class="cm">         * @param data {Object} The object to map</span>
<span class="cm">         * @param cacheOff {Boolean} (Optional) if set to true the patter will not be cached, </span>
<span class="cm">         *                 good for random strings that will not be repeated.</span>
<span class="cm">         *  </span>
<span class="cm">         */</span>
        <span class="nx">supplant</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">cacheOff</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">supplant</span><span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">cacheOff</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">}();</span>



<span class="c1">// Define mui</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">util</span><span class="p">);</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">dom</span><span class="p">);</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">anim</span><span class="p">);</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">fx</span><span class="p">);</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">ajax</span><span class="p">);</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">oop</span><span class="p">);</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">env</span><span class="p">);</span>
<span class="nx">oop</span><span class="p">.</span><span class="nx">augment</span><span class="p">(</span><span class="nx">mui</span><span class="p">,</span> <span class="nx">template</span><span class="p">);</span>

<span class="p">})();</span>
</pre></div>
                    </div>
			</div>
		</div>
		<div class="yui-b">
            <div class="nav">

                    <div id="moduleList" class="module">
                        <h4>Modules</h4>
                        <ul class="content">
                                <li class=""><a href="module_actionsheet.html" title="actionsheet">actionsheet</a></li>
                                <li class=""><a href="module_ajax.html" title="ajax">ajax</a></li>
                                <li class=""><a href="module_anim.html" title="anim">anim</a></li>
                                <li class=""><a href="module_button.html" title="button">button</a></li>
                                <li class=""><a href="module_datasource.html" title="datasource">datasource</a></li>
                                <li class=""><a href="module_dom.html" title="dom">dom</a></li>
                                <li class="selected"><a href="module_env.html" title="env">env</a></li>
                                <li class=""><a href="module_event.html" title="event">event</a></li>
                                <li class=""><a href="module_fx.html" title="fx">fx</a></li>
                                <li class=""><a href="module_geo.html" title="geo">geo</a></li>
                                <li class=""><a href="module_navigator.html" title="navigator">navigator</a></li>
                                <li class=""><a href="module_oop.html" title="oop">oop</a></li>
                                <li class=""><a href="module_pager.html" title="pager">pager</a></li>
                                <li class=""><a href="module_scroll-view.html" title="scroll-view">scroll-view</a></li>
                                <li class=""><a href="module_search-box.html" title="search-box">search-box</a></li>
                                <li class=""><a href="module_storage.html" title="storage">storage</a></li>
                                <li class=""><a href="module_tab-view.html" title="tab-view">tab-view</a></li>
                                <li class=""><a href="module_test.html" title="test">test</a></li>
                                <li class=""><a href="module_transition.html" title="transition">transition</a></li>
                                <li class=""><a href="module_util.html" title="util">util</a></li>
                                <li class=""><a href="module_web-app.html" title="web-app">web-app</a></li>
                        </ul>
                    </div>

                    <div id="classList" class="module">
                        <h4>Classes</h4>
                        <ul class="content">
                                <li class=""><a href="Env.html" title="Env">Env</a></li>
                                <li class=""><a href="Env.html" title="Env">Env</a></li>
                        </ul>
                    </div>

                    <div id="fileList" class="module">
                        <h4>Files</h4>
                        <ul class="content">        
                                <li class="selected"><a href="mui.js.html" title="mui.js">mui.js</a></li>
                                <li class=""><a href="test.js.html" title="test.js">test.js</a></li>
                        </ul>
                    </div>





            </div>
		</div>
	</div>
	<div id="ft">
		<div>
        	Copyright &copy; 2010 Yahoo! Inc. All rights reserved.
		</div>
	</div>
</div>
<script type="text/javascript">
    ALL_YUI_PROPS = [{"url": "Env.html#method_[Template].parse", "access": "", "host": "Env", "type": "method", "name": "[Template].parse"}, {"url": "Env.html#method_[Template].parse", "access": "", "host": "Env", "type": "method", "name": "[Template].parse"}, {"url": "Env.html#method_[Template].toString, [Template].valueOf", "access": "", "host": "Env", "type": "method", "name": "[Template].toString, [Template].valueOf"}, {"url": "Env.html#method_[Template].toString, [Template].valueOf", "access": "", "host": "Env", "type": "method", "name": "[Template].toString, [Template].valueOf"}, {"url": "Env.html#method_defineTemplateBuffer", "access": "private", "host": "Env", "type": "method", "name": "defineTemplateBuffer"}, {"url": "Env.html#method_defineTemplateBuffer", "access": "private", "host": "Env", "type": "method", "name": "defineTemplateBuffer"}, {"url": "Env.html#method_map", "access": "", "host": "Env", "type": "method", "name": "map"}, {"url": "Env.html#method_map", "access": "", "host": "Env", "type": "method", "name": "map"}, {"url": "Env.html#method_parseTemplate", "access": "private", "host": "Env", "type": "method", "name": "parseTemplate"}, {"url": "Env.html#method_parseTemplate", "access": "private", "host": "Env", "type": "method", "name": "parseTemplate"}, {"url": "Env.html#property_template", "access": "", "host": "Env", "type": "property", "name": "template"}, {"url": "Env.html#method_template", "access": "", "host": "Env", "type": "method", "name": "template"}, {"url": "Env.html#property_template", "access": "", "host": "Env", "type": "property", "name": "template"}, {"url": "Env.html#method_template", "access": "", "host": "Env", "type": "method", "name": "template"}, {"url": "Env.html#method_Template (constructor)", "access": "", "host": "Env", "type": "method", "name": "Template (constructor)"}, {"url": "Env.html#method_Template (constructor)", "access": "", "host": "Env", "type": "method", "name": "Template (constructor)"}, {"url": "Env.html#property_Template::DEFAULT_PATTERN", "access": "", "host": "Env", "type": "property", "name": "Template::DEFAULT_PATTERN"}, {"url": "Env.html#property_Template::DEFAULT_PATTERN", "access": "", "host": "Env", "type": "property", "name": "Template::DEFAULT_PATTERN"}, {"url": "Env.html#property_Template::privMe.buffer", "access": "", "host": "Env", "type": "property", "name": "Template::privMe.buffer"}, {"url": "Env.html#property_Template::privMe.buffer", "access": "", "host": "Env", "type": "property", "name": "Template::privMe.buffer"}, {"url": "Env.html#property_Template::privMe.pattern", "access": "", "host": "Env", "type": "property", "name": "Template::privMe.pattern"}, {"url": "Env.html#property_Template::privMe.pattern", "access": "", "host": "Env", "type": "property", "name": "Template::privMe.pattern"}, {"url": "Env.html#property_Template::privMe.props", "access": "", "host": "Env", "type": "property", "name": "Template::privMe.props"}, {"url": "Env.html#property_Template::privMe.props", "access": "", "host": "Env", "type": "property", "name": "Template::privMe.props"}, {"url": "Env.html#property_Template::SPRINTF_PATTERN", "access": "", "host": "Env", "type": "property", "name": "Template::SPRINTF_PATTERN"}, {"url": "Env.html#property_Template::SPRINTF_PATTERN", "access": "", "host": "Env", "type": "property", "name": "Template::SPRINTF_PATTERN"}];
</script>
</body>
</html>
