{"majorversion": 3, "filemap": {"Storage.js": {"classlist": ["ResultSet", "ResultSetRowList", "Transaction", "Storage"], "name": "Storage.js", "module": "storage"}, "NavigationController.js": {"classlist": ["NavigationController"], "name": "NavigationController.js", "module": "web-app"}, "Button.js": {"classlist": ["Button"], "name": "Button.js", "module": "button"}, "DataSource.js": {"classlist": ["DataSource"], "name": "DataSource.js", "module": "datasource"}, "ViewController.js": {"classlist": ["ViewController"], "name": "ViewController.js", "module": "web-app"}, "Geo.js": {"classlist": ["Geo"], "name": "Geo.js", "module": "geo"}, "tests.js": {"classlist": [], "name": "tests.js", "module": "test"}, "TabView.js": {"classlist": ["TabView"], "name": "TabView.js", "module": "tab-view"}, "mui.js": {"classlist": ["Utility", "Dom", "Event", "Animation", "FX", "Ajax", "Oop", "Env"], "name": "mui.js", "module": "env"}, "Navigator.js": {"classlist": ["Navigator"], "name": "Navigator.js", "module": "navigator"}, "ActionSheet.js": {"classlist": ["ActionSheet"], "name": "ActionSheet.js", "module": "actionsheet"}, "NavigationBar.js": {"classlist": ["NavigationBar"], "name": "NavigationBar.js", "module": "navigator"}, "ApplicationController.js": {"classlist": ["ApplicationController"], "name": "ApplicationController.js", "module": "web-app"}, "Transition.js": {"classlist": ["Transition"], "name": "Transition.js", "module": "transition"}, "test.js": {"classlist": ["Test.Case", "Test.Wait", "Test.Suite", "Test.TestNode", "Test.Runner", "Test.Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError", "Assert.ArrayAssert", "Assert.ObjectAssert", "Assert.DateAssert", "Test.Reporter", "Test.Mock"], "name": "test.js", "module": "env"}, "Pager.js": {"classlist": ["Pager"], "name": "Pager.js", "module": "pager"}, "ScrollView.js": {"classlist": ["ScrollView"], "name": "ScrollView.js", "module": "scroll-view"}, "SearchBox.js": {"classlist": ["SearchBox"], "name": "SearchBox.js", "module": "search-box"}}, "modules": {"tab-view": {"description": "TabView module", "submodules": [], "classlist": ["TabView"], "filelist": ["TabView.js"], "subdata": {}, "name": "tab-view"}, "anim": {"description": "Animation methods", "submodules": [], "classlist": ["Animation", "Animation"], "filelist": [], "subdata": {}, "guessedname": "anim", "guessedtype": "property", "name": "anim"}, "scroll-view": {"description": "ScrollView module", "submodules": [], "classlist": ["ScrollView"], "filelist": ["ScrollView.js"], "subdata": {}, "name": "scroll-view"}, "search-box": {"description": "SearchBox module", "submodules": [], "classlist": ["SearchBox"], "filelist": ["SearchBox.js"], "subdata": {}, "name": "search-box"}, "dom": {"description": "DOM methods", "submodules": [], "classlist": ["Dom", "Dom"], "filelist": [], "subdata": {}, "guessedname": "dom", "guessedtype": "property", "name": "dom"}, "fx": {"description": "Effects methods", "submodules": [], "classlist": ["FX", "FX"], "filelist": [], "subdata": {}, "guessedname": "fx", "guessedtype": "property", "name": "fx"}, "pager": {"description": "Pager module", "submodules": [], "classlist": ["Pager"], "filelist": ["Pager.js"], "subdata": {}, "name": "pager"}, "button": {"description": "Button module", "submodules": [], "classlist": ["Button"], "filelist": ["Button.js"], "subdata": {}, "name": "button"}, "storage": {"description": "Storage module", "submodules": [], "classlist": ["ResultSet", "ResultSetRowList", "Transaction", "Storage"], "filelist": ["Storage.js"], "subdata": {}, "name": "storage"}, "actionsheet": {"description": "actionsheet module", "submodules": [], "classlist": ["ActionSheet"], "filelist": ["ActionSheet.js"], "subdata": {}, "name": "actionsheet"}, "transition": {"description": "Transition module", "submodules": [], "classlist": ["Transition"], "filelist": ["Transition.js"], "subdata": {}, "name": "transition"}, "util": {"description": "Utility methods", "submodules": [], "classlist": ["Utility", "Utility"], "filelist": ["mui.js"], "subdata": {}, "guessedname": "util", "guessedtype": "property", "name": "util"}, "ajax": {"description": "AJAX methods", "submodules": [], "classlist": ["Ajax", "Ajax"], "filelist": [], "subdata": {}, "guessedname": "ajax", "guessedtype": "property", "name": "ajax"}, "web-app": {"description": "Application Framework module", "submodules": [], "classlist": ["ApplicationController", "NavigationController", "ViewController"], "filelist": ["ApplicationController.js", "NavigationController.js", "ViewController.js"], "subdata": {}, "name": "web-app"}, "datasource": {"description": "The datasource module", "submodules": [], "classlist": ["DataSource"], "filelist": ["DataSource.js"], "subdata": {}, "name": "datasource"}, "env": {"description": "Client environment methods", "submodules": [], "classlist": ["Env", "Env"], "filelist": ["mui.js", "test.js"], "subdata": {}, "guessedname": "env", "guessedtype": "property", "name": "env"}, "test": {"description": "YUI JavaScript Testing Framework", "submodules": [], "classlist": ["Test.Case", "Test.Wait", "Test.Suite", "Test.TestNode", "Test.Runner", "Test.Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError", "Assert.ArrayAssert", "Assert.ObjectAssert", "Assert.DateAssert", "Test.Reporter", "Test.Mock"], "filelist": ["tests.js"], "subdata": {}, "name": "test"}, "navigator": {"description": "Navigator module", "submodules": [], "classlist": ["NavigationBar", "Navigator"], "filelist": ["NavigationBar.js", "Navigator.js"], "subdata": {}, "name": "navigator"}, "geo": {"description": "GeoLocation module", "submodules": [], "classlist": ["Geo"], "filelist": ["Geo.js"], "subdata": {}, "name": "geo"}, "event": {"description": "Event methods", "submodules": [], "classlist": ["Event", "Event"], "filelist": [], "subdata": {}, "guessedname": "event", "guessedtype": "function", "name": "event"}, "oop": {"description": "Object-Oriented programming helpers", "submodules": [], "classlist": ["Oop", "Oop"], "filelist": [], "subdata": {}, "guessedname": "oop", "guessedtype": "property", "name": "oop"}}, "classmap": {"FX": {"name": "FX", "namespace": "", "module": "fx", "methods": {"reflect": {"param": "img {HTMLElement} The <img> element.", "params": [{"type": "HTMLElement", "name": "img", "description": "  The <img> element."}], "description": "Apply a reflection directly underneath a given image.", "guessedname": "reflect", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "FX", "description": "FX class"}, "ViewController": {"name": "ViewController", "constructors": [{"params": [{"type": "Object", "name": "definition", "description": "  View controller definition"}], "description": "ViewController class\nThis class provides the behavior layer for one screen of the app.\nAll built-in view controller classes and any custom\nview controller classes inherit from this class."}], "namespace": "", "module": "web-app", "methods": {"showModalViewController": {"params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to show"}], "description": "Show a modal viewController.", "guessedname": "showModalViewController", "guessedtype": "function"}, "_viewDidLoad": {"private": "", "description": "Trigger the callback sequence for when the view contents have\nbeen loaded", "guessedname": "_viewDidLoad", "guessedtype": "function"}, "_viewWillDisappear": {"guessedname": "_viewWillDisappear", "params": [{"type": "Boolean", "name": "popping", "description": "  used to determine if the view is being popped"}], "description": "View Disappear callback is fired before every time the view is taken \noff-screen", "private": "", "guessedtype": "function"}, "dismissModalViewController": {"description": "Dismiss the currently showing modal viewController from the view.", "guessedname": "dismissModalViewController", "guessedtype": "function"}, "viewDidLoad": {"description": "View Load callback is fired every time the view is first loaded", "guessedname": "viewDidLoad", "guessedtype": "function"}, "disappear": {"description": "Hide the view's contents", "guessedname": "disappear", "guessedtype": "function"}, "presentModalViewController": {"params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to show"}, {"type": "Object", "name": "params", "description": "  (Optional) Any request params to pass to the ViewController"}, {"type": "Boolean", "name": "animated", "description": "  (Default true) Whether or not to animate the controller into view"}], "description": "Present a ViewController modally. If animated, the transition is defined\nby the modal view controller's transition property.", "guessedname": "presentModalViewController", "guessedtype": "function"}, "appear": {"description": "Make the view's contents visible", "guessedname": "appear", "guessedtype": "function"}, "setViewContent": {"params": [{"type": "String|HTMLElement", "name": "content", "description": "  the HTML String or HTMLElement"}], "description": "Set the content for the view, either in the form of an HTML string, or an\nHTMLElement which will be appended to the view. This method triggers the\nviewDidLoad callback.", "guessedname": "setViewContent", "guessedtype": "function"}, "getTransition": {"return": {"type": "Object", "description": "Object literal containing type, direction values"}, "description": "This method defines the transition which will occur when this \nviewController is set to appear on-screen. By default, if the\nviewController belongs to a navigationController, the transition\nwill be a \"push\". To define a different transition, override this\nmethod in the viewController.", "guessedname": "getTransition", "guessedtype": "function"}, "_onModalTransitionEnd": {"guessedname": "_onModalTransitionEnd", "params": [{"type": "Boolean", "name": "dismissed", "description": "  If true, the view controller was just dismissed"}], "description": "Callback triggered when the view controller has finished animating in or out", "private": "", "guessedtype": "function"}, "_viewDidAppear": {"private": "", "description": "View Appear callback is fired every time the view is pushed\non-screen", "guessedname": "_viewDidAppear", "guessedtype": "function"}, "fetchViewContent": {"params": [{"type": "String", "name": "url", "description": "  The URL of the view content"}, {"type": "Function", "name": "callback", "description": "  Optional callback function invoked upon\nXHR completion"}], "description": "Fetch view content using mui.io. This method will trigger\nthe viewDidLoad callback upon success", "guessedname": "fetchViewContent", "guessedtype": "function"}, "isViewLoadedWithParams": {"return": {"type": "", "description": "Boolean indicating if the view has been loaded."}, "params": [{"type": "Object", "name": "params", "description": "  The params object"}], "description": "Check to see whether the view with a a given set of params has been loaded or not.", "guessedname": "isViewLoadedWithParams", "guessedtype": "function"}, "map": {"params": [{"type": "Object", "name": "data", "description": "  The object to map"}, {"type": "String|HTMLElement", "name": "el", "description": "  The CSS selector or DOM node to map to"}, {"type": "String", "name": "nodeName", "description": "  The tag name of the newly created DOM node"}, {"type": "Object", "name": "nodeConfig", "description": "  Object literal of node configuration passed to mui.createElement"}], "description": "Map an Object to a DOM node. The DOM node is assumed to have an HTML comment\nto avoid fetching of malfrormed resources via <img> or background-image: url()", "guessedname": "map", "guessedtype": "function"}, "isViewLoaded": {"return": {"type": "", "description": "Boolean indicating if the view has been loaded."}, "description": "Check to see whether the view has been loaded or not.", "guessedname": "isViewLoaded", "guessedtype": "function"}, "_viewDidDisappear": {"private": "", "description": "View Disappear callback is fired every time the view is taken \noff-screen", "guessedname": "_viewDidDisappear", "guessedtype": "function"}, "animateModalViewController": {"params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to aniamte"}, {"type": "Object", "name": "transition", "description": "  mui.Transition definition"}], "description": "Animate a modal viewController into view.", "guessedname": "animateModalViewController", "guessedtype": "function"}, "loadView": {"params": [{"type": "Object", "name": "params", "description": "  Any request params"}], "description": "Load the view contents.  Override this method\nin implementation", "guessedname": "loadView", "guessedtype": "function"}, "appendViewContent": {"params": [{"type": "String|HTMLElement", "name": "content", "description": "  the HTML String or HTMLElement"}], "description": "Append content for the view, either in the form of an HTML string, or an\nHTMLElement which will be appended to the view. This method DOES NOT trigger\nviewDidLoad callback.", "guessedname": "appendViewContent", "guessedtype": "function"}, "setView": {"params": [{"type": "String|HTMLElement", "name": "el", "description": "  Selector string or HTML element for the view"}, {"type": "Boolean", "name": "isLoaded", "description": "  Whether or not the HTML element is loaded. Default is false."}], "description": "Set the root node for the view. If the second argument passed to the\nmethod is true, then it is assumed the node is already loaded. Otherwise,\none must use setViewContent to trigger the viewDidLoad callback.", "guessedname": "setView", "guessedtype": "function"}, "_viewWillAppear": {"private": "", "description": "View Appear callback is fired before every time the view is pushed\non-screen", "guessedname": "_viewWillAppear", "guessedtype": "function"}, "unloadView": {"description": "Unload the view contents. This just sets the _viewLoaded property to false", "guessedname": "unloadView", "guessedtype": "function"}, "prependViewContent": {"params": [{"type": "String|HTMLElement", "name": "content", "description": "  the HTML String or HTMLElement"}], "description": "Prepend content for the view, either in the form of an HTML string, or an\nHTMLElement which will be appended to the view. This method DOES NOT trigger\nviewDidLoad callback.", "guessedname": "prependViewContent", "guessedtype": "function"}, "setNavigationItem": {"params": [{"type": "String", "name": "section", "description": "  Which section to set the navigation item in\nPossible values are leftBarItem, titleItem, rightBarItem"}, {"type": "*", "name": "item", "description": "  Either an HTMLElement, or a mui control, such as a SearchBox"}], "description": "Set a navigation item to be displayed in the navigation bar", "guessedname": "setNavigationItem", "guessedtype": "function"}, "reoladView": {"params": [{"type": "Object", "name": "params", "description": "  Request parameters"}], "description": "Reload the contents of the view. This method will be called by the framework\nwhen this ViewController has been pushed onto a navigation stack, and later\nvisited with a different set of request parameters.", "guessedname": "reloadView", "guessedtype": "function"}, "navigationItems": {"type": "Object", "description": "The navigationItems property is used to allow view controllers to specify\nthe contents for the navigation-bar. There are 3 possible locations for \nnavigation items.  Left (back button), Center (title), Right (custom view).\nYou can use the viewWillAppear callback to set navigation items for a \nview controller.\nSee: http://developer.apple.com/iphone/library/featuredarticles/ViewControllerPGforiPhoneOS/UsingNavigationControllers/UsingNavigationControllers.html#//apple_ref/doc/uid/TP40007457-CH7-SW1\nfor a detailed explanation of navigation item's in context of native \niPhone development, as the rules are similar.", "guessedname": "navigationItems", "guessedtype": "property"}, "fetchJSON": {"params": [{"type": "String", "name": "url", "description": "  The url of the resource"}, {"type": "Function", "name": "callback", "description": "  The callback function to execute when the resource has loaded"}, {"type": "Object", "name": "scope", "description": "  The scope to be applied to the callback function."}], "description": "Utility method for fetching a JSON resource.", "guessedname": "fetchJSON", "guessedtype": "function"}}, "file": "ViewController.js", "shortname": "ViewController", "properties": {"persistView": {"default": "true", "type": "Boolean", "description": "Flag to determine if ViewController should be persisted. If set to\nfalse, then this ViewController will not be restored when the\nnavigationController's stack is restored", "guessedname": "persistView", "guessedtype": "property"}, "reloadOnPush": {"default": "false", "type": "Boolean", "description": "Flag to determine if ViewController should be reloaded when it \nis pushed into the navigation stack. If set to true then reloadView\nwill be called everytime the view is pushed", "guessedname": "reloadOnPush", "guessedtype": "property"}, "cacheView": {"default": "true", "type": "Boolean", "description": "Flag to determine if ViewController should be cached when it disappears.", "guessedname": "cacheView", "guessedtype": "property"}, "_contentLoaded": {"guessedname": "_contentLoaded", "type": "Boolean", "description": "Flag to determine if view DOM element has been set", "private": "", "guessedtype": "property"}, "_viewLoaded": {"guessedname": "_viewLoaded", "type": "Boolean", "description": "Flag to determine if view data has been loaded", "private": "", "guessedtype": "property"}, "params": {"type": "Object", "description": "Request parameters object", "guessedname": "params", "guessedtype": "property"}, "view": {"type": "HTMLElement", "description": "Root node for the view", "guessedname": "view", "guessedtype": "property"}}, "description": "ViewController class\nThis class provides the behavior layer for one screen of the app.\nAll built-in view controller classes and any custom\nview controller classes inherit from this class."}, "NavigationController": {"name": "NavigationController", "namespace": "", "module": "web-app", "methods": {"getViewController": {"return": {"type": "mui.ViewController", "description": "The viewController, or -1 if not found"}, "params": [{"type": "String", "name": "name", "description": "  The NAME of the viewController"}], "description": "Get a viewController by it's NAME property", "guessedname": "getViewController", "guessedtype": "function"}, "getViewControllerFromStack": {"return": {"type": "mui.ViewController", "description": "The ViewController, if found"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The viewController to search for"}, {"type": "Object", "name": "params", "description": "  Request parameters belonging to the viewController"}, {"type": "Boolean", "name": "ignoreParams", "description": "  Whether or not to check that the params object's are equal"}], "description": "Get a viewController from the stack", "guessedname": "getViewControllerFromStack", "guessedtype": "function"}, "popViewController": {"return": {"type": "mui.ViewController", "description": "The viewController which was popped"}, "params": [{"type": "Boolean", "name": "quiet", "description": "  Set to false to disable the invocation of mui.ApplicationController.openUrl (Default false)"}], "description": "Pop the top viewController off the stack", "guessedname": "popViewController", "guessedtype": "function"}, "initializeNavigationBar": {"description": "Initialize the navigationBar component", "guessedname": "initializeNavigationBar", "guessedtype": "function"}, "pushToViewController": {"return": {"type": "mui.ViewController", "description": "The viewController, if found and pushed"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to push to"}, {"type": "Object", "name": "params", "description": "  The params for the view controller"}, {"type": "Boolean", "name": "quiet", "description": "  Set to false to disable the invocation of mui.ApplicationController.openUrl (Default false)"}], "description": "Push forward to a particulator viewController in the forward stack", "guessedname": "pushToViewController", "guessedtype": "function"}, "getPreviousViewController": {"return": {"type": "mui.ViewController", "description": "The previous viewController"}, "description": "Get the viewcontroller preceding the top view controller", "guessedname": "getPreviousViewController", "guessedtype": "function"}, "requireViewControllers": {"params": [{"type": "Array} Array of viewController info, in the form { NAME: 'myName', params: {} ", "name": "viewControllers", "description": ""}], "description": "Require a set of viewController's in the background. Used when a viewController requires\nother viewControllers to be in the stack before they are loaded themself.", "guessedname": "requireViewControllers", "guessedtype": "function"}, "goBack": {"description": "Method invoked upon click of the back button in the navigation bar", "guessedname": "goBack", "guessedtype": "function"}, "restoreStack": {"params": [{"type": "Array", "name": "stack", "description": "  Array of stacks as stored in database"}], "description": "Restore the stack of viewControllers to the last visited state", "guessedname": "restoreStack", "guessedtype": "function"}, "saveStack": {"description": "Save the current stack to local storage", "guessedname": "saveStack", "guessedtype": "function"}, "popToViewController": {"return": {"type": "mui.ViewController", "description": "The viewController, if found and popped"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to pop to"}, {"type": "Object", "name": "params", "description": "  The params for the view controller"}, {"type": "Boolean", "name": "quiet", "description": "  Set to false to disable the invocation of mui.ApplicationController.openUrl (Default false)"}], "description": "Pop to a particulator viewController in the stack", "guessedname": "popToViewController", "guessedtype": "function"}, "pushViewController": {"return": {"type": "mui.ViewController", "description": "The viewController which was pushed"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController"}, {"type": "Object", "name": "params", "description": "  Any request params to be passed to the viewController"}, {"type": "Boolean", "name": "quiet", "description": "  Set to false to disable the invocation of mui.ApplicationController.openUrl (Default false)"}], "description": "Push a viewController onto the stack", "guessedname": "pushViewController", "guessedtype": "function"}, "getTopViewController": {"return": {"type": "mui.ViewController", "description": "The top viewController"}, "description": "Get the top view controller", "guessedname": "getTopViewController", "guessedtype": "function"}, "viewControllerWillAppear": {"params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The viewController"}], "description": "Callback triggered when viewController is appearing. This is used to\nupdate the contents of the navigation-bar", "guessedname": "viewControllerWillAppear", "guessedtype": "function"}, "getViewControllerFromPoppedStack": {"return": {"type": "mui.ViewController", "description": "The ViewController, if found"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The viewController to search for"}, {"type": "Object", "name": "params", "description": "  Request parameters belonging to the viewController"}, {"type": "Boolean", "name": "ignoreParams", "description": "  Whether or not to check that the params object's are equal"}], "description": "Get a viewController from the popped stack", "guessedname": "getViewControllerFromPoppedStack", "guessedtype": "function"}, "getLastUrl": {"return": {"type": "String", "description": "The URL"}, "description": "Return the last application URL for the top viewController in the stack", "guessedname": "getLastUrl", "guessedtype": "function"}, "_pushToPoppedStack": {"guessedname": "_pushToPoppedStack", "params": [{"type": "Object", "name": "vc", "description": "  The view controller to push"}], "description": "Push a view controller onto the stack of popped view controllers", "private": "", "guessedtype": "function"}, "didClickTitle": {"description": "If the user clicks on the title view of the navigation bar and the view controller\nhas a scroll-view, let's scroll to the top of the scroll view", "guessedname": "didClickTitle", "guessedtype": "function"}, "initialize": {"description": "NavigationController initialization", "guessedname": "initialize", "guessedtype": "function"}, "hideNavigationBar": {"description": "Hide the navigation-bar", "guessedname": "hideNavigationBar", "guessedtype": "function"}, "popToRootViewController": {"description": "Pop to the root viewController in the stack", "guessedname": "popToRootViewController", "guessedtype": "function"}, "initializeStack": {"description": "Initialize the stack", "guessedname": "initializeStack", "guessedtype": "function"}}, "param": "def {Object} NavigationController defintion", "file": "NavigationController.js", "shortname": "NavigationController", "properties": {"scrollViewIdleDelay": {"guessedname": "scrollViewIdleDelay", "static": "", "description": "Idle delay for flashing the scrollview indicators", "private": "", "guessedtype": "property"}, "paramsToString": {"description": "Convert a params object to a string", "private": ""}, "poppedStack": {"type": "Array", "description": "Stack of viewcontroller's which have been popped used to persist\nforward navigation history", "guessedname": "poppedStack", "guessedtype": "property"}, "viewControllers": {"type": "Array", "description": "Array of viewControllers in the navigation hierarchy", "guessedname": "viewControllers", "guessedtype": "property"}, "templateRegExp": {"guessedname": "templateRegExp", "static": "", "description": "Regular expression for template building", "private": "", "guessedtype": "property"}, "navigationBar": {"type": "mui.NavigationBar", "description": "NavigationBar shared by the viewControllers", "guessedname": "navigationBar", "guessedtype": "property"}, "stack": {"type": "Array", "description": "Stack of viewcontroller used to persist navigation history", "guessedname": "stack", "guessedtype": "property"}}, "description": "NavigationController class\nThis class manages a hierarchy of ViewControllers, and \nprovides/manages an instance of NavigationBar."}, "ActionSheet": {"name": "ActionSheet", "constructors": [{"params": [{"type": "Object} ActionSheet commands configuration<br/>\nPossible configuration attributes:<br/>\n<strong>title</strong> (String) - the message displayed at the top of the action sheet when shown<br/>\n<strong>cancelButton</strong> (Object { title, action }) - the text for the cancel button, and URL or function for button activation<br/>\n<strong>destructiveButton</strong> (Object {title, action }) - the text for the destructive button, and URL or function for button activation<br/>\n<storng>otherButtons</strong> (Array) - Array of titles/actions for other buttons, which are shown between the destructive and cancel buttons <br/>\n<br/>\nExample: <br/>\nvar myActionSheet = new mui.ActionSheet({<br/>\ntitle: 'Blah blah blah',<br/>\ncancelButton: { title: 'Cancel' },<br/>\ndestructiveButton: { title: 'Alert!', action: myAlertMethod },<br/>\notherButtons: [<br/>\n{ title: 'Option 1', action: '/options/1' },<br/>\n{ title: 'Option 2', action: myOption2 }<br/>\n]<br/>\n", "name": "config", "description": " );<br/>\nmyActionSheet.show();"}], "description": "<p>\nThe ActionSheet class provides a modal view which slides up from\nthe bottom of the screen with 1 or more buttons, and a message. An example of this\nis in the iPhone Safari Application, when you click the + button, an\naction sheet view is displayed with options to bookmark the page. If the title is present,\nthat is displayed on the top of the aciton sheet. The order of the buttons are as follows:\n</p>\n<ol>\n<li>destructive button (in red)</li>\n<li>other buttons (in gray)</li>\n<li>cancel button (in black)</li>\n</ol>\n<p>\nThe valid configuration attributes are:\n<strong>title, cancelButton, destructiveButton, otherButtons</strong>\n</p>"}], "namespace": "", "module": "actionsheet", "methods": {"hide": {"return": {"type": "ActionSheet", "description": "The ActionSheet instance"}, "description": "Hide the ActionSheet dialog", "guessedname": "hide", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "show": {"return": {"type": "ActionSheet", "description": "The ActionSheet instance"}, "description": "Show the ActionSheet dialog, transitioning from the bottom", "guessedname": "show", "guessedtype": "function"}}, "file": "ActionSheet.js", "shortname": "ActionSheet", "description": "<p>\nThe ActionSheet class provides a modal view which slides up from\nthe bottom of the screen with 1 or more buttons, and a message. An example of this\nis in the iPhone Safari Application, when you click the + button, an\naction sheet view is displayed with options to bookmark the page. If the title is present,\nthat is displayed on the top of the aciton sheet. The order of the buttons are as follows:\n</p>\n<ol>\n<li>destructive button (in red)</li>\n<li>other buttons (in gray)</li>\n<li>cancel button (in black)</li>\n</ol>\n<p>\nThe valid configuration attributes are:\n<strong>title, cancelButton, destructiveButton, otherButtons</strong>\n</p>"}, "Animation": {"name": "Animation", "namespace": "", "module": "anim", "methods": {"animate": {"param": "el {String|Object} The CSS selector string or DOM node.", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}, {"type": "Object} The animation configuration\nOptions are: properties, easing, duration, callback\nExample:\nAnimating a position 100px up and 100px to the left:\nmui.animate('#the-element', {\nproperties: {\ntop: '-100px',\nleft: '-100px',\n},\neasing: 'ease-out',\nduration: '0.5s',\ncallback: {\nonComplete: myFunc\n}\n", "name": "options", "description": " );"}], "description": "Animate an object's position, using webkit transitions.", "guessedname": "animate", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Animation", "description": "Animation class"}, "Env": {"name": "Env", "namespace": "", "module": "env", "methods": {"map": {"params": [{"type": "String|HTMLElement", "name": "el", "description": "  The CSS selector or DOM node to map to. The template element must contain an Id."}, {"type": "Object", "name": "data", "description": "  The object to map"}, {"type": "String", "name": "nodeName", "description": "  The tag name of the newly created DOM node"}, {"type": "Object", "name": "nodeConfig", "description": "  Object literal of node configuration passed to mui.createElement"}], "guessedname": "map", "guessedtype": "function"}, "parseTemplate": {"return": {"type": "", "description": "void"}, "description": "- private, static method used evaluate the string markers to be for data-binding in a Template", "param": "{string} the original template string with markers", "static": "", "private": "", "params": [{"type": "string", "name": "the", "description": " original template string with markers"}, {"type": "RegEx} the pattern to match for markers, defaults to Template.DEFAULT_PATTERN (e.g. matches, #{varName", "name": ")", "description": ""}, {"type": "Array", "name": "the", "description": " buffer array of a Template"}, {"type": "object", "name": "the", "description": " props object of a Template"}]}, "[Template].toString, [Template].valueOf": {"return": {"type": "string", "description": "with or without, formatted data"}, "description": "- public method used to bind data in the string or echo the template itself.", "param": "{obj} (optional) if obj present, the properties and values will be replaced in the template\r\notherwise this will just return the original template string with no data replaced.", "params": [{"type": "obj", "name": "(optional)", "description": " if obj present, the properties and values will be replaced in the template\notherwise this will just return the original template string with no data replaced."}], "guessedname": "toString", "guessedtype": "property", "public": ""}, "Template (constructor)": {"return": {"type": "object", "description": "Template instance"}, "params": [{"type": "string", "name": "the", "description": " original template string with markers"}, {"type": "RegEx} the pattern to match for markers, defaults to Template.DEFAULT_PATTERN (e.g. matches, #{varName", "name": ")", "description": ""}], "public": "", "param": "{string} the original template string with markers", "description": "- private, static method used evaluate the string markers to be for data-binding in a Template"}, "defineTemplateBuffer": {"return": {"type": "", "description": "void"}, "description": "- private, static method used to define the buffer array and prop hash caches for a Template", "param": "{Array}   the buffer array of a Template", "static": "", "private": "", "params": [{"type": "Array", "name": "the", "description": " buffer array of a Template"}, {"type": "object", "name": "the", "description": " props object of a Template"}, {"type": "object", "name": "A", "description": " regular expression match result, generated from parseTemplate, that defines what markers exist\nfor data binding in a template"}, {"type": "string", "name": "A", "description": " string, generated from parseTemplate, that prefixes the content of the match param."}]}, "template": {"param": "str {String} The CSS selector or DOM node to map to. The template element must contain an Id.", "description": "Template is a mechanism for binding data into a string\nExample:\nvar someHTML  = \"<div id='#{myID}'>#{myData}</div>\";\nvar data      = { myID:\"myBox\", myData:\"Hello World\" };\nvar output    = mui.map( data, {someHTML|HTMLElement} );\n//output ==> \"<div id='myBox'>Hello World</div>\";\nNotes:\nSpeed, speed, and more speed:\n---------------------------\nObviously the goal of any piece of code is to be as efficient as possible.\nOften times, you will see code that uses JavaScript's raw [string].replace\nmethods, to do the same thing as above.\nHowever often times your \"template string\" is usuallay HTML or something.\nThis same string is re-used over and over again, and typically you'll see\nengineers just make the replace calls. ..\nHaving to continually run regular expressions on the string is slow and\nsome what point-less if the original \"template string\" doesn't really change,\nall that's changing is the data. . .\nSo the goal was to create a more efficient, single way too manage a \"template string\",\nthat is faster than other implementations like it and faster than continually\ncalling raw replace methods. ..\nWhat this class does under the hood, is split the string up into its pieces,\nusing various Regular Expresion matching. .. similar to what a replace would do.\nIt then stores these pieces privately in a \"buffer\". At the same time it also\nstores the property names/expressions found in the \"template string\", and at\nwhat location(s) they should appear in the buffer.\nThis only needs to be done 1 time per template string. . .(implementations in other\ntoolkits such as Prototype 1.6.03, would do multiple matches/replacements every time\nthe data is passed in).\nThen, when you bind data by calling [template].parse, we simply loop through\nthe buffer filling in slots. . .\nSimilar to:\n---------------------------\nThere is a similar function in PHP - see toMessage()\n\"I %how_much% like %dessert%!\".toMessage( \"how_much=really\", \"dessert=Ice Cream\" );\nresult  =>  I really like Ice Cream!\nFor this code call:\nvar data    = {how_much:\"really\", dessert:\"Ice Cream\"};\nvar output  = mui.supplant(\"I %how_much% like %dessert%!\", data);", "guessedname": "template", "guessedtype": "function"}, "[Template].parse": {"public": "", "params": [{"type": "string", "name": "template", "description": ""}], "description": "- public method used to redefine the template string, creating the private buffer and prop instance properties", "guessedname": "parse", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Env", "properties": {"Template::privMe.pattern": {"type": "{RegEx}", "description": "- private, instance property used to find markers in a string for data binding", "guessedname": "pattern", "guessedtype": "property"}, "Template::SPRINTF_PATTERN": {"description": "- public, static property, the RegExp used to match a marker in a template string.  This expression\nis used for the typical sprintf format from c. (e.g. \"Hello {user}\");", "static": "", "guessedname": "SPRINTF_PATTERN", "guessedtype": "property", "type": "{RegExp}", "public": ""}, "Template::DEFAULT_PATTERN": {"description": "- public, static property, the RegExp used to match a marker in a template string.  By default, a Template instance\nuses this RegExp, and therefore accepts strings that look like \"Hello World %{myData}\"\nIt is public, but is intended to be used as a constant (hence the all caps notation).", "static": "", "guessedname": "DEFAULT_PATTERN", "guessedtype": "property", "type": "{RegExp}", "public": ""}, "Template::privMe.props": {"type": "{object}", "description": "- private, instance property, an object that contains the arrays of indexes into the buffer for where data values should go.\nThis gets filled out from the constructor or via calling Template::parse. The object is keyed by the var/expressions in the\nthe template. For example a string for a template like \"#{foobar}\" means that this object will have props[\"foobar\"] == Array,\nand each index of the array will be an index to be filled out in the buffer.", "guessedname": "props", "guessedtype": "property"}, "template": {"type": "{string}", "propery": "Template::privMe.template", "description": "- private, instance property, the original string that contains markers for data binding", "guessedname": "template", "guessedtype": "property"}, "Template::privMe.buffer": {"type": "{Array}", "description": "- private, instance property, an array that contains the substrings of the original template, and empty string place holders\nfor data.  This gets filled out from the constructor or via calling Template::parse", "guessedname": "buffer", "guessedtype": "property"}}, "description": "Env class"}, "Assert.UnexpectedError": {"name": "Assert.UnexpectedError", "constructors": [{"params": [{"type": "Error", "name": "cause", "description": " The unexpected error that caused this error to be \nthrown."}], "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}], "namespace": "Assert", "module": "test", "guessedname": "UnexpectedError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "UnexpectedError", "properties": {"cause": {"type": "Error", "description": "The unexpected error that occurred.", "guessedname": "cause", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}, "stack": {"type": "String", "description": "Stack information for the error (if provided).", "guessedname": "stack", "guessedtype": "property"}}, "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}, "Test.Runner": {"name": "Test.Runner", "namespace": "Test", "module": "test", "events": {"testcasebegin": {"static": "", "description": "Fires when a test case is opened but before the first \ntest is executed.", "guessedname": "TEST_CASE_BEGIN_EVENT", "guessedtype": "property"}, "testcasecomplete": {"static": "", "description": "Fires when all tests in a test case have been executed.", "guessedname": "TEST_CASE_COMPLETE_EVENT", "guessedtype": "property"}, "begin": {"static": "", "description": "Fires when the run() method is called.", "guessedname": "BEGIN_EVENT", "guessedtype": "property"}, "ignore": {"static": "", "description": "Fires when a test has been ignored.", "guessedname": "TEST_IGNORE_EVENT", "guessedtype": "property"}, "testsuitebegin": {"static": "", "description": "Fires when a test suite is opened but before the first \ntest is executed.", "guessedname": "TEST_SUITE_BEGIN_EVENT", "guessedtype": "property"}, "testsuitecomplete": {"static": "", "description": "Fires when all test cases in a test suite have been\ncompleted.", "guessedname": "TEST_SUITE_COMPLETE_EVENT", "guessedtype": "property"}, "pass": {"static": "", "description": "Fires when a test has passed.", "guessedname": "TEST_PASS_EVENT", "guessedtype": "property"}, "fail": {"static": "", "description": "Fires when a test has failed.", "guessedname": "TEST_FAIL_EVENT", "guessedtype": "property"}, "complete": {"static": "", "description": "Fires when all test suites and test cases have been completed.", "guessedname": "COMPLETE_EVENT", "guessedtype": "property"}}, "methods": {"disableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Disable logging via Y.log(). Test output will not be visible unless\nTestRunner events are subscribed to.", "guessedname": "disableLogging", "guessedtype": "function"}, "_run": {"return": {"type": "Object", "description": "Results of the execution with properties passed, failed, and total."}, "description": "Runs a test case or test suite, returning the results.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function", "params": [{"type": "Y.Test.Case|Y.Test.Suite", "name": "testObject", "description": " The test case or test suite to run."}]}, "isRunning": {"return": {"type": "Boolean", "description": "True if the TestRunner is running, false if not."}, "description": "Indicates that the TestRunner is busy running tests and therefore can't\nbe stopped and results cannot be gathered.", "guessedname": "isRunning", "guessedtype": "function"}, "setName": {"return": {"type": "Void", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The name of the result set."}], "description": "The name assigned to the master suite of the TestRunner. This is the name\nthat is output as the root's name when results are retrieved.", "guessedname": "setName", "guessedtype": "function"}, "getCoverage": {"return": {"type": "Object|String", "description": "Either the coverage object or, if a coverage\nformat is specified, a string representing the results in that format."}, "params": [{"type": "Function", "name": "format", "description": " (Optional) A coverage format to return results in."}], "description": "Returns the coverage report for the files that have been executed.\nThis returns only coverage information for files that have been\ninstrumented using YUI Test Coverage and only those that were run\nin the same pass.", "guessedname": "getCoverage", "guessedtype": "function"}, "_logEvent": {"return": {"type": "Void", "description": ""}, "description": "Logs TestRunner events using Y.log().", "private": "", "static": "", "guessedname": "_logEvent", "guessedtype": "function", "params": [{"type": "Object", "name": "event", "description": " The event object for the event."}]}, "_addTestCaseToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test case to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestCaseToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test case to as a child."}, {"type": "Y.Test.Case", "name": "testCase", "description": " The test case to add."}]}, "getName": {"return": {"type": "String", "description": "The name of the result set."}, "description": "Retrieves the name of the current result set.", "guessedname": "getName", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes the TestRunner after wait() was called.", "static": "", "guessedname": "resume", "guessedtype": "function", "params": [{"type": "Function", "name": "segment", "description": " The function to run as the rest\nof the haulted test."}]}, "getResults": {"return": {"type": "Object|String", "description": "Either the results object or, if a test format is \npassed as the argument, a string representing the results in a specific\nformat."}, "params": [{"type": "Function", "name": "format", "description": " (Optional) A test format to return the results in."}], "description": "Returns the last complete results set from the TestRunner. Null is returned\nif the TestRunner is running or no tests have been run.", "guessedname": "getResults", "guessedtype": "function"}, "enableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Enable logging via Y.log(). Test output is published and can be read via\nlogreader.", "guessedname": "enableLogging", "guessedtype": "function"}, "_buildTestTree": {"return": {"type": "Void", "description": ""}, "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.", "private": "", "static": "", "guessedname": "_buildTestTree", "guessedtype": "function"}, "_addTestSuiteToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestSuiteToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test suite to as a child."}, {"type": "Y.Test.Suite", "name": "testSuite", "description": " The test suite to add."}]}, "_handleTestObjectComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles the completion of a test object's tests. Tallies test results \nfrom one level up to the next.", "private": "", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test object."}], "guessedname": "_handleTestObjectComplete", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the list of test objects to run.", "static": "", "guessedname": "add", "guessedtype": "function", "params": [{"type": "", "name": "testObject", "description": " Either a TestCase or a TestSuite that should be run."}]}, "isWaiting": {"static": "", "return": {"type": "Boolean", "description": "True if the TestRunner is waiting, false if not."}, "description": "Indicates if the TestRunner is waiting for a test to resume", "guessedname": "isWaiting", "guessedtype": "function"}, "_next": {"return": {"type": "TestNode", "description": "The next node in the test tree or null if the end is reached."}, "description": "Retrieves the next node in the test tree.", "private": "", "static": "", "guessedname": "_next", "guessedtype": "function"}, "run": {"return": {"type": "Void", "description": ""}, "description": "Runs the test suite.", "static": "", "guessedname": "run", "guessedtype": "function", "params": [{"type": "Boolean", "name": "oldMode", "description": " (Optional) Specifies that the <= 2.8 way of\ninternally managing test suites should be used."}]}, "_handleError": {"return": {"type": "Void", "description": ""}, "description": "Handles an error as if it occurred within the currently executing\ntest. This is for mock methods that may be called asynchronously\nand therefore out of the scope of the TestRunner. Previously, this\nerror would bubble up to the browser. Now, this method is used\nto tell TestRunner about the error. This should never be called\nby anyplace other than the Mock object.", "private": "", "static": "", "guessedname": "_handleError", "guessedtype": "function", "params": [{"type": "Error", "name": "error", "description": " The error object."}]}, "clear": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Removes all test objects from the runner.", "guessedname": "clear", "guessedtype": "function"}, "_runTest": {"return": {"type": "Void", "description": ""}, "description": "Runs a single test based on the data provided in the node.", "private": "", "static": "", "guessedname": "_runTest", "guessedtype": "function", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test to run."}], "name": "_runTest"}}, "static": "", "file": "test.js", "shortname": "Runner", "properties": {"_running": {"description": "Indicates if the TestRunner is currently running tests.", "private": "", "static": "", "guessedname": "_running", "guessedtype": "property", "type": "Boolean"}, "_root": {"description": "Pointer to the root node in the test tree.", "private": "", "static": "", "guessedname": "_root", "guessedtype": "property", "type": "TestNode"}, "masterSuite": {"type": "Y.Test.Suite", "static": "", "description": "Suite on which to attach all TestSuites and TestCases to be run.", "private": ""}, "_log": {"description": "Indicates if the TestRunner will log events or not.", "private": "", "static": "", "guessedname": "_log", "guessedtype": "property", "type": "Boolean"}, "_waiting": {"description": "Indicates if the TestRunner is waiting as a result of\nwait() being called.", "private": "", "static": "", "guessedname": "_waiting", "guessedtype": "property", "type": "Boolean"}, "_cur": {"description": "Pointer to the current node in the test tree.", "private": "", "static": "", "guessedname": "_cur", "guessedtype": "property", "type": "TestNode"}, "_lastResults": {"description": "Holds copy of the results object generated when all tests are\ncomplete.", "private": "", "static": "", "guessedname": "_lastResults", "guessedtype": "property", "type": "Object"}}, "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results."}, "Assert.ShouldError": {"name": "Assert.ShouldError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}], "namespace": "Assert", "module": "test", "guessedname": "ShouldError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "ShouldError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}, "TabView": {"name": "TabView", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "el", "description": "  CSS Selector or HTMLElement for the tabs container"}, {"type": "Object", "name": "options", "description": "  TabView configuration options"}], "description": "The TabView class provides a tabbed navigation model for related\ncontents. TabViews can be embedded inside the header of a page for\nglobal navigation, or inside the content of the page"}], "namespace": "", "module": "tab-view", "methods": {"setTabContent": {"params": [{"type": "Number", "name": "index", "description": "  The index of the tab"}, {"type": "String|HTMLElement", "name": "tabContent", "description": "  The tabContent element"}], "description": "Set the tabContent for a particular tab at a given index", "guessedname": "setTabContent", "guessedtype": "function"}, "activateTabAtIndex": {"return": {"type": "mui.TabView", "description": "The TabView instance"}, "params": [{"type": "Number", "name": "index", "description": "  The index of the tab to activate"}], "description": "Activate a tab at a given index by activating the selected state of the tab, as well\nas showing any tab content for the tab", "guessedname": "activateTabAtIndex", "guessedtype": "function"}, "handleEvent": {"guessedname": "handleEvent", "params": [{"type": "Event", "name": "e", "description": "  The DOM event"}], "description": "DOM Event handler", "private": "", "guessedtype": "function"}, "tabRefreshed": {"params": [{"type": "Number", "name": "index", "description": "  The index of the selected tab"}], "description": "This method is invoked whenever the currently active tab is reactivated.\nOverride this method in implementation. The first argument to the method\nis the index of the selected tab.", "guessedname": "tabRefreshed", "guessedtype": "function"}, "tabChanged": {"params": [{"type": "Number", "name": "index", "description": "  The index of the selected tab"}], "description": "Tab change event handler which is invoked every time a tab is activated.\nOverride this method in implementation. The first argument to the method\nis the index of the selected tab.", "guessedname": "tabChanged", "guessedtype": "function"}}, "file": "TabView.js", "shortname": "TabView", "properties": {"tabContents": {"type": "Array", "description": "Array of elements which are the contents for each tab", "guessedname": "tabContents", "guessedtype": "property"}, "activeIndex": {"type": "Number", "description": "The index of the currently selected tab", "guessedname": "activeIndex", "guessedtype": "property"}, "element": {"type": "HTMLElement", "description": "The HTMLElement containing the tabs", "guessedname": "element", "guessedtype": "property"}}, "description": "The TabView class provides a tabbed navigation model for related\ncontents. TabViews can be embedded inside the header of a page for\nglobal navigation, or inside the content of the page"}, "Test.TestNode": {"name": "Test.TestNode", "constructors": [{"params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}], "namespace": "Test", "module": "test", "methods": {"appendChild": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "Appends a new test object (TestSuite, TestCase, or test function name) as a child\nof this node.", "guessedname": "appendChild", "guessedtype": "function"}}, "private": "", "file": "test.js", "shortname": "TestNode", "properties": {"testObject": {"type": "Variant", "description": "The TestSuite, TestCase, or test function represented by this node.", "guessedname": "testObject", "guessedtype": "property"}, "parent": {"type": "TestNode", "description": "Pointer to this node's parent.", "guessedname": "parent", "guessedtype": "property"}, "results": {"type": "object", "description": "Test results for this test object.", "guessedname": "results", "guessedtype": "property"}, "firstChild": {"type": "TestNode", "description": "Pointer to this node's first child.", "guessedname": "firstChild", "guessedtype": "property"}, "next": {"type": "TestNode", "description": "Pointer to this node's next sibling.", "guessedname": "next", "guessedtype": "property"}, "lastChild": {"type": "TestNode", "description": "Pointer to this node's last child.", "guessedname": "lastChild", "guessedtype": "property"}}, "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}, "Ajax": {"name": "Ajax", "namespace": "", "module": "ajax", "methods": {"getScript": {"param": "url {String} The url of the scrip", "params": [{"type": "String", "name": "url", "description": "  The url of the scrip"}, {"type": "Function", "name": "callback", "description": "  Callback invoked after script is downloaded"}, {"type": "Object", "name": "scope", "description": "  The context of the callback function"}], "description": "Fetch an external script resource", "guessedname": "getScript", "guessedtype": "function"}, "io": {"return": {"type": "Boolean", "description": "True if el is contained inside the document, false otherwise."}, "description": "XHR wrapper for making asynchronous connections", "param": "url {String} URL endpoint", "params": [{"type": "String", "name": "url", "description": "  URL endpoint"}, {"type": "Object} Configuration options:\nmethod {String}: get, post\ncallback {Object}: Object literal containing the success and failure callback functions,\nas well as the scope to be applied to the callback functions.\nupdate {String|HTMLElement}: If present, the given element will be updated with the result \nof the transaction.\nExample: \nUsing callback function:\nmui.io('/ajax.php', {\nmethod: 'get',\nheaders: [ { 'Content-Type': 'application/x-www-form-urlencoded' }],\ncallback: {\nsuccess: function(o) {\n// do something with o.responseText\n},\nscope: this\n});\nUsing update property:\nmui.io('/ajax.php', {\nmethod: 'get',\nupdate: '#el-to-be-updated'\n", "name": "options", "description": " );"}], "guessedname": "io", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Ajax", "description": "AJAX class"}, "Test.Case": {"name": "Test.Case", "constructors": [{"params": [{"type": "", "name": "template", "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."}], "description": "Test case containing various tests to run."}], "namespace": "Test", "module": "test", "guessedname": "Case", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}, "wait": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."}, {"type": "int", "name": "delay", "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."}], "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.", "guessedname": "wait", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."}], "description": "Resumes a paused test and runs the given function.", "guessedname": "resume", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Case", "properties": {"_should": {"description": "Special rules for the test case. Possible subobjects\nare fail, for tests that should fail, and error, for\ntests that should throw an error.", "guessedname": "_should", "guessedtype": "property"}, "name": {"description": "Name for the test case.", "guessedname": "name", "guessedtype": "property"}}, "description": "Test case containing various tests to run."}, "Test.Mock": {"name": "Test.Mock", "constructors": [{"params": [{"type": "Object", "name": "template", "description": " (Optional) An object whose methods\nshould be stubbed out on the mock object."}], "description": "Creates a new mock object."}], "namespace": "Test", "module": "test", "guessedname": "Mock", "methods": {"verify": {"return": {"type": "void", "description": ""}, "description": "Verifies that all expectations of a mock object have been met and\nthrows an assertion error if not.", "static": "", "guessedname": "verify", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to verify.."}]}, "logInclude": {"description": "mui/tests/tests.js\nTests the core of the mui library\nTODO: test mui.bind", "guessedname": "logInclude", "guessedtype": "function"}, "expect": {"return": {"type": "void", "description": ""}, "description": "Assigns an expectation to a mock object. This is used to create\nmethods and properties on the mock object that are monitored for\ncalls and changes, respectively.", "static": "", "guessedname": "expect", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to add the expectation to."}, {"type": "Object", "name": "expectation", "description": " An object defining the expectation. For\na method, the keys \"method\" and \"args\" are required with\nan optional \"returns\" key available. For properties, the keys\n\"property\" and \"value\" are required."}]}}, "file": "test.js", "guessedtype": "function", "shortname": "Mock", "properties": {"oopTests": {"description": "Test OOP class methods", "guessedname": "oopTests", "guessedtype": "property"}, "utilTests": {"description": "Test Util class methods", "guessedname": "utilTests", "guessedtype": "property"}, "domTests": {"description": "Test DOM class methods", "guessedname": "domTests", "guessedtype": "property"}}, "description": "Creates a new mock object."}, "Assert.UnexpectedValue": {"name": "Assert.UnexpectedValue", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "unexpected", "description": " The unexpected value."}], "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}], "namespace": "Assert", "module": "test", "guessedname": "UnexpectedValue", "methods": {"getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "UnexpectedValue", "properties": {"unexpected": {"type": "Object", "description": "The unexpected value.", "guessedname": "unexpected", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}, "Oop": {"name": "Oop", "namespace": "", "module": "oop", "methods": {"extend": {"return": {"type": "", "description": "The subclass, with properties/methods inherited from superclass"}, "description": "Simple object extension. Static members will not be inherited to the child class.\nThe superclass and constructor properties are added to parent and child classes.", "param": "sub {Object} The subclass", "params": [{"type": "Object", "name": "sub", "description": "  The subclass"}, {"type": "Object", "name": "sup", "description": "  The superclass from which to extend"}, {"type": "Object", "name": "proto", "description": "  prototype properties to add/override"}, {"type": "Object", "name": "stat", "description": "  static properties to add/override"}], "guessedname": "extend", "guessedtype": "function"}, "augment": {"return": {"type": "", "description": "The original object with all the original properties , plus the passed in extensions."}, "description": "Object augmentation takes static properties in the provider object (or an object literal containing augmentation members), and\nadds those as properties of the receiver object.", "param": "obj {Object} The receiver to be augmented", "params": [{"type": "Object", "name": "obj", "description": "  The receiver to be augmented"}, {"type": "Object", "name": "provider", "description": "  The provider object, whose properties will be supplied to the receiver"}, {"type": "Boolean", "name": "ov", "description": "  If true, properties supplied will be overriden on the receiver if already present."}], "guessedname": "augment", "guessedtype": "function"}, "provide": {"param": "ns {String} The namespace. This can be a chained namespace, i.e., \"levelOne.levelTwo.levelThree\"", "params": [{"type": "String", "name": "ns", "description": "  The namespace. This can be a chained namespace, i.e., \"levelOne.levelTwo.levelThree\""}], "description": "Provide a namespace.", "guessedname": "provide", "guessedtype": "function"}, "bind": {"return": {"type": "Function", "description": "the wrapped function"}, "description": "Bind a function to a given context and arguments", "param": "fn {Function} The function to bind", "params": [{"type": "Function", "name": "fn", "description": "  The function to bind"}, {"type": "Object", "name": "ctx", "description": "  The context in which the function will be executed"}, {"type": "", "name": "args*", "description": " 0..n arguments to include before the arguments the \nfunction is executed with"}], "guessedname": "bind", "guessedtype": "function"}, "mix": {"return": {"type": "", "description": "The original object with all the original properties, plus the passed in static extensions."}, "params": [{"type": "Object", "name": "obj", "description": "  The receiver which will accept the extension members"}, {"type": "Object", "name": "ext", "description": "  The provider object, whose static and prototype members will be supplied to the receiver."}, {"type": "Boolean", "name": "ov", "description": "  If true, properties supplied will be overriden on the receiver if already present."}], "description": "Augment an object by adding the static and prototype members of another object. By default, properties/methods\nare not overriden on the receiving object if they already exist. This is equivalent to augment + augmentProto.", "guessedname": "mix", "guessedtype": "function"}, "augmentProto": {"return": {"type": "", "description": "The original object with all the original prototype members, plus the passed in extensions."}, "params": [{"type": "Object", "name": "obj", "description": "  The receiver to be augmented"}, {"type": "Object", "name": "provider", "description": "  The provider object, whose prototype members will be supplied to the receiver"}, {"type": "Boolean", "name": "ov", "description": "  If true, prototype members supplied will be overriden on the receiver if already present."}], "description": "Object prototype augmentation takes prototype members in the provider object and\nadds those as prototype members of the receiver object.", "guessedname": "augmentProto", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Oop", "description": "OOP class"}, "Geo": {"name": "Geo", "namespace": "", "module": "geo", "methods": {"isCapable": {"return": {"type": "Boolean", "description": "Whether or not the device supports location data"}, "description": "Check to see if the device supports location, either via \nHTML5 Location API or Gears.", "guessedname": "isCapable", "guessedtype": "function"}, "getLocation": {"params": [{"type": "Function", "name": "handler", "description": "  A function which will be called upon\na success or failed location lookup. The function will receive\nan array of lat/lon coordinates such as [12.3, 45.6], or false\nif there was an error."}], "description": "Get the user's current location", "guessedname": "getLocation", "guessedtype": "function"}}, "static": "", "file": "Geo.js", "shortname": "Geo", "description": "The Geo Utility allows access to location data for devices which \nhave an on-board GPS. Currently supported methods of extracting \ngeolocation information is via HTML5 Location API or Gears."}, "Transaction": {"name": "Transaction", "constructors": [{"params": [{"type": "Database", "name": "database", "description": "  The Gears database instance"}, {"type": "Function", "name": "error", "description": "  Error handler"}, {"type": "Function", "name": "success", "description": "  Success handler"}], "description": "The Transaction class is a wrapper for Gears which emulates\nthe HTML5 Transaction class."}], "namespace": "", "module": "storage", "guessedname": "Transaction", "methods": {"executeSql": {"params": [{"type": "String", "name": "sql", "description": "  The SQL statement"}, {"type": "Array", "name": "params", "description": "  Array of param values for SQL"}, {"type": "Function", "name": "success", "description": "  Success callback function"}, {"type": "Function", "name": "error", "description": "  Error callback function"}], "description": "Execute a SQL statement", "guessedname": "executeSql", "guessedtype": "function"}}, "file": "Storage.js", "guessedtype": "function", "shortname": "Transaction", "properties": {"_db": {"guessedname": "_db", "type": "Database", "description": "Reference to the Gears database", "private": "", "guessedtype": "property"}}, "description": "The Transaction class is a wrapper for Gears which emulates\nthe HTML5 Transaction class."}, "Test.Suite": {"name": "Test.Suite", "constructors": [{"params": [{"type": "String||Object", "name": "data", "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."}], "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}], "namespace": "Test", "module": "test", "guessedname": "Suite", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Y.Test.Suite||Y.Test.Case", "name": "testObject", "description": " The test suite or test case to add."}], "description": "Adds a test suite or test case to the test suite.", "guessedname": "add", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Suite", "properties": {"items": {"private": "", "description": "Array of test suites and", "guessedname": "items", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the test suite.", "guessedname": "name", "guessedtype": "property"}}, "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}, "Dom": {"name": "Dom", "namespace": "", "module": "dom", "methods": {"getXY": {"return": {"type": "Array", "description": "Array containing the (x,y) coordinates of the element."}, "description": "Get the (x,y) coordinates for a given element.", "param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}], "guessedname": "getXY", "guessedtype": "function"}, "getAncestorBy": {"return": {"type": "", "description": "The ancestor node if found, false otherwise."}, "description": "Get an ancestor node by a comparison function", "param": "node {String|Object} The CSS selector string or DOM node.", "params": [{"type": "String|Object", "name": "node", "description": "  The CSS selector string or DOM node."}, {"type": "Function", "name": "fn", "description": "  The comparison function - return true or false."}, {"type": "Object", "name": "scope", "description": "  The scope of the passed function (optional)"}, {"type": "HTMLElement", "name": "parentNode", "description": "  the top element where to stop the search, body by default"}], "guessedname": "getAncestorBy", "guessedtype": "function"}, "removeClass": {"param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "className", "description": "  The class name."}], "description": "Remove a class name from a DOM node", "guessedname": "removeClass", "guessedtype": "function"}, "insertBefore": {"param": "node {Object}", "params": [{"type": "Object", "name": "node", "description": ""}, {"type": "String|Object", "name": "refNode", "description": "  The CSS selector string or DOM node to insert before"}], "description": "Insert an element before another element in the DOM.", "guessedname": "insertBefore", "guessedtype": "function"}, "get": {"return": {"type": "HTMLElement", "description": "The single element matching the given selector."}, "description": "Find an element by CSS query selector.  If parentNode is passed as second argument,\nthe CSS selector is relative that node.", "param": "selector {String} Valid CSS query selector", "params": [{"type": "String", "name": "selector", "description": "  Valid CSS query selector"}, {"type": "HTMLElement", "name": "parentNode", "description": "  If present, CSS selector is relative to this DOM ndoe."}], "guessedname": "get", "guessedtype": "function"}, "getAncestorByTagName": {"return": {"type": "", "description": "The ancestor node if found, false otherwise."}, "description": "Get an ancestor node by tag name", "param": "node {String|Object} The CSS selector string or DOM node.", "params": [{"type": "String|Object", "name": "node", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "tagName", "description": "  The tag name of the element to search for."}], "guessedname": "getAncestorByTagName", "guessedtype": "function"}, "contains": {"return": {"type": "", "description": "True if el is contained inside of parentNode, false otherwise."}, "description": "Check if a node is contained inside another node.", "param": "parent {Object} The CSS selector string or DOM node for the parent node.", "params": [{"type": "Object", "name": "parent", "description": "  The CSS selector string or DOM node for the parent node."}, {"type": "Object", "name": "el", "description": "  The CSS selector string or DOM node for the child node."}, {"type": "HTMLElement", "name": "orig", "description": "  The original parent node, used in recursion"}], "guessedname": "contains", "guessedtype": "function"}, "getAll": {"return": {"type": "Array", "description": "An array of elements matching the given selector."}, "description": "Find a collection of elements by CSS query selector.  If parentNode is passed as second argument,\nthe CSS selector is relative that node.", "param": "selector {String} Valid CSS query selector", "params": [{"type": "String", "name": "selector", "description": "  Valid CSS query selector"}, {"type": "HTMLElement", "name": "parentNode", "description": "  If present, CSS selector is relative to this DOM ndoe."}], "guessedname": "getAll", "guessedtype": "function"}, "setStyle": {"param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "name", "description": "  The style property name."}, {"type": "String", "name": "value", "description": "  The style property value."}], "description": "Set a style for a given element.", "guessedname": "setStyle", "guessedtype": "function"}, "hasClass": {"return": {"type": "", "description": "True if the node has the class name applied to it, false otherwise."}, "description": "Check if a DOM node has a given class name.", "param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "className", "description": "  The class name."}], "guessedname": "hasClass", "guessedtype": "function"}, "getAncestorByClassName": {"return": {"type": "", "description": "The ancestor node if found, false otherwise."}, "description": "Get an ancestor node by a class name", "param": "node {String|Object} The CSS selector string or DOM node.", "params": [{"type": "String|Object", "name": "node", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "className", "description": "  The name of the class to search for"}, {"type": "HTMLElement", "name": "parentNode", "description": "  the top element where to stop the search, body by default"}], "guessedname": "getAncestorByClassName", "guessedtype": "function"}, "getStyle": {"return": {"type": "String", "description": "Computed style for the given node and property"}, "description": "Get the computed style for a given element.", "param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "style", "description": "  The style property."}], "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "Array", "name": "xy", "description": "  Array containing the (x,y) coordinates to be set."}], "description": "Set the (x,y) coordinates of a given element", "guessedname": "setXY", "guessedtype": "function"}, "toggleClass": {"param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "className", "description": "  The class name."}], "description": "Toggle a classname for a particular DOM element", "guessedname": "toggleClass", "guessedtype": "function"}, "insertAfter": {"param": "node {Object}", "params": [{"type": "Object", "name": "node", "description": ""}, {"type": "String|Object", "name": "refNode", "description": "  The CSS selector string or DOM node to insert after"}], "description": "Insert an element after another element in the DOM.", "guessedname": "insertAfter", "guessedtype": "function"}, "createElement": {"return": {"type": "HTMLElement", "description": "DOM node with passed in attriutes."}, "description": "Create a DOM node.", "param": "nodeName {String} The node name of the element to be created", "params": [{"type": "String", "name": "nodeName", "description": "  The node name of the element to be created"}, {"type": "Object", "name": "options", "description": "  Attributes to be attached to the created element."}], "guessedname": "createElement", "guessedtype": "function"}, "setStyles": {"param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "Object", "name": "styles", "description": "  Object literal containing style definitions."}], "description": "Set a collection of styles for a given element.", "guessedname": "setStyles", "guessedtype": "function"}, "inDocument": {"return": {"type": "", "description": "True if el is contained inside the document, false otherwise."}, "description": "Check if a node exists in the document.", "param": "el {String|Object} The CSS selector string or DOM node.", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}], "guessedname": "inDocument", "guessedtype": "function"}, "removeElement": {"return": {"type": "HTMLElement", "description": "The deleted node"}, "description": "Remove a node from the DOM.", "param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}], "guessedname": "removeElement", "guessedtype": "function"}, "css": {"param": "css {String} The CSS string", "params": [{"type": "String", "name": "css", "description": "  The CSS string"}], "description": "Add a string of CSS to the document", "guessedname": "css", "guessedtype": "function"}, "addClass": {"param": "el {String|Object} The CSS selector string or DOM node", "params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node"}, {"type": "String", "name": "className", "description": "  The class name."}], "description": "Add a class name to a DOM node", "guessedname": "addClass", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Dom", "description": "Dom class"}, "Assert.ShouldFail": {"name": "Assert.ShouldFail", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}], "namespace": "Assert", "module": "test", "guessedname": "ShouldFail", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "ShouldFail", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}, "ResultSet": {"name": "ResultSet", "constructors": [{"params": [{"type": "Database", "name": "db", "description": "  A Gears database instance"}, {"type": "*", "name": "rs", "description": "  The Gears ResultSet from a call to database.execute"}], "description": "The ResultSet class is a wrapper for Gears which emulates\nthe HTML5 SQLResultSet class."}], "namespace": "", "module": "storage", "guessedname": "ResultSet", "file": "Storage.js", "guessedtype": "function", "shortname": "ResultSet", "properties": {"insertId": {"type": "Number", "description": "The id of the last SQL insert operation", "guessedname": "insertId", "guessedtype": "property"}, "rows": {"type": "ResultSetRowList", "description": "The result set rows for the SQL transaction", "guessedname": "rows", "guessedtype": "property"}, "rowsAffected": {"type": "Number", "description": "The number of rows affected by the last SQL transaction", "guessedname": "rowsAffected", "guessedtype": "property"}}, "description": "The ResultSet class is a wrapper for Gears which emulates\nthe HTML5 SQLResultSet class."}, "Button": {"name": "Button", "constructors": [{"params": [{"type": "Object} Button configuration includes\ntitle {String} The title to display in the button\nimage {String} The source of the image to display in the button\nstyle {String} One of the Button Style Constants (plain, done, bordered, ...)\naction {Function", "name": "config", "description": "  The method called when the button is activated"}], "description": "The Button class provides a native style button UI element."}], "namespace": "", "module": "button", "methods": {"initialize": {"description": "Button initialization sets up DOM and Events", "guessedname": "initialize", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "render": {"return": {"type": "mui.Button", "description": "The button instance"}, "params": [{"type": "HTMLElement|String", "name": "el", "description": "  The container to render the button into."}], "description": "Render the button element into a container. If no parent container is specified\nthe button will be appended to document.body.", "guessedname": "render", "guessedtype": "function"}}, "file": "Button.js", "shortname": "Button", "properties": {"STYLE_DONE": {"type": "String", "static": "", "description": "Done style constant", "guessedname": "STYLE_DONE", "guessedtype": "property"}, "STYLE_BORDERED": {"type": "String", "static": "", "description": "Bordered style constant", "guessedname": "STYLE_BORDERED", "guessedtype": "property"}, "STYLE_PLAIN": {"type": "String", "static": "", "description": "Plain style constant", "guessedname": "STYLE_PLAIN", "guessedtype": "property"}}, "description": "The Button class provides a native style button UI element."}, "Transition": {"name": "Transition", "constructors": [{"params": [{"type": "HTMLElement", "name": "inView", "description": "  The element to transition in"}, {"type": "HTMLElement", "name": "outView", "description": "  The element to transition out"}, {"type": "Object", "name": "options", "description": "  Transition options\ntype, duration, reverse, onComplete, onCancel"}], "description": "Transition constructor.<br/>\nThe new view is positioned relative to the current position of the old (currently visible) view."}], "namespace": "", "module": "transition", "methods": {"execute": {"description": "Execute the transition", "guessedname": "execute", "guessedtype": "function"}, "_transitionEnd": {"private": "", "description": "WebkitTransitionEnd callback", "guessedname": "_transitionEnd", "guessedtype": "function"}, "_translate": {"return": {"type": "HTMLElement", "description": "The translated element"}, "description": "Set the translation values for a given element", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to translate"}, {"type": "String", "name": "x", "description": "  The string value for x translation (i.e, '320px' or '100%')"}, {"type": "String", "name": "y", "description": "  The string value for y translation (i.e, '320px' or '100%')"}, {"type": "String", "name": "z", "description": "  The string value for z translation (i.e, '320px' or '100%')"}, {"type": "Number", "name": "duration", "description": "  (Optional) If duration is specified, a transition will occur"}, {"type": "Function", "name": "cb", "description": "  (Optional) Optional callback once transition ends, if duration is passed"}], "guessedname": "_translate", "guessedtype": "function"}, "setup": {"private": "", "description": "Setup the elements for the transition", "guessedname": "_setup", "guessedtype": "function"}, "_setTransitionProperties": {"guessedname": "_setTransitionProperties", "params": [{"type": "Array", "name": "properties", "description": "  Array of CSS property names"}], "description": "Set the transition properties of the elements", "private": "", "guessedtype": "function"}, "_removeTransitionProperties": {"private": "", "description": "Remove the transition properties from the elements", "guessedname": "_removeTransitionProperties", "guessedtype": "function"}}, "file": "Transition.js", "shortname": "Transition", "properties": {"DIR_BOTTOM_TO_TOP": {"type": "String", "static": "", "description": "Direction: bottom-to-top", "guessedname": "DIR_BOTTOM_TO_TOP", "guessedtype": "property"}, "DIR_RIGHT_TO_LEFT": {"type": "String", "static": "", "description": "Direction: right-to-left", "guessedname": "DIR_RIGHT_TO_LEFT", "guessedtype": "property"}, "TYPE_PUSH": {"type": "String", "static": "", "description": "Transition type: push", "guessedname": "TYPE_PUSH", "guessedtype": "property"}, "TYPE_SLIDE": {"type": "String", "static": "", "description": "Transition type: slide", "guessedname": "TYPE_SLIDE", "guessedtype": "property"}, "DURATIONS": {"type": "Object", "static": "", "description": "Default settings for transition durations", "guessedname": "DURATIONS", "guessedtype": "property"}, "TYPE_FLIP": {"type": "String", "static": "", "description": "Transition type: flip", "guessedname": "TYPE_FLIP", "guessedtype": "property"}, "DIR_TOP_TO_BOTTOM": {"type": "String", "static": "", "description": "Direction: top-to-bottom", "guessedname": "DIR_TOP_TO_BOTTOM", "guessedtype": "property"}, "DIR_LEFT_TO_RIGHT": {"type": "String", "static": "", "description": "Direction: left-to-right", "guessedname": "DIR_LEFT_TO_RIGHT", "guessedtype": "property"}, "TYPE_FADE": {"type": "String", "static": "", "description": "Transition type: fade", "guessedname": "TYPE_FADE", "guessedtype": "property"}}, "description": "Transition constructor.<br/>\nThe new view is positioned relative to the current position of the old (currently visible) view."}, "ScrollView": {"name": "ScrollView", "constructors": [{"params": [{"type": "Object} ScrollView configuration options. Valid options are:\nelement {HTMLElement|String} (required): the CSS Selector or element to scroll\naxis {String}: Either x, y or xy\nsize {Number|String}: Either a px value such as 300 or \"100%\" for fluid size\npagingEnabled {Boolean}: Whether or not to page the scroll-view\npaginator {Object} The paginator options. These include: \npageSelector {String} (required): CSS selector to describe what elements will be paged\nelement {HTMLElement|String", "name": "options", "description": " : If exists, the paging control will be rendered inside this element"}], "description": "ScrollView class\nProvides ability to create a scrollable container."}], "namespace": "", "module": "scroll-view", "methods": {"renderTexture": {"description": "This method renders the element into a texture by setting \nan initial translation. It then positions it off-screen \n(minus 1px) and scrolls the element via translations until\nthe entire element's content has been rendered in the texture.\nFinally, it is placed back on screen.", "guessedname": "renderTexture", "guessedtype": "function"}, "scrollTo": {"timing": "{String} The timing transition function", "params": [{"type": "Number", "name": "x", "description": "  The x position to scroll to"}, {"type": "Number", "name": "y", "description": "  The y position to scroll to"}, {"type": "Number", "name": "duration", "description": "  Number of milliseconds the animation should last"}, {"type": "Boolean", "name": "hideScrollBars", "description": "  (Default false) Set true to prevent the update of the scroll bars"}], "description": "Scroll the element to a given x, y, or x-y coordinate at a specified time.\nThe default transition is a cubic-bezier function.", "guessedname": "scrollTo", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The events"}], "description": "Event Dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "flashScrollBars": {"description": "Momentarily flash the scroll bars to indicate current scroll position", "guessedname": "flashScrollBars", "guessedtype": "function"}, "initialize": {"description": "Initialize the scroll view.", "guessedname": "initialize", "guessedtype": "function"}, "prevPage": {"params": [{"type": "Boolean", "name": "animated", "description": "  (Default true) If false, no animation will take place"}], "description": "Activate the previous page with animation, if paging is enabled.", "guessedname": "prevPage", "guessedtype": "function"}, "lockScroll": {"description": "Lock the ScrollView, preventing it from scrolling", "guessedname": "lockScroll", "guessedtype": "function"}, "initScrollBars": {"description": "Initialize the scroll-bar's, if enabled.", "guessedname": "initScrollBars", "guessedtype": "function"}, "onTouchEnd": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchend event handler", "guessedname": "onTouchEnd", "guessedtype": "function"}, "getElement": {"return": {"type": "HTMLElement", "description": "The root node"}, "description": "Return a reference to the root HTML node", "guessedname": "getElement", "guessedtype": "function"}, "onTouchMove": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchmove event handler", "guessedname": "onTouchMove", "guessedtype": "function"}, "updateScrollBars": {"description": "Position and resize the scroll bars according to the content size", "guessedname": "updateScrollBars", "guessedtype": "function"}, "updatePage": {"description": "Update the visual indicator for the current page", "guessedname": "updatePage", "guessedtype": "function"}, "unlockScroll": {"description": "Unlock the ScrollView, preventing it from scrolling", "guessedname": "unlockScroll", "guessedtype": "function"}, "showScrollBars": {"params": [{"type": "Boolean", "name": "animated", "description": "  Whether or not to animate the showing"}], "description": "Show the scroll bar indicators", "guessedname": "showScrollBars", "guessedtype": "function"}, "onClick": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "click event handler", "guessedname": "onClick", "guessedtype": "function"}, "getScrollHost": {"return": {"type": "HTMLElement", "description": "The scroll host element"}, "description": "Return a reference to the scroll host element which houses\nthe content of the scroll-view.", "guessedname": "getScrollHost", "guessedtype": "function"}, "nextPage": {"params": [{"type": "Boolean", "name": "animated", "description": "  (Default true) If false, no animation will take place"}], "description": "Activate the next page with animation, if paging is enabled.", "guessedname": "nextPage", "guessedtype": "function"}, "onTransitionEnd": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "transitionEnd event handler", "guessedname": "onTransitionEnd", "guessedtype": "function"}, "onTouchStart": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "touchStart event handler", "guessedname": "onTouchStart", "guessedtype": "function"}, "onOrientationChange": {"description": "orientationchange event handler", "guessedname": "onOrientationChange", "guessedtype": "function"}, "animateScroll": {"description": "Step through the deceleration animation", "guessedname": "animateScroll", "guessedtype": "function"}, "hideScrollBars": {"params": [{"type": "Boolean", "name": "animated", "description": "  Whether or not to animate the hiding"}], "description": "Hide the scroll bar indicators", "guessedname": "hideScrollBars", "guessedtype": "function"}, "getScrollOffsets": {"return": {"type": "Object} Scroll offsets in the form of: { x: 0, y: 0 ", "description": ""}, "description": "Return the current x/y scroll offsets", "guessedname": "getScrollOffsets", "guessedtype": "function"}, "setSize": {"params": [{"type": "Number", "name": "size", "description": "  The size, in px"}], "description": "Set the size, in px, of the scroll-view", "guessedname": "setSize", "guessedtype": "function"}, "initPager": {"description": "Initialize the pager control, if enabled.", "guessedname": "initPager", "guessedtype": "function"}}, "file": "ScrollView.js", "shortname": "ScrollView", "description": "ScrollView class\nProvides ability to create a scrollable container."}, "ApplicationController": {"name": "ApplicationController", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Application configuration must include\nid, title, version"}], "description": "Application controller constructor"}], "namespace": "", "module": "web-app", "methods": {"restore": {"return": {"type": "mui.ApplicationController", "description": "The AppController instance"}, "params": [{"type": "String", "name": "fallbackUrl", "description": "  URL to be opened if there is nothing to restore"}], "description": "Restore the state of the application. If no state is available,\nthe fallback URL will be opened", "guessedname": "restore", "guessedtype": "function"}, "showModalViewController": {"metho": "showModalViewController", "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The modal view controller"}, {"type": "Object", "name": "params", "description": "  Request params for the view controller"}, {"type": "mui.ViewController", "name": "parentViewController", "description": "  The parent view controller for the modal"}, {"type": "Boolean", "name": "animated", "description": "  If true, use a transition when showing the view controller"}], "description": "Animate or show a modal view controller", "guessedname": "showModalViewController", "guessedtype": "function"}, "toggleEvents": {"params": [{"type": "mui.ViewController", "name": "oldVc", "description": "  The disappearing view controller"}, {"type": "mui.ViewController", "name": "newVc", "description": "  The appearing view controller"}], "description": "Remove any stale event listeners from the disappearing view controller, and attach event\nlisteners to the appearing view controller", "guessedname": "toggleEvents", "guessedtype": "function"}, "openUrl": {"return": {"type": "Boolean", "description": "Returns false if url is not mapped to any \ncontroller"}, "params": [{"type": "String", "name": "url", "description": "  The URL to open"}, {"type": "Boolean", "name": "quiet", "description": "  (Optional) Prevent the viewController load sequence. Pass\ntrue if you just want to set the window hash, and not trigger the load/appear sequence"}], "description": "Open a URL - retrieve the navigationController to which\nthe URL belongs to and trigger it's load/appear sequence. \nThis method will also perform the view transition, if defined.\nURL's are defined as the navigationController's name, followed by\na slash, followed by the viewController's name, with any URL parameters\nfollowing that. Leading slashes are ignored.\nExample: '/stories/list' is equivalent to 'stories/list'", "guessedname": "openUrl", "guessedtype": "function"}, "getInstance": {"static": "", "return": {"type": "", "description": "the mui.ApplicationController instance"}, "description": "Return the instance of mui.ApplicationController", "guessedname": "getInstance", "guessedtype": "function"}, "_tabRefreshed": {"guessedname": "_tabRefreshed", "params": [{"type": "Number", "name": "index", "description": "  The index of the tab which the user selected"}], "description": "TabRefresh event handler for the mui.TabView activates the navigation controller's root view controller\ncorresponding to the tab", "private": "", "guessedtype": "function"}, "dismissModalViewController": {"metho": "dismissModalViewController", "params": [{"type": "mui.ViewController", "name": "parentViewController", "description": "  The parent view controller for the modal"}], "description": "Dismiss a modal view controller with transition", "guessedname": "dismissModalViewController", "guessedtype": "function"}, "_tabChanged": {"guessedname": "_tabChanged", "params": [{"type": "Number", "name": "index", "description": "  The index of the tab which the user selected"}], "description": "TabChange event handler for the mui.TabView activates the navigation controller\ncorresponding to the tab", "private": "", "guessedtype": "function"}, "registerController": {"params": [{"type": "mui.NavigationController", "name": "controller", "description": "  The controller to register"}], "description": "Register a controller with the application. If tabEl is passed in, the\nnavigationController will be mapped to that tab.", "guessedname": "registerController", "guessedtype": "function"}, "showViewController": {"param": "viewController {mui.ViewController} The ViewController to show.", "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The ViewController to show."}], "description": "Show a viewController on-screen, making it the visibleViewController", "guessedname": "showViewController", "guessedtype": "function"}, "openViewController": {"params": [{"type": "mui.ViewController", "name": "viewController", "description": "  the ViewController"}, {"type": "Object", "name": "params", "description": "  Any request params"}, {"type": "Boolean", "name": "quiet", "description": "  Pass quiet flag to openUrl"}], "description": "This is a convenience method for showing a viewController without constructing a URL.\nThe URL is built based on the viewController's name + the params that are passed in.", "guessedname": "openViewController", "guessedtype": "function"}, "objectsEqual": {"return": {"type": "Boolean", "description": "True if objects are equal, or false otherwise"}, "description": "Convenience utility for detecting object equality", "static": "", "guessedname": "objectsEqual", "guessedtype": "function", "params": [{"type": "Object", "name": "o1", "description": "  The first object"}, {"type": "Object", "name": "o2", "description": "  The second object"}]}, "_transitionEnd": {"guessedname": "_transitionEnd", "params": [{"type": "mui.ViewController", "name": "newVc", "description": "  The new visible view controller"}, {"type": "mui.ViewController", "name": "oldVc", "description": "  The old visible view controller"}], "description": "Callback invoked after a view controller transition", "private": "", "guessedtype": "function"}, "positionViewController": {"return": {"type": "mui.ApplicationController", "description": "The AppController instance"}, "params": [{"type": "mui.ViewController", "name": "viewController", "description": "  The view controller"}], "description": "Position the viewcontroller in the viewport, taking up as much vertical space as available", "guessedname": "positionViewController", "guessedtype": "function"}, "initialize": {"description": "Initialization method", "guessedname": "initialize", "guessedtype": "function"}, "getController": {"return": {"type": "", "description": "The controller, or null, if not found"}, "params": [{"type": "String", "name": "name", "description": "  The name of the controller"}], "description": "Get a navigation controller by name", "guessedname": "getController", "guessedtype": "function"}, "setTabsElement": {"params": [{"type": "String|HTMLElement", "name": "el", "description": "  Selector or HTMLElement for the tabs container"}], "description": "Set the element for the application. Use this method in conjuction with\nregisterController to map a navigationController to a particular tab", "guessedname": "setTabsElement", "guessedtype": "function"}, "handleEvent": {"guessedname": "handleEvent", "params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event disptcher", "private": "", "guessedtype": "function"}, "_urlChanged": {"guessedname": "_urlChanged", "params": [{"type": "String", "name": "url", "description": "  The current URL"}, {"type": "Object", "name": "params", "description": "  Any request parameters"}, {"type": "mui.NavigationController", "name": "navController", "description": "  The navigation controller to appear"}, {"type": "String", "name": "viewControllerName", "description": "  The NAME of the view controller to appear"}, {"type": "Boolean", "name": "unmatched", "description": "  True if no navigation controller mapping found"}], "description": "Callback triggered whenever the URL is changed", "private": "", "guessedtype": "function"}, "setData": {"return": {"type": "variant", "description": "The value of the property or =undefined= if it doesn't exist."}, "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to retrieve."}], "param": "{String} propertyName The name of the property to store.", "guessedname": "getData", "guessedtype": "function"}}, "file": "ApplicationController.js", "shortname": "ApplicationController", "properties": {"viewportInfo": {"type": "Object", "description": "Information about the viewport, such as whether or not full-screen\nis activated", "guessedname": "viewportInfo", "guessedtype": "property"}, "_instance": {"description": "Cache instance variable", "guessedname": "_instance", "guessedtype": "property"}, "shouldScrollViews": {"type": "Boolean", "description": "Whether or not views should be made into mui.ScrollViews's", "guessedname": "shouldScrollViews", "guessedtype": "property"}, "window": {"description": "Normalize window object", "guessedname": "window", "guessedtype": "property"}, "_controllers": {"guessedname": "_controllers", "type": "Array", "description": "Array of registered controllers", "private": "", "guessedtype": "property"}, "_tabView": {"guessedname": "_tabView", "type": "mui.TabView", "description": "Reference to the mui.TabView object, if tabs are used", "private": "", "guessedtype": "property"}, "visibleViewController": {"type": "mui.ViewController", "description": "Reference to the currently visible view controller", "guessedname": "visibleViewController", "guessedtype": "property"}, "popping": {"type": "Boolean", "description": "State variable used to determine if view is being popped", "guessedname": "popping", "guessedtype": "property"}}, "description": "Application controller constructor"}, "Storage": {"name": "Storage", "namespace": "", "module": "storage", "methods": {"transaction": {"param": "transCb {Function} The transaction callback", "params": [{"type": "Function", "name": "transCb", "description": "  The transaction callback"}, {"type": "Function", "name": "errorCb", "description": "  The error callback"}, {"type": "Function", "name": "successCb", "description": "  The success callback"}], "description": "Execute a database transaction. The first argument is the transaction\ncallback which will execute SQL statements against the database. The\nsecond argument is the error callback, and the third argument is the\nsuccess callback.", "guessedname": "transaction", "guessedtype": "function"}, "open": {"return": {"type": "mui.Storage", "description": "The storage object"}, "description": "Open a database", "param": "id {String} The id of the database to open", "static": "", "guessedname": "open", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": "  The id of the database to open"}, {"type": "String", "name": "version", "description": "  The version of the database to open"}, {"type": "String", "name": "title", "description": "  The title of the database to open"}]}}, "static": "", "file": "Storage.js", "shortname": "Storage", "description": "The Storage class provides a facility for storing data. A full HTMl5 or\nGears database will be created using the open method. This class implements\nthe HTML5 Storage interface, in addition to exposing the database functionality\nthrough executeSql"}, "ResultSetRowList": {"name": "ResultSetRowList", "constructors": [{"params": [{"type": "*", "name": "rs", "description": "  The Gears ResultSet from a call to database.execute"}], "description": "The ResultSetRowList class is a wrapper for Gears which emulates\nthe HTML5 SQLResultSetRowList class."}], "namespace": "", "module": "storage", "guessedname": "ResultSetRowList", "methods": {"item": {"return": {"type": "Object", "description": "The result item at the index"}, "params": [{"type": "Number", "name": "index", "description": "  The index"}], "description": "Retrieve the result item at a given index", "guessedname": "item", "guessedtype": "function"}}, "file": "Storage.js", "guessedtype": "function", "shortname": "ResultSetRowList", "properties": {"length": {"type": "Number", "description": "The length of the current result set of items", "guessedname": "length", "guessedtype": "property"}, "_items": {"guessedname": "_items", "type": "Array", "description": "Private property to store array of items in the result set list", "private": "", "guessedtype": "property"}}, "description": "The ResultSetRowList class is a wrapper for Gears which emulates\nthe HTML5 SQLResultSetRowList class."}, "Assert.ObjectAssert": {"name": "Assert.ObjectAssert", "namespace": "Assert", "module": "test", "guessedname": "ObjectAssert", "methods": {"hasKeys": {"static": "", "params": [{"type": "Array", "name": "properties", "description": " An array of property names that should be on the object."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an object has all properties of a reference object.", "guessedname": "hasKeys", "guessedtype": "function"}, "ownsKeys": {"static": "", "params": [{"type": "Array", "name": "properties", "description": " An array of property names that should be on the object."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that all properties exist on an object instance (not on its prototype).", "guessedname": "ownsKeys", "guessedtype": "function"}, "hasKey": {"static": "", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an object has a property with the given name.", "guessedname": "hasKey", "guessedtype": "function"}, "ownsNoKeys": {"static": "", "params": [{"type": "Object", "name": "object", "description": " The object to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an object owns no properties.", "guessedname": "ownsNoKeys", "guessedtype": "function"}, "ownsKey": {"static": "", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a property with the given name exists on an object instance (not on its prototype).", "guessedname": "ownsKey", "guessedtype": "function"}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "ObjectAssert", "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases."}, "Assert.ArrayAssert": {"name": "Assert.ArrayAssert", "namespace": "Assert", "module": "test", "guessedname": "ArrayAssert", "methods": {"containsMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.", "guessedname": "containsMatch", "guessedtype": "function"}, "doesNotContain": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not present in an array. This uses the triple equals \nAsserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "doesNotContain", "guessedtype": "function"}, "indexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "indexOf", "guessedtype": "function"}, "itemsAreSame": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreSame", "guessedtype": "function"}, "contains": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "contains", "guessedtype": "function"}, "containsItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.", "guessedname": "containsItems", "guessedtype": "function"}, "doesNotContainItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are not expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.", "guessedname": "doesNotContainItems", "guessedtype": "function"}, "itemsAreEquivalent": {"return": {"type": "Void", "description": ""}, "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.", "static": "", "guessedname": "itemsAreEquivalent", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "Function", "name": "comparator", "description": " A function that returns true if the values are equivalent\nor false if not."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEqual": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreEqual", "guessedtype": "function"}, "isEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is empty.", "guessedname": "isEmpty", "guessedtype": "function"}, "lastIndexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "lastIndexOf", "guessedtype": "function"}, "isNotEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is not empty.", "guessedname": "isNotEmpty", "guessedtype": "function"}, "doesNotContainMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.", "guessedname": "doesNotContainMatch", "guessedtype": "function"}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "ArrayAssert", "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases."}, "Test.Wait": {"name": "Test.Wait", "constructors": [{"params": [{"type": "Function", "name": "segment", "description": " A function to run when the wait is over."}, {"type": "int", "name": "delay", "description": " The number of milliseconds to wait before running the code."}], "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}], "namespace": "Test", "module": "test", "guessedname": "Wait", "file": "test.js", "guessedtype": "function", "shortname": "Wait", "properties": {"delay": {"type": "int", "description": "The delay before running the segment of code.", "guessedname": "delay", "guessedtype": "property"}, "segment": {"type": "Function", "description": "The segment of code to run when the wait is over.", "guessedname": "segment", "guessedtype": "property"}}, "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}, "NavigationBar": {"name": "NavigationBar", "constructors": [{"params": [{"type": "Object} NavigationBar configuration includes:\nnavigationController {mui.NavigationController} (Optional) A \nnavgation controller to attach to\ntintColor {String", "name": "config", "description": "  Override the default tint color"}], "description": "NavigationBar class\nThis class provides a navigation-bar component for a \nNavigationController. \nThe NavigationBar class has built-in components for title,\nback button, right bar button item, and a search box. It is \nalso possible to add custom controls to the navigation bar"}], "namespace": "", "module": "navigator", "methods": {"setItems": {"params": [{"type": "Object", "name": "items", "description": "  The navigation items"}, {"type": "Boolean", "name": "animated", "description": "  To enable animation (default is false)"}, {"type": "Boolean", "name": "reverse", "description": "  To animate in reverse (popping)"}], "description": "Set the navigation items for the navigation bar, with an \noption to animate the items into place", "guessedname": "setItems", "guessedtype": "function"}, "show": {"description": "Show the navigationBar element", "guessedname": "show", "guessedtype": "function"}, "setTitle": {"params": [{"type": "String|HTMLElement|*", "name": "title", "description": "  A DOM node to use as the content of the item, or\na string to use as title text, or an allowed control, such as mui.SearchBox"}], "description": "Set the contents of the title element", "guessedname": "setTitle", "guessedtype": "function"}, "handleEvent": {"private": "", "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "setBack": {"params": [{"type": "Function|String", "name": "action", "description": "  Either a function to be executed on click, or a URL"}, {"type": "String|Boolean", "name": "back", "description": "  The back string, or true to present arrow icon"}], "description": "Set the contents of the back element. Accepts either\na string or a truthy value as argument. If string, the word \nis displayed in the back button. If true, the arrow icon is \npresented instead", "guessedname": "setBack", "guessedtype": "function"}, "setLeftBarItem": {"params": [{"type": "HTMLElement", "name": "leftBarItem", "description": "  A DOM node to use as the content of the item"}], "description": "Set the contents of the leftBarItem element", "guessedname": "setLeftBarItem", "guessedtype": "function"}, "setRightBarItem": {"params": [{"type": "HTMLElement", "name": "rightBarItem", "description": "  A DOM node to use as the content of the item"}], "description": "Set the contents of the rightBarItem element", "guessedname": "setRightBarItem", "guessedtype": "function"}, "setTintColor": {"property": "tintColor {String} The new tint color", "description": "Update the appearance of the navigation bar to reflect the current tint color", "guessedname": "setTintColor", "guessedtype": "function"}, "initialize": {"description": "NavigationBar initialization creates the elements\nand inserts itself into the <header> of the page", "guessedname": "initialize", "guessedtype": "function"}, "hide": {"description": "Hide the navigationBar element", "guessedname": "hide", "guessedtype": "function"}, "setItemsWithAnimation": {"params": [{"type": "Object", "name": "items", "description": "  The new navigation items"}, {"type": "Boolean", "name": "reverse", "description": "  If animation should be in reverse"}], "description": "Set the navigation items in the bar with an animation. Contents of the\ntitle section are pushed out, while the back, leftBarItems and rightBarItems \nare faded in/out", "guessedname": "setItemsWithAnimation", "guessedtype": "function"}}, "file": "NavigationBar.js", "shortname": "NavigationBar", "properties": {"items": {"type": "Object", "description": "Currently visible navigation items", "guessedname": "items", "guessedtype": "property"}, "tintColor": {"type": "String", "description": "The tint color of the navigation bar, any valid\nCSS color string (#000, rgb(0,0,0), rgba(0,0,0,0.4))", "guessedname": "tintColor", "guessedtype": "property"}, "itemsContainer": {"type": "HTMLElement", "description": "HTMLElement container for items", "guessedname": "itemsContainer", "guessedtype": "property"}, "element": {"type": "HTMLElement", "description": "NavigationBar HTMLElement container", "guessedname": "element", "guessedtype": "property"}}, "description": "NavigationBar class\nThis class provides a navigation-bar component for a \nNavigationController. \nThe NavigationBar class has built-in components for title,\nback button, right bar button item, and a search box. It is \nalso possible to add custom controls to the navigation bar"}, "Navigator": {"name": "Navigator", "constructors": [{"description": "The Navigator class provides the ability to map the hash part of the URL\nto a particular view. The view must be a DOM element. If the DOM element \nhas a x-mui-href attribute, that content will be loaded over XHR."}], "namespace": "", "module": "navigator", "methods": {"openUrl": {"return": {"type": "Navigator", "description": "The navigator instance"}, "params": [{"type": "String", "name": "url", "description": "  The url to open"}, {"type": "Boolean", "name": "quiet", "description": "  (Optional) If true, then this method only changes the URL hash and does nothing else."}], "description": "Open a URL", "guessedname": "openUrl", "guessedtype": "function"}, "_checkWindow": {"private": "", "description": "Check the window location against the current location", "guessedname": "_checkWindow", "guessedtype": "function"}, "mapUrl": {"return": {"type": "Navigator", "description": "The Navigator instance"}, "params": [{"type": "String", "name": "url", "description": "  The url to map from"}, {"type": "Function", "name": "callback", "description": "  The function to map the URL to"}], "description": "Map a URL path to a callback function", "guessedname": "mapUrl", "guessedtype": "function"}, "_manageHistory": {"private": "", "guessedname": "_manageHistory", "guessedtype": "function"}, "_ioFailure": {"params": [{"type": "XMLHttpRequest", "name": "o", "description": "  The XHR object"}, {"type": "HTMLElement", "name": "newPage", "description": "  The DOM element for the showing view"}], "description": "XHR Transaction failure handler.", "guessedname": "_ioFailure", "guessedtype": "function"}, "_ioSuccess": {"params": [{"type": "XMLHttpRequest", "name": "o", "description": "  The XHR object"}, {"type": "HTMLElement", "name": "newPage", "description": "  The DOM element for the showing view"}], "description": "XHR Transaction success handler.", "guessedname": "_ioSuccess", "guessedtype": "function"}}, "file": "Navigator.js", "shortname": "Navigator", "properties": {"_history": {"private": "", "description": "Store history urls to detect forward/back button", "guessedname": "_history", "guessedtype": "property"}, "_hash": {"description": "Store the current location (hash)", "param": "_hash", "private": "", "guessedname": "_hash", "guessedtype": "property", "type": "String"}}, "description": "The Navigator class provides the ability to map the hash part of the URL\nto a particular view. The view must be a DOM element. If the DOM element \nhas a x-mui-href attribute, that content will be loaded over XHR."}, "Assert.ComparisonFailure": {"name": "Assert.ComparisonFailure", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value that caused the assertion to fail."}], "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}], "namespace": "Assert", "module": "test", "guessedname": "ComparisonFailure", "methods": {"toString": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "ComparisonFailure", "properties": {"expected": {"type": "Object", "description": "The expected value.", "guessedname": "expected", "guessedtype": "property"}, "actual": {"type": "Object", "description": "The actual value.", "guessedname": "actual", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}, "Test.Assert": {"name": "Test.Assert", "namespace": "Test", "module": "test", "guessedname": "Assert", "methods": {"isTrue": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isTrue", "guessedtype": "function"}, "isFalse": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isFalse", "guessedtype": "function"}, "isNotNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotNull", "guessedtype": "function"}, "fail": {"static": "", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}], "description": "Forces an assertion error to occur.", "guessedname": "fail", "guessedtype": "function"}, "isFunction": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a function.", "guessedname": "isFunction", "guessedtype": "function"}, "isNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not a number.", "guessedname": "isNaN", "guessedtype": "function"}, "isBoolean": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a Boolean.", "guessedname": "isBoolean", "guessedtype": "function"}, "areNotSame": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areNotSame", "guessedtype": "function"}, "isNotNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the special NaN value.", "guessedname": "isNotNaN", "guessedtype": "function"}, "areNotEqual": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areNotEqual", "guessedtype": "function"}, "areSame": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areSame", "guessedtype": "function"}, "_getCount": {"protected": "", "static": "", "description": "Returns the number of assertions that have been performed.", "guessedname": "_getCount", "guessedtype": "function"}, "isUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isUndefined", "guessedtype": "function"}, "isArray": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an array.", "guessedname": "isArray", "guessedtype": "function"}, "Y.assert": {"static": "", "params": [{"type": "Boolean", "name": "condition", "description": " The condition to test."}, {"type": "String", "name": "message", "description": " The message to display if the assertion fails."}], "description": "Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown\nand the test fails.", "guessedname": "assert", "guessedtype": "function"}, "isTypeOf": {"static": "", "params": [{"type": "String", "name": "expectedType", "description": " The expected type of the variable."}, {"type": "Object", "name": "actualValue", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is of a particular type.", "guessedname": "isTypeOf", "guessedtype": "function"}, "_formatMessage": {"return": {"type": "String", "description": "The final error message, containing either or both."}, "description": "Formats a message so that it can contain the original assertion message\nin addition to the custom message.", "protected": "", "static": "", "guessedname": "_formatMessage", "guessedtype": "function", "params": [{"type": "String", "name": "customMessage", "description": " The message passed in by the developer."}, {"type": "String", "name": "defaultMessage", "description": " The message created by the error by default."}]}, "_increment": {"protected": "", "static": "", "description": "Increments the number of assertions that have been performed.", "guessedname": "_increment", "guessedtype": "function"}, "areEqual": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areEqual", "guessedtype": "function"}, "isNumber": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a number.", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an object.", "guessedname": "isObject", "guessedtype": "function"}, "isString": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a string.", "guessedname": "isString", "guessedtype": "function"}, "isNotUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotUndefined", "guessedtype": "function"}, "isNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNull", "guessedtype": "function"}, "_reset": {"protected": "", "static": "", "description": "Resets the number of assertions that have been performed to 0.", "guessedname": "_reset", "guessedtype": "function"}, "isInstanceOf": {"static": "", "params": [{"type": "Function", "name": "expected", "description": " The function that the object should be an instance of."}, {"type": "Object", "name": "actual", "description": " The object to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.", "guessedname": "isInstanceOf", "guessedtype": "function"}, "Y.fail": {"static": "", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}], "description": "Forces an assertion error to occur. Shortcut for Y.Assert.fail().", "guessedname": "fail", "guessedtype": "property"}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "Assert", "properties": {"_asserts": {"guessedname": "_asserts", "type": "int", "description": "The number of assertions performed.", "private": "", "guessedtype": "property"}}, "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown."}, "Pager": {"name": "Pager", "constructors": [{"params": [{"type": "Object} The pager configuration options\nExample:\nvar myPager = new mui.Pager({ orientation: 'vertical' ", "name": "config", "description": " );"}], "description": "The Pager class provides a next/previous control which can be \nused in the navigation bar.  The orientation may either be\nvertical (up/down) or horizontal (left/right). The default \norientation is vertical."}], "namespace": "", "module": "pager", "methods": {"render": {"return": {"type": "Pager", "description": "The Pager instance"}, "params": [{"type": "HTMLElement|String", "name": "el", "description": "  The Selector or HTMLElement to render into"}], "description": "Render the pager element into a container", "guessedname": "render", "guessedtype": "function"}, "goPrev": {"return": {"type": "Pager", "description": "The Pager instance"}, "description": "Activate the prev item", "guessedname": "goPrev", "guessedtype": "function"}, "setNextUrl": {"return": {"type": "Pager", "description": "The Pager instance"}, "params": [{"type": "String", "name": "url", "description": "  The url"}], "description": "Set the URL for the next control", "guessedname": "setNextUrl", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "goNext": {"return": {"type": "Pager", "description": "The Pager instance"}, "description": "Activate the next item", "guessedname": "goNext", "guessedtype": "function"}, "setPrevUrl": {"return": {"type": "Pager", "description": "The Pager instance"}, "params": [{"type": "String", "name": "url", "description": "  The url"}], "description": "Set the URL for the previous control", "guessedname": "setPrevUrl", "guessedtype": "function"}}, "file": "Pager.js", "shortname": "Pager", "properties": {"nextUrl": {"type": "String", "description": "URL for next control", "guessedname": "nextUrl", "guessedtype": "property"}, "prevUrl": {"type": "String", "description": "URL for prev control", "guessedname": "prevUrl", "guessedtype": "property"}}, "description": "The Pager class provides a next/previous control which can be \nused in the navigation bar.  The orientation may either be\nvertical (up/down) or horizontal (left/right). The default \norientation is vertical."}, "Assert.DateAssert": {"name": "Assert.DateAssert", "namespace": "Assert", "module": "test", "guessedname": "DateAssert", "methods": {"datesAreEqual": {"static": "", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a date's month, day, and year are equal to another date's.", "guessedname": "datesAreEqual", "guessedtype": "function"}, "XML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted as an XML string.", "static": "", "guessedname": "XML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "TAP": {"return": {"type": "String", "description": "A TAP-formatted string of results."}, "description": "Returns test results formatted in TAP format.\nFor more information, see <a href=\"http://testanything.org/\">Test Anything Protocol</a>.", "static": "", "guessedname": "TAP", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JSON": {"return": {"type": "String", "description": "A JSON-formatted string of results."}, "description": "Returns test results formatted as a JSON string. Requires JSON utility.", "param": "{Object} coverage The coverage report object.", "static": "", "guessedname": "JSON", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JUnitXML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted in JUnit XML format.", "static": "", "guessedname": "JUnitXML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "XdebugJSON": {"return": {"type": "String", "description": "A JSON-formatted string of coverage data."}, "params": [{"type": "Object", "name": "coverage", "description": " The coverage report object."}], "description": "Returns the coverage report in a JSON format compatible with\nXdebug. See <a href=\"http://www.xdebug.com/docs/code_coverage\">Xdebug Documentation</a>\nfor more information. Note: function coverage is not available\nin this format.", "guessedname": "XdebugJSON", "guessedtype": "function"}, "timesAreEqual": {"static": "", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a date's hour, minutes, and seconds are equal to another date's.", "guessedname": "timesAreEqual", "guessedtype": "function"}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "DateAssert", "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases."}, "DataSource": {"name": "DataSource", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  DataSource configuration"}], "description": "(Taken from: http://developer.yahoo.com/yui/3/datasource/)\nThe DataSource Utility provides a consistent API for the retrieval of\ndata from arbitrary sources over a variety of supported protocols. The\nonly supported protocol at this time is a remote source over XHR. Thus, \nthe same-domain policy applies."}], "namespace": "", "module": "datasource", "methods": {"onSendFailure": {"params": [{"type": "o", "name": "response", "description": "  The response object"}], "description": "Callback method invoked upon a failed sendRequest", "guessedname": "onSendFailure", "guessedtype": "function"}, "flushCache": {"description": "Flush the contents of the cache", "guessedname": "flushCache", "guessedtype": "function"}, "restoreCache": {"description": "Restore the cache from the database", "guessedname": "restoreCache", "guessedtype": "function"}, "getCachedEntry": {"return": {"type": "*", "description": "The cached entry, if found"}, "params": [{"type": "String", "name": "request", "description": "  The request string"}], "description": "Retrieve a record stored in the cache", "guessedname": "getCachedEntry", "guessedtype": "function"}, "_getRequestUrl": {"return": {"type": "String", "description": "The request URL"}, "params": [{"type": "String", "name": "base", "description": "  The base URL"}, {"type": "String", "name": "params", "description": "  The request string"}], "description": "Resolve a request URL by identifying and appending URL parameters\nto a base URL", "private": ""}, "onRestore": {"description": "Placeholder method. Implement this method if you want to capture the \nevent when the database has been restored", "guessedname": "onRestore", "guessedtype": "function"}, "sendRequest": {"params": [{"type": "String", "name": "request", "description": "  Request parameter string"}], "description": "Make a request to the dataSource. If caching is enabled, the \nresult of the request will be cached according to the keepalive\nand max entries set for the cache", "guessedname": "sendRequest", "guessedtype": "function"}, "_hasExpired": {"params": [{"type": "Number", "name": "ts", "description": "  The timestamp of the cached entry"}, {"type": "Object} Object literal defining the keepalive time such as\n{ hours: 1, minutes: 30 ", "name": "keepalive", "description": ""}], "description": "Check to see if a cached record has expired, according to the keepalive\nproperty", "private": ""}, "getCache": {"return": {"type": "Array", "description": "Array of cached items"}, "description": "Get all contents which have been locally cached", "guessedname": "getCache", "guessedtype": "function"}, "addToCache": {"params": [{"type": "String", "name": "request", "description": "  The request string"}, {"type": "String", "name": "response", "description": "  The response text"}], "description": "Add an item to the cache", "guessedname": "addToCache", "guessedtype": "function"}, "onSendSuccess": {"params": [{"type": "String", "name": "request", "description": "  The request string"}, {"type": "String", "name": "response", "description": "  The response text"}], "description": "Callback method invoked upon a successful sendRequest", "guessedname": "onSendSuccess", "guessedtype": "function"}}, "file": "DataSource.js", "shortname": "DataSource", "description": "(Taken from: http://developer.yahoo.com/yui/3/datasource/)\nThe DataSource Utility provides a consistent API for the retrieval of\ndata from arbitrary sources over a variety of supported protocols. The\nonly supported protocol at this time is a remote source over XHR. Thus, \nthe same-domain policy applies."}, "Test.Reporter": {"name": "Test.Reporter", "constructors": [{"params": [{"type": "String", "name": "url", "description": " The URL to submit the results to."}, {"type": "Function", "name": "format", "description": " (Optiona) A function that outputs the results in a specific format.\nDefault is Y.Test.Format.XML."}], "description": "An object capable of sending test results to a server."}], "namespace": "Test", "module": "test", "guessedname": "Reporter", "methods": {"report": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Object", "name": "results", "description": " The results object created by TestRunner."}], "description": "Sends the report to the server.", "guessedname": "report", "guessedtype": "function"}, "destroy": {"return": {"type": "Void", "description": ""}, "description": "Cleans up the memory associated with the TestReporter, removing DOM elements\nthat were created.", "guessedname": "destroy", "guessedtype": "function"}, "addField": {"return": {"type": "Void", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The name of the field."}, {"type": "Variant", "name": "value", "description": " The value of the field."}], "description": "Adds a field to the form that submits the results.", "guessedname": "addField", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Reporter", "properties": {"url": {"type": "String", "description": "The URL to submit the data to.", "guessedname": "url", "guessedtype": "property"}, "_form": {"guessedname": "_form", "type": "HTMLFormElement", "description": "The form element used to submit the results.", "private": "", "guessedtype": "property"}, "_fields": {"guessedname": "_fields", "type": "Object", "description": "Extra fields to submit with the request.", "private": "", "guessedtype": "property"}, "_iframe": {"guessedname": "_iframe", "type": "HTMLIFrameElement", "description": "Iframe used as a target for form submission.", "private": "", "guessedtype": "property"}, "format": {"type": "Function", "description": "The formatting function to call when submitting the data.", "guessedname": "format", "guessedtype": "property"}}, "description": "An object capable of sending test results to a server."}, "Assert.Error": {"name": "Assert.Error", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}], "namespace": "Assert", "module": "test", "guessedname": "Error", "methods": {"valueOf": {"return": {"type": "String", "description": "A primitive value version of the error."}, "description": "Returns a primitive value version of the error. Same as toString().", "guessedname": "valueOf", "guessedtype": "function"}, "getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.", "guessedname": "getMessage", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the error."}, "description": "Returns a string representation of the error.", "guessedname": "toString", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Error", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}, "Event": {"name": "Event", "namespace": "", "module": "event", "methods": {"on": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "type", "description": "  The event type (click, touchstart, etc)"}, {"type": "Function", "name": "fn", "description": "  The callback function fired on the event"}, {"type": "Object", "name": "ctx", "description": "  The scope to be applied to the callback"}, {"type": "Boolean", "name": "useCapture", "description": "  Whether or not to initiate capture"}], "description": "Attach an event to a given element", "param": "el {String|Object} The CSS selector string or DOM node."}, "removeEventListener": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "type", "description": "  The event type (click, touchstart, etc)"}, {"type": "Function", "name": "fn", "description": "  The callback function fired on the event"}, {"type": "Object", "name": "ctx", "description": "  The scope to be applied to the callback"}, {"type": "Boolean", "name": "useCapture", "description": "  Whether or not to initiate capture"}], "description": "Remove an event handler from a given element", "param": "el {String|Object} The CSS selector string or DOM node."}, "fireEvent": {"param": "type {String} The event type (click, touchstart, etc)", "params": [{"type": "Event", "name": "e", "description": "  The generated event"}], "description": "Event handler - used to allow for speedy clicks on iPhone", "private": ""}, "one": {"params": [{"type": "String|Object", "name": "el", "description": "  The CSS selector string or DOM node."}, {"type": "String", "name": "type", "description": "  The event type (click, touchstart, etc)"}, {"type": "Function", "name": "fn", "description": "  The callback function fired on the event"}, {"type": "Object", "name": "ctx", "description": "  The scope to be applied to the callback"}, {"type": "Boolean", "name": "useCapture", "description": "  Whether or not to initiate capture"}], "description": "Attach an event to a given element one time", "param": "el {String|Object} The CSS selector string or DOM node."}}, "static": "", "file": "mui.js", "shortname": "Event", "description": "Event class"}, "SearchBox": {"name": "SearchBox", "constructors": [{"params": [{"type": "Object} SearchBox configuration options\nExample:\nnew mui.SearchBox({\nplaceholder: 'Search',\nautocorrect: 'off',\nautocapitalize: 'off',\ncallback: {\nsubmit: mySubmitHandler,\nkeyup: myKeyupHandler,\n}\n", "name": "config", "description": " );"}], "description": "The SearchBox class provides a standard search box container\nwith the ability to trigger callbacks during interesting moments,\nsuch as onSubmit, onKeypress, etc"}], "namespace": "", "module": "search-box", "methods": {"clear": {"return": {"type": "SearchBox", "description": "The searchBox instance"}, "description": "Clear the value of the search field, and hide the close button", "guessedname": "clear", "guessedtype": "function"}, "setValue": {"return": {"type": "mui.SearchBox", "description": "The searchBox instance"}, "params": [{"type": "String", "name": "v", "description": "  The value"}], "description": "Set the value of the input field", "guessedname": "setValue", "guessedtype": "function"}, "handleEvent": {"params": [{"type": "Event", "name": "e", "description": "  The event"}], "description": "Event dispatcher", "guessedname": "handleEvent", "guessedtype": "function"}, "render": {"return": {"type": "SearchBox", "description": "The searchBox instance"}, "params": [{"type": "String|HTMLElement", "name": "container", "description": "  Selector or HTMLElement for the container"}], "description": "Render the SearchBox into a container", "guessedname": "render", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "The search-box input value"}, "description": "Retrieve the value of the input field", "guessedname": "getValue", "guessedtype": "function"}}, "file": "SearchBox.js", "shortname": "SearchBox", "properties": {"input": {"type": "HTMLElement", "description": "SearchBox input element", "guessedname": "input", "guessedtype": "property"}, "closeButton": {"type": "HTMLElement", "description": "Close Button container used to clear search field when pressed", "guessedname": "closeButton", "guessedtype": "property"}, "placeholder": {"type": "String", "description": "Default value for input field", "guessedname": "placeholder", "guessedtype": "property"}, "callback": {"type": "Object", "description": "Associate listing of callback handlers regsitered\nin the constructor", "guessedname": "callback", "guessedtype": "property"}, "element": {"type": "HTMLElement", "description": "SearchBox container element", "guessedname": "element", "guessedtype": "property"}}, "description": "The SearchBox class provides a standard search box container\nwith the ability to trigger callbacks during interesting moments,\nsuch as onSubmit, onKeypress, etc"}, "Utility": {"name": "Utility", "namespace": "", "module": "util", "methods": {"log": {"param": "o {String|Object} The string or object to log to the debug console.", "params": [{"type": "String|Object", "name": "o", "description": "  The string or object to log to the debug console."}], "description": "Log a message or object to the console.", "guessedname": "log", "guessedtype": "function"}, "trace": {"param": "o {String|Object} The string or object to log to the debug console.", "params": [{"type": "String|Object", "name": "o", "description": "  The string or object to log to the debug console."}], "description": "Log a trace message or object to the console.", "guessedname": "trace", "guessedtype": "function"}, "setLogLevel": {"param": "level {String} The desired log level", "params": [{"type": "String", "name": "level", "description": "  The desired log level"}], "description": "The log level allows you to set the appropriate logging level\nfor your application", "guessedname": "setLogLevel", "guessedtype": "function"}, "warn": {"param": "o {String|Object} The string or object to log to the debug console.", "params": [{"type": "String|Object", "name": "o", "description": "  The string or object to log to the debug console."}], "description": "Log a warning message or object to the console.", "guessedname": "warn", "guessedtype": "function"}, "error": {"param": "o {String} The error string", "params": [{"type": "String", "name": "o", "description": "  The error string"}, {"type": "Boolean", "name": "throwError", "description": "  If true, throw an exception."}], "description": "Log an error.  If second argument passed is true,\nthis throws an exception.", "guessedname": "error", "guessedtype": "function"}, "debug": {"param": "o {String|Object} The string or object to log to the debug console.", "params": [{"type": "String|Object", "name": "o", "description": "  The string or object to log to the debug console."}], "description": "Log a debug message or object to the console.", "guessedname": "debug", "guessedtype": "function"}, "iterate": {"param": "obj {Object} The object to iterate over", "params": [{"type": "Object", "name": "obj", "description": "  The object to iterate over"}, {"type": "Function", "name": "cb", "description": "  The callback function applied to each member of the object"}, {"type": "Object", "name": "ctx", "description": "  The scope applied to the callback function."}], "description": "Iterate over an object", "guessedname": "iterate", "guessedtype": "function"}, "each": {"param": "collection {Array} The array to iterate over", "params": [{"type": "Array", "name": "collection", "description": "  The array to iterate over"}, {"type": "Function", "name": "cb", "description": "  The callback function applied to each member of the array"}, {"type": "Object", "name": "ctx", "description": "  The scope applied to the callback function."}], "description": "Iterate over an array", "guessedname": "each", "guessedtype": "function"}}, "static": "", "file": "mui.js", "shortname": "Utility", "description": "Utility class"}}, "version": "1.0.0", "namespaces": ["Test", "Assert", "Test.Format", "Coverage.Format"]}